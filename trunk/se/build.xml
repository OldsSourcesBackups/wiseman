<?xml version="1.0" encoding="UTF-8"?>

<!--
 Copyright 2005 Sun Microsystems, Inc.
 
 Licensed under the Apache License, Version 2.0 (the "License"); 
 you may not use this file except in compliance with the License. 
 You may obtain a copy of the License at 
 
         http://www.apache.org/licenses/LICENSE-2.0 
 
 Unless required by applicable law or agreed to in writing, software 
 distributed under the License is distributed on an "AS IS" BASIS, 
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 See the License for the specific language governing permissions and 
 limitations under the License.
 
 $Id: build.xml,v 1.36 2006-07-20 00:11:59 akhilarora Exp $
-->

<project name="wiseman" default="war" basedir=".">

  <property file="project.properties"/>
  <property file="${user.home}/.ant.properties"/>

  <target name="init">
    <tstamp />
    <mkdir dir="${dist.dir}" />
    <mkdir dir="${build.dir}" />
    <mkdir dir="${build.classes.dir}" />
  </target>

  <target name="clean" depends="test-clean, javadoc-clean">
    <delete dir="${dist.dir}" />
    <delete dir="${build.dir}" />
    <delete dir="${build.classes.dir}" />
  </target>

  <path id="jaxb.compile.classpath">
    <fileset dir="${jaxb.lib.dir}">
      <include name="**/*.jar" />
    </fileset>
  </path>

  <path id="jaxrpc.compile.classpath">
    <fileset dir="${jaxrpc.lib.dir}">
      <include name="**/*.jar" />
    </fileset>
  </path>

  <!-- use this target to (re)compile schemas and regenerate the JAXB artifacts -->
  <target name="generate-jaxb" depends="init">
    <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
      <classpath refid="jaxb.compile.classpath" />
    </taskdef>

    <xjc target="${gen.src.dir}">
      <!-- uncomment if HTTP proxies are needed for internet access, 
           define them in ${user.home}/.ant.properties -->
      <!--
      <arg value="-host" />
      <arg value="${http.proxy.host}" />
      <arg value="-port" />
      <arg value="${http.proxy.port}" />
      -->
      <schema dir="${basedir}/etc/xsd" includes="1-xml.xsd" /> 
      <schema dir="${basedir}/etc/xsd" includes="2-soap.xsd" /> 
      <produces dir="${gen.src.dir}" includes="org/w3/_2003/_05/soap_envelope/*.java" />
      <schema dir="${basedir}/etc/xsd" includes="3-identity.xsd" />
      <produces dir="${gen.src.dir}" includes="org/dmtf/schemas/wbem/wsman/identity/_1/wsmanidentity/*.java" />
      <schema dir="${basedir}/etc/xsd" includes="3-addressing.xsd" />
      <produces dir="${gen.src.dir}" includes="org/xmlsoap/schemas/ws/_2004/_08/addressing/*.java" />
      <schema dir="${basedir}/etc/xsd" includes="4-enumeration.xsd" /> 
      <produces dir="${gen.src.dir}" includes="org/xmlsoap/schemas/ws/_2004/_09/enumeration/*.java" />
      <schema dir="${basedir}/etc/xsd" includes="4-eventing.xsd" /> 
      <produces dir="${gen.src.dir}" includes="org/xmlsoap/schemas/ws/_2004/_08/eventing/*.java" />
      <schema dir="${basedir}/etc/xsd" includes="4-transfer.xsd" /> 
      <produces dir="${gen.src.dir}" includes="org/xmlsoap/schemas/ws/_2004/_09/transfer/*.java" />
      <schema dir="${basedir}/etc/xsd" includes="5-management.xsd" />
      <produces dir="${gen.src.dir}" includes="org/dmtf/schemas/wbem/wsman/_1/wsman/*.java" />
      <schema dir="${test.dir}/etc/xsd" includes="6-test-foo.xsd" />
      <produces dir="${gen.src.dir}" includes="foo/test/*.java" />
    </xjc>
  </target>

  <path id="compile.classpath">
    <path refid="jaxb.compile.classpath" />
    <path refid="jaxrpc.compile.classpath" />
    <path path="${build.classes.dir}" />
    <fileset dir="${lib.dir}">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <target name="compile" depends="init">
    <javac destdir="${build.classes.dir}"
           target="1.5"
           debug="${debug}">
      <classpath refid="compile.classpath" />
      <src path="${gen.src.dir}" />
      <src path="${src.dir}" />
    </javac>
    <propertyfile file="${src.dir}/wsman.properties">
      <entry key="build.version" value="${DSTAMP}${TSTAMP}" />
      <entry key="spec.version" value="${spec.version}" />
      <entry key="impl.version" value="${impl.version}" />
      <entry key="impl.vendor" value="${impl.vendor}" />
      <entry key="impl.url" value="${impl.url}" />
    </propertyfile>
    <copy todir="${build.classes.dir}">
      <fileset dir="${src.dir}">
        <include name="**/*.properties" />
      </fileset>
    </copy>
  </target>

  <target name="lib" depends="compile">

    <!-- Build Server Shared Jar -->
    <jar destfile="${dist.dir}/${lib.filename}"
         index="true">
      <fileset dir="${build.classes.dir}">
        <exclude name="com/sun/ws/management/server/handler/**" />
      </fileset>
      <fileset dir="${build.classes.dir}">
        <include name="wsman.properties" />
      </fileset>
      <manifest>
        <attribute name="Built-By" value="${user.name}" />
        <attribute name="Built-At" value="${DSTAMP}${TSTAMP}" />
        <attribute name="Specification-Title" value="WS-Management" />
        <attribute name="Specification-Version" value="${spec.version}" />
        <attribute name="Implementation-Title" value="Wiseman SE Library" />
        <attribute name="Implementation-Version" value="${impl.version}" />
        <attribute name="Implementation-Vendor" value="${impl.vendor}" />
        <attribute name="Implementation-URL" value="${impl.url}" />
        <attribute name="Sealed" value="true" />
      </manifest>
      <metainf dir=".">
        <include name="LICENSE" />
        <include name="NOTICE" />
      </metainf>
    </jar>

    <!-- Build src Jar -->
    <jar destfile="${dist.dir}/${src.lib.filename}"
         index="true">
      <fileset dir="${src.dir}">
        <exclude name="com/sun/ws/management/server/handler/**" />
      </fileset>
      <manifest>
        <attribute name="Built-By" value="${user.name}" />
        <attribute name="Built-At" value="${DSTAMP}${TSTAMP}" />
        <attribute name="Specification-Title" value="WS-Management" />
        <attribute name="Specification-Version" value="${spec.version}" />
        <attribute name="Implementation-Title" value="Wiseman SE Library Source" />
        <attribute name="Implementation-Version" value="${impl.version}" />
        <attribute name="Implementation-Vendor" value="${impl.vendor}" />
        <attribute name="Implementation-URL" value="${impl.url}" />
        <attribute name="Sealed" value="true" />
      </manifest>
      <metainf dir=".">
        <include name="LICENSE" />
        <include name="NOTICE" />
      </metainf>
    </jar>
  </target>
  
  <target name="war" depends="test-compile,compile">
    <war destfile="${dist.dir}/${war.filename}"
         webxml="etc/web.xml"
         index="true">
      <classes dir="${build.classes.dir}">
        <include name="com/sun/ws/management/server/handler/**" />
        <include name="com/hp/**" />
      </classes>
        <classes dir="${test.build.classes.dir}">
          <include name="com/sun/ws/management/server/handler/**" />
          <include name="com/hp/**" />
          <include name="framework/models/**" />
        </classes>
      <lib dir="${dist.dir}">
        <include name="${lib.filename}" />
      </lib>
      <manifest>
        <attribute name="Built-By" value="${user.name}" />
        <attribute name="Built-At" value="${DSTAMP}${TSTAMP}" />
        <attribute name="Specification-Title" value="WS-Management" />
        <attribute name="Specification-Version" value="${spec.version}" />
        <attribute name="Implementation-Title" value="Wiseman SE Server Tests" />
        <attribute name="Implementation-Version" value="${impl.version}" />
        <attribute name="Implementation-Vendor" value="${impl.vendor}" />
        <attribute name="Implementation-URL" value="${impl.url}" />
        <attribute name="Sealed" value="true" />
      </manifest>
      <metainf dir=".">
        <include name="LICENSE" />
        <include name="NOTICE" />
      </metainf>
      <metainf dir="etc">
        <include name="context.xml" />
      </metainf>
      <webinf dir="etc">
        <include name="sun-web.xml" />
      </webinf>
      <!-- the build runs without schema validation by default 
           to enable schema validation, see etc/xsd/README -->
      <zipfileset dir="etc/xsd"
                  prefix="xsd"
                  includes="*.xsd" />
      <zipfileset dir="${build.classes.dir}"
                  includes="*.properties" />
      <zipfileset dir="${src.dir}"
                  includes="**/*.xml" />
    </war>
  </target>
  
  <target name="events" depends="test-compile">
    <war destfile="${dist.dir}/${events.filename}"
         webxml="etc/events-web.xml"
         index="true">
      <classes dir="${test.build.classes.dir}">
        <include name="server/EventsReceiverServlet.class" />
      </classes>
      <manifest>
        <attribute name="Built-By" value="${user.name}" />
        <attribute name="Built-At" value="${DSTAMP}${TSTAMP}" />
        <attribute name="Specification-Title" value="WS-Management" />
        <attribute name="Specification-Version" value="${spec.version}" />
        <attribute name="Implementation-Title" value="Wiseman SE Events Receiver Test" />
        <attribute name="Implementation-Version" value="${impl.version}" />
        <attribute name="Implementation-Vendor" value="${impl.vendor}" />
        <attribute name="Implementation-URL" value="${impl.url}" />
        <attribute name="Sealed" value="true" />
      </manifest>
      <metainf dir=".">
        <include name="LICENSE" />
        <include name="NOTICE" />
      </metainf>
    </war>
  </target>

  <!-- set catalina.home in "${user.home}/.ant.properties" -->
  <path id="deployer.classpath">
    <pathelement path="${catalina.home}/server/lib/catalina-ant.jar" />
  </path>

  <taskdef name="deploy" classname="org.apache.catalina.ant.DeployTask" classpathref="deployer.classpath" />
  <target name="deploy" depends="lib,war">
    <copy todir="${catalina.home}/shared/lib">
      <fileset dir="${jaxb.lib.dir}">
        <include name="activation.jar" />
        <include name="jaxb-api.jar" />
        <include name="jaxb-impl.jar" />
        <include name="jaxb-xjc.jar" />
        <include name="jsr173_1.0_api.jar" />
      </fileset>
      <fileset dir="${jaxrpc.lib.dir}">
        <include name="saaj-api.jar" />
        <include name="saaj-impl.jar" />
      </fileset>
    </copy>
    <deploy url="${catalina.manager.url}" username="${catalina.manager.username}" password="${catalina.manager.password}"
            path="${war.context.path}" war="${dist.dir}/${war.filename}" update="true" />
  </target>

  <taskdef name="reload" classname="org.apache.catalina.ant.ReloadTask" classpathref="deployer.classpath" />
  <target name="reload" depends="war">
    <reload url="${catalina.manager.url}" username="${catalina.manager.username}" password="${catalina.manager.password}" 
            path="${war.context.path}" />
  </target>
  
  <target name="javadoc-init" depends="init">
    <mkdir dir="${doc.dist.dir}" />
  </target>

  <target name="javadoc-clean">
    <delete dir="${doc.dist.dir}" />
  </target>
  
  <target name="javadoc" depends="compile,javadoc-init">
    <javadoc destdir="${doc.dist.dir}"
             access="public"
             use="true"
             windowtitle="Wiseman API"
             source="1.5"
             classpathref="compile.classpath">
      <packageset dir="${src.dir}" 
                  defaultexcludes="yes">
        <include name="com/sun/ws/management/**" />
      </packageset>
      <packageset dir="${gen.src.dir}" 
                  defaultexcludes="yes">
        <include name="org/**" />
      </packageset>
    </javadoc>
  </target>

  <path id="test.compile.classpath">
    <path refid="compile.classpath" />
    <fileset dir="${test.lib.dir}">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <target name="test-init" depends="init">
    <mkdir dir="${test.build.dir}" />
    <mkdir dir="${test.build.classes.dir}" />
    <mkdir dir="${test.run.dir}" />
  </target>

  <target name="test-clean">
    <delete dir="${test.build.classes.dir}" />
    <delete dir="${test.build.dir}" />
    <delete dir="${test.run.dir}" />
  </target>
  
  <target name="test-compile" depends="compile,test-init">
    <javac destdir="${test.build.classes.dir}"
           debug="${debug}">
      <classpath refid="test.compile.classpath" />
      <src path="${test.src.dir}" />
    </javac>
    <copy todir="${test.build.classes.dir}">
      <fileset dir="${test.src.dir}">
        <include name="**/*.xml" />
      </fileset>
    </copy>
  </target>
  
  <path id="test.run.classpath">
    <path path="${test.build.classes.dir}" />
    <fileset dir="${dist.dir}">
        <include name="${lib.filename}"/>
    </fileset>
    <path refid="jaxb.compile.classpath" />
    <path refid="jaxrpc.compile.classpath" />
    <fileset dir="${test.lib.dir}">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <target name="test-deploy" depends="events">
    <deploy url="${catalina.manager.url}" username="${catalina.manager.username}" password="${catalina.manager.password}"
            path="/events" war="${dist.dir}/${events.filename}" update="true" />
  </target>
  
  <target name="test" depends="lib,test-compile,deploy,test-deploy">
    <copy todir="${ant.home}/lib" 
          file="${test.lib.dir}/junit.jar" />
    <taskdef name="junit"
             classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" />
    <junit dir="${test.run.dir}"
           showoutput="true"
           fork="true" haltonfailure="true">
      <assertions>
        <enable/>
      </assertions>
      <batchtest todir="${test.run.dir}">
        <fileset dir="${test.src.dir}">
          <include name="management/*Test.java" />
            <include name="framework/*TestCase.java" />
        </fileset>
      </batchtest>
      <classpath refid="test.run.classpath" />
      <formatter usefile="false" type="brief"/>
      <formatter type="xml"/>
      <jvmarg value="-Dwsman.dest=http://localhost:8080/wsman/" />
      <jvmarg value="-Dwsman.user=wsman" />
      <jvmarg value="-Dwsman.password=secret" />
      <jvmarg value="-Dwsman.basicauthentication=true" />
    </junit>
  </target>
  
  <target name="demo-identify" depends="lib,test-compile">
    <java classname="demo.CmdLineDemo"
          classpathref="test.run.classpath"
          dir="${test.run.dir}"
          fork="true">
      <assertions>
        <enable/>
      </assertions>
      <arg value="identify" />
      <jvmarg value="-Dwsman.dest=http://localhost:8080/wsman/" />
      <jvmarg value="-Dwsman.user=wsman" />
      <jvmarg value="-Dwsman.password=secret" />
      <jvmarg value="-Dwsman.basicauthentication=true" />
    </java>
  </target>
  
  <target name="demo-get" depends="lib,test-compile">
    <java classname="demo.CmdLineDemo"
          classpathref="test.run.classpath"
          dir="${test.run.dir}"
          fork="true">
      <assertions>
        <enable/>
      </assertions>
      <arg value="get" />
      <!-- NOTE: this fails with an AccessDenied fault if the server is running 
           with a security manager in place which disallows enumeration of system properties -->
      <arg value="wsman:test/java/system/properties" />
      <jvmarg value="-Dwsman.dest=http://localhost:8080/wsman/" />
      <jvmarg value="-Dwsman.user=wsman" />
      <jvmarg value="-Dwsman.password=secret" />
      <jvmarg value="-Dwsman.basicauthentication=true" />
    </java>
  </target>

  <target name="demo-enum" depends="lib,test-compile">
    <java classname="demo.CmdLineDemo"
          classpathref="test.run.classpath"
          dir="${test.run.dir}"
          fork="true">
      <assertions>
        <enable/>
      </assertions>
      <arg value="enumerate" />
      <!-- NOTE: this fails with an AccessDenied fault if the server is running 
           with a security manager in place which disallows enumeration of system properties -->
      <arg value="wsman:test/java/system/properties" />
      <jvmarg value="-Dwsman.dest=http://localhost:8080/wsman/" />
      <jvmarg value="-Dwsman.user=wsman" />
      <jvmarg value="-Dwsman.password=secret" />
      <jvmarg value="-Dwsman.basicauthentication=true" />
    </java>
  </target>
  
  <target name="interop" depends="lib,test-compile">
    <copy todir="${ant.home}/lib" 
          file="${test.lib.dir}/junit.jar" />
    <taskdef name="junit"
             classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" />
    <junit dir="${test.run.dir}"
           showoutput="true"
           fork="true">
      <assertions>
        <enable/>
      </assertions>
      <batchtest todir="${test.run.dir}">
        <fileset dir="${test.src.dir}">
          <include name="interop/_06/*Test.java" />
        </fileset>
      </batchtest>
      <classpath refid="test.run.classpath" />
      <formatter usefile="false" type="brief"/>
      <formatter type="xml"/>
      <jvmarg value="-Dwsman.dest=http://localhost:8080/wsman/" />
      <jvmarg value="-Dwsman.user=wsman" />
      <jvmarg value="-Dwsman.password=secret" />
      <jvmarg value="-Dwsman.basicauthentication=true" />
    </junit>
  </target>
</project>