#*
  This is the template to produce the required CUSTOM delegate.

  This delegate utilizes TransferSupport.

  Required Velocity Variables: 
    ${package}              - packagename for the class
    ${delegateName}         - simple name of delegate class
    ${hasCustomOpNames}     - boolean. Determines if a mapping is needed for
                              SPEC Action URIs to custom op names
    ${hasCustomOps}         - boolean. Determines if there are custom operations.
    ${overriddenMethodMap}  - Map containing key:String ActionURI to value:WsManOp
                              this is used for overridden SPEC operation names
    ${customOperationMap}   - Map containing key:String ActionURI to value:WsManOp
                              this is used for custom operations
    ${jaxbFactoryPackage}       - package name for the JAXB type associated with the resource
*#
package ${package};

import com.sun.ws.management.framework.transfer.TransferSupport;
import com.sun.ws.management.Management;
import com.sun.ws.management.server.HandlerContext;

import ${jaxbFactoryPackage}.ObjectFactory;

import java.util.logging.Logger;

/**
 * ${delegateName} delegate is responsible for processing WS-Transfer actions.
 * @GENERATED
 */
public class ${delegateName} extends TransferSupport {

    // Log for logging messages
    @SuppressWarnings("unused")
    private final Logger log;
    private final ObjectFactory resourceFactory;
    
    public static final org.xmlsoap.schemas.ws._2004._08.addressing.ObjectFactory addressingFactory =
                         new org.xmlsoap.schemas.ws._2004._08.addressing.ObjectFactory();
    public static final org.dmtf.schemas.wbem.wsman._1.wsman.ObjectFactory managementFactory =
                         new org.dmtf.schemas.wbem.wsman._1.wsman.ObjectFactory();
    
    public ${delegateName}() {
        super();
        
        // Initialize our member variables
        log = Logger.getLogger(${delegateName}.class.getName());
        resourceFactory = new ObjectFactory();
    } 
#if(!${hasCustomOpNames})

    public void create(HandlerContext context, Management request, Management response) {
        super.create(context, request, response);
    }
    
    public void delete(HandlerContext context,Management request, Management response) {
        super.delete(context, request, response);
    }

    public void get(HandlerContext context, Management request, Management response) {
        super.get(context, request, response);
    }

    public void put(HandlerContext context,Management request, Management response) {
        super.put(context,request,response);
    }
#end
#if(${hasCustomOpNames})
#foreach( $key in ${overriddenMethodMap.keySet()} )

    public void ${overriddenMethodMap.get($key).OverriddenOpName}( HandlerContext context, Management request, Management response ) {
        //TODO IMPLEMENT
        ${overriddenMethodMap.get($key).OperationName}( context, request, response);
    }
#end
#end
#if(${hasCustomOps})
#foreach( $key in ${customOperationMap.keySet()} )

    public void ${customOperationMap.get($key).OperationName}( HandlerContext context, Management request, Management response ) {
        //TODO IMPLEMENT CUSTOM OPERATION
    }
#end
#end
}
