<?xml version="1.0" encoding="UTF-8"?>
<changelog>
	<entry>
		<date>2007-01-14</date>
		<time>17:53</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/test/src/framework/models/EnumerationUserHandler.java]]></name>
			<revision>1.12</revision>
			<prevrevision>1.11</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/test/src/framework/models/UserFilterFactory.java]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[se/test/src/framework/models/UserIteratorFactory.java]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[se/test/src/framework/models/UserStore.java]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[se/test/src/framework/models/users.store]]></name>
			<revision>1.2</revision>
		</file>
		<file>
			<name><![CDATA[se/test/src/framework/models/users.store.xml]]></name>
			<revision>1.1</revision>
		</file>
		<msg><![CDATA[

Changes with this submission:

51: Enhance EnumerationIterator IF to indicate iterator is already filtered.
52: Enumeration Pull may return zero objects when filtered.
53: Concurrent access to Enum context not protected

In addition the following items have been added:

1. EnumerationSupport, EnumerationHandler and EnumerationIterator have been
   completely reworked and simplified. An IteratorFactory interface has
   been added. Users wanting EnumerationSupport to handle their enumeration
   requests will need to port their iterator to the new EnumerationIterator
   interface, create an IteratorFactory and register their factory with
   EnumerationSupport.

   EnumerationSupport & EnumerationHandler are now able to support concurrent
   requests to a single resource URI.

   EnumerationSupport will now correctly detect "projections" in the filter
   and wrap the projected items within an XmlFragment. Projections are selections
   of a portion of a resource as opposed to the whole resource.

   EnumerationSupport will not filter or wrap in XmlFragment items returned from
   an iterator that returns true from EnumerationIterator.isFilter().

   The test User handler EnuerationUserHandler has been completely rewritten
   to now use the EnumerationSupport & is now split into UserEnumerationHandler,
   UserIteratorFactory & UserStore. They are used for testing and can be used
   as an example.

2. A filter unit test has been added. Several bugs were fixed in this area
   due to errors produced by this test. In particular, a namespace map was
   needed to be added to the client interfaces accepting a filter. This map
   contains the namespaces used in the filter expression. The namespaces are
   needed on the server side in order to properly evaluate the filter.
   Previously the namespaces for the document produced on the server side were
   passed to the XPath object. This was incorrect.

   Additionally NamespaceMap(Node node) was used on the server side to obtain
   the set of namespaces. This scanned the document from the specified node
   to the last child. This was incorrect. It needed to scan the document from
   the specified node to the root (opposite direction).

   Several support functions were added to process filtering on the server side.
   See below in item 3.

3. Several client and server interfaces have been enhanced to allow for easier
   handling of XmlFragment and filtering in general.
   EnumerationSupport has already been mentioned.

   EnumerationSupport has the added method:
   public static Filter createFilter(final Enumeration request)
   for easy creation of a Filter object from an Enumeration Request.
   EventingSupport & TransferExtensions have similar methods.

   BaseSupport has added two methods, createXmlFragment(List<Node>) &
   createXmlFragment(Nodelist) to ease creation of XmlFragment objects.
   TransferExtensions has done the same for use on the client side.

   The Filter interface was changed to return the filtered object as
   a Nodelist object rather than just a boolean. The Nodelist may contain
   projected elements if the filter contains a projection. The Nodelist
   can be diretly passed to BaseSupport.createXmlFragment(Nodelist)
   described above.

   Transfer.getResource(QName name) was added to easily get the resource object
   passed in Create, Update, & Delete requests.

   TransferExtensions.getResource(QName) overrides Transfer.getResource() and
   will check for XmlFragment objects if the QName object is not found.

   TransferExtensions.setFragmentGetResponse(
			final SOAPHeaderElement fragmentTransferHeader,
			final Object resource)

   has been added. This method will, using any registerd Filter handler,
   process the Fragment Transfer get against the provided resource object
   and set the result in the response. The resulting resource will
   automatically be wrapped into an XmlFragment for the caller and placed
   into the body of the repsonse. NOTE: results from applying the
   Fragment Transfer filter are always warpped in an XmlFragment by
   this method, whether the filter specified projections or not, as the caller
   specifically requested Fragment Transfer. This is not done for
   enumerations where the fragment transfer is mixed in with the wsman:filter.
   In the case of Enumerations if the filter selects the entire resource
   it is not wrapped in an XmlFragment.

   If setFragmentGetResponse() is called with fragmentTransferHeader set
   to null the method will simply put the resource object into the body of
   the response for the caller.

   NOTE: More work is needed on the client side to make, so I have listed/closed
         issue #24: Client fragment support should be simplified

4. To run the tests the "se/src/binding.properties" file MUST be edited first.
   Uncomment the line:

   com.sun.ws.management.xml.custom.packagenames = foo.test,com.hp.examples.ws.wsman.user

   This is needed for some tests to correctly execute.

5. I could NOT correctly build the JAXB Object Factory sources using the build.xml.
   All sources were built and compiled OK, but some tests failed. The reason is that
   attempts to add the "mustUnderstand" attribute to a header did not work. The
   call did not produce an error, but the header did not have the attribute. I
   duplicated this problem on two different system. Eventually I used the source
   that was previously built with JAXB and the tests then passed.

6. testMaxEnvelopeSizeTooBig() fails for test-jaxws. I do not know why. It is the
   only test that failed for me, though. I commented it out for my tests.]]></msg>
	</entry>
	<entry>
		<date>2006-10-09</date>
		<time>18:29</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[client/src/com/sun/ws/management/client/impl/TransferableResourceImpl.java]]></name>
			<revision>1.8</revision>
			<prevrevision>1.7</prevrevision>
		</file>
		<msg><![CDATA[Issue number: 40
Client was failing to provide resourceuri and selectors consistenly in all requests during enumeration process. EnumerationResourceImpl now uses utilities in base class to provide this data.]]></msg>
	</entry>
	<entry>
		<date>2007-01-26</date>
		<time>15:11</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[tools/lib/README]]></name>
			<revision>1.2</revision>
		</file>
		<file>
			<name><![CDATA[tools/src/com/sun/ws/management/tools/Xsd2WsdlTask.java]]></name>
			<revision>1.2</revision>
			<prevrevision>1.4.2.1</prevrevision>
		</file>
		<msg><![CDATA[Issue number:  61
Obtained from:
Submitted by:  denis_rachal
Reviewed by:

Templates for code generation have been updated to run with new Enumeration interfaces.

Samples programs updated to run with newer Enumeration interfaces.

Sample documentation updated.

Build project files updated for sample ant builds.

Eclipse project files added for sample builds.]]></msg>
	</entry>
	<entry>
		<date>2007-01-16</date>
		<time>12:33</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/build.xml]]></name>
			<revision>1.46</revision>
			<prevrevision>1.45</prevrevision>
		</file>
		<msg><![CDATA[Issue number:  59
Obtained from:
Submitted by:  jfdenise
Reviewed by:

Put comments back in around proxy arguments in JAXB source generation tasks.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>13:03</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[client/src/com/sun/ws/management/client/impl/EnumerationResourceImpl.java]]></name>
			<revision>1.17</revision>
			<prevrevision>1.16</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/test/src/interop/_06/InteropTest.java]]></name>
			<revision>1.20</revision>
			<prevrevision>1.19</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/test/src/management/EnumerationExtensionsTest.java]]></name>
			<revision>1.9</revision>
			<prevrevision>1.8</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/test/src/management/EnumerationTest.java]]></name>
			<revision>1.24</revision>
			<prevrevision>1.23</prevrevision>
		</file>
		<msg><![CDATA[Issue number:  50
Obtained from:
Submitted by:  jfdenise
Reviewed by:

Added changes to support wsman:Filter, as opposed to just wsen:Filter.]]></msg>
	</entry>
	<entry>
		<date>2007-01-29</date>
		<time>16:48</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[tools/src/com/sun/ws/management/tools/Wsdl2WsmanGenerator.java]]></name>
			<revision>1.5</revision>
			<prevrevision>1.4</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.5.2;
Issue number:  68
Obtained from:
Submitted by:  denis_rachal
Reviewed by:

Updated sample client to use a single handler and new generated source files.]]></msg>
	</entry>
	<entry>
		<date>2007-01-29</date>
		<time>16:48</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[tools/samples/trafficlight_server/src/net/java/dev/wiseman/traffic/light/test/TrafficLightTestCase.java]]></name>
			<revision>1.1</revision>
		</file>
		<msg><![CDATA[Issue number:  68
Obtained from:
Submitted by:  denis_rachal
Reviewed by:

Updated sample client to use a single handler and new generated source files.]]></msg>
	</entry>
	<entry>
		<date>2007-01-29</date>
		<time>16:48</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[tools/samples/trafficlight_server/build.xml]]></name>
			<revision>1.4</revision>
			<prevrevision>1.3</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.4.2;
Issue number:  68
Obtained from:
Submitted by:  denis_rachal
Reviewed by:

Updated sample client to use a single handler and new generated source files.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:53</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/etc/jaxws/sun-jaxws.xml]]></name>
			<revision>1.1.2.1</revision>
		</file>
		<file>
			<name><![CDATA[se/etc/jaxws/web.xml]]></name>
			<revision>1.1.2.1</revision>
		</file>
		<msg><![CDATA[JAX-WS J2EE deployment descriptors]]></msg>
	</entry>
	<entry>
		<date>2006-11-02</date>
		<time>20:43</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[se/src/net/java/dev/wiseman/server/handler/config/_1/ObjectFactory.class]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[se/src/net/java/dev/wiseman/server/handler/config/_1/ResourceHandlersType$ResourceHandler.class]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[se/src/net/java/dev/wiseman/server/handler/config/_1/ResourceHandlersType.class]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[se/src/net/java/dev/wiseman/server/handler/config/_1/ResourceHandlersType.java]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[se/src/net/java/dev/wiseman/server/handler/config/_1/package-info.class]]></name>
			<revision>1.1</revision>
		</file>
		<msg><![CDATA[Added JAXB classes for a new handler config file.]]></msg>
	</entry>
	<entry>
		<date>2007-01-14</date>
		<time>17:55</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[client/src/com/sun/ws/management/client/exceptions/FaultException.java]]></name>
			<revision>1.2</revision>
		</file>
		<file>
			<name><![CDATA[client/test/com/sun/ws/management/client/impl/EnumerationResourceImplTest.java]]></name>
			<revision>1.3</revision>
			<prevrevision>1.2</prevrevision>
		</file>
		<file>
			<name><![CDATA[client/test/com/sun/ws/management/client/impl/Interop20060801Test.java]]></name>
			<revision>1.7</revision>
			<prevrevision>1.6</prevrevision>
		</file>
		<file>
			<name><![CDATA[client/test/com/sun/ws/management/client/impl/ResourceImplTest.java]]></name>
			<revision>1.18</revision>
			<prevrevision>1.17</prevrevision>
		</file>
		<msg><![CDATA[

Changes with this submission:

51: Enhance EnumerationIterator IF to indicate iterator is already filtered.
52: Enumeration Pull may return zero objects when filtered.
53: Concurrent access to Enum context not protected

In addition the following items have been added:

1. EnumerationSupport, EnumerationHandler and EnumerationIterator have been
   completely reworked and simplified. An IteratorFactory interface has
   been added. Users wanting EnumerationSupport to handle their enumeration
   requests will need to port their iterator to the new EnumerationIterator
   interface, create an IteratorFactory and register their factory with
   EnumerationSupport.

   EnumerationSupport & EnumerationHandler are now able to support concurrent
   requests to a single resource URI.

   EnumerationSupport will now correctly detect "projections" in the filter
   and wrap the projected items within an XmlFragment. Projections are selections
   of a portion of a resource as opposed to the whole resource.

   EnumerationSupport will not filter or wrap in XmlFragment items returned from
   an iterator that returns true from EnumerationIterator.isFilter().

   The test User handler EnuerationUserHandler has been completely rewritten
   to now use the EnumerationSupport & is now split into UserEnumerationHandler,
   UserIteratorFactory & UserStore. They are used for testing and can be used
   as an example.

2. A filter unit test has been added. Several bugs were fixed in this area
   due to errors produced by this test. In particular, a namespace map was
   needed to be added to the client interfaces accepting a filter. This map
   contains the namespaces used in the filter expression. The namespaces are
   needed on the server side in order to properly evaluate the filter.
   Previously the namespaces for the document produced on the server side were
   passed to the XPath object. This was incorrect.

   Additionally NamespaceMap(Node node) was used on the server side to obtain
   the set of namespaces. This scanned the document from the specified node
   to the last child. This was incorrect. It needed to scan the document from
   the specified node to the root (opposite direction).

   Several support functions were added to process filtering on the server side.
   See below in item 3.

3. Several client and server interfaces have been enhanced to allow for easier
   handling of XmlFragment and filtering in general.
   EnumerationSupport has already been mentioned.

   EnumerationSupport has the added method:
   public static Filter createFilter(final Enumeration request)
   for easy creation of a Filter object from an Enumeration Request.
   EventingSupport & TransferExtensions have similar methods.

   BaseSupport has added two methods, createXmlFragment(List<Node>) &
   createXmlFragment(Nodelist) to ease creation of XmlFragment objects.
   TransferExtensions has done the same for use on the client side.

   The Filter interface was changed to return the filtered object as
   a Nodelist object rather than just a boolean. The Nodelist may contain
   projected elements if the filter contains a projection. The Nodelist
   can be diretly passed to BaseSupport.createXmlFragment(Nodelist)
   described above.

   Transfer.getResource(QName name) was added to easily get the resource object
   passed in Create, Update, & Delete requests.

   TransferExtensions.getResource(QName) overrides Transfer.getResource() and
   will check for XmlFragment objects if the QName object is not found.

   TransferExtensions.setFragmentGetResponse(
			final SOAPHeaderElement fragmentTransferHeader,
			final Object resource)

   has been added. This method will, using any registerd Filter handler,
   process the Fragment Transfer get against the provided resource object
   and set the result in the response. The resulting resource will
   automatically be wrapped into an XmlFragment for the caller and placed
   into the body of the repsonse. NOTE: results from applying the
   Fragment Transfer filter are always warpped in an XmlFragment by
   this method, whether the filter specified projections or not, as the caller
   specifically requested Fragment Transfer. This is not done for
   enumerations where the fragment transfer is mixed in with the wsman:filter.
   In the case of Enumerations if the filter selects the entire resource
   it is not wrapped in an XmlFragment.

   If setFragmentGetResponse() is called with fragmentTransferHeader set
   to null the method will simply put the resource object into the body of
   the response for the caller.

   NOTE: More work is needed on the client side to make, so I have listed/closed
         issue #24: Client fragment support should be simplified

4. To run the tests the "se/src/binding.properties" file MUST be edited first.
   Uncomment the line:

   com.sun.ws.management.xml.custom.packagenames = foo.test,com.hp.examples.ws.wsman.user

   This is needed for some tests to correctly execute.

5. I could NOT correctly build the JAXB Object Factory sources using the build.xml.
   All sources were built and compiled OK, but some tests failed. The reason is that
   attempts to add the "mustUnderstand" attribute to a header did not work. The
   call did not produce an error, but the header did not have the attribute. I
   duplicated this problem on two different system. Eventually I used the source
   that was previously built with JAXB and the tests then passed.

6. testMaxEnvelopeSizeTooBig() fails for test-jaxws. I do not know why. It is the
   only test that failed for me, though. I commented it out for my tests.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:53</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/etc/jaxws/sun-jaxws.xml]]></name>
			<revision>1.1</revision>
			<prevrevision>1.1.2.1</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.1.2;
file sun-jaxws.xml was initially added on branch jaxws_branch.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>14:56</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/BaseSupport.java]]></name>
			<revision>1.9.2.2</revision>
			<prevrevision>1.9.2.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/EnumerationItem.java]]></name>
			<revision>1.2.2.1</revision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/EnumerationSupport.java]]></name>
			<revision>1.37.2.2</revision>
			<prevrevision>1.37.2.1</prevrevision>
		</file>
		<msg><![CDATA[Merge with rachal fixes]]></msg>
	</entry>
	<entry>
		<date>2006-09-20</date>
		<time>14:50</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[client/src/com/sun/ws/management/client/IdentifyTask.java]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[client/src/com/sun/ws/management/client/ResourceFactory.java]]></name>
			<revision>1.5</revision>
		</file>
		<msg><![CDATA[HP user reported that ResourceFactory.getIdentity() was taking forever to timeout. This was because the client waited for the server to close the identify request socket. We now support a client side timeout for identify requests.]]></msg>
	</entry>
	<entry>
		<date>2007-01-15</date>
		<time>15:49</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/WSManAgent.java]]></name>
			<revision>1.3</revision>
			<prevrevision>1.2</prevrevision>
		</file>
		<msg><![CDATA[Fix for bug 57 :Max envelop size handling is still coupled to Servlet]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:25</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/handler/wsman/test/pull_source_Handler.java]]></name>
			<revision>1.12.2.1</revision>
			<prevrevision>1.14.2.2</prevrevision>
		</file>
		<msg><![CDATA[HandlerContext changes side effect]]></msg>
	</entry>
	<entry>
		<date>2006-12-19</date>
		<time>15:25</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[client/test/com/sun/ws/management/client/impl/ResourceImplTest.java]]></name>
			<revision>1.16</revision>
			<prevrevision>1.15</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/EnumerationItem.java]]></name>
			<revision>1.3</revision>
			<prevrevision>1.2.2.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/EnumerationSupport.java]]></name>
			<revision>1.39</revision>
			<prevrevision>1.38</prevrevision>
		</file>
		<msg><![CDATA[Issue number:  47
Obtained from:
Submitted by:  jfdenise
Reviewed by:

unbindItem() now supports custom packages.]]></msg>
	</entry>
	<entry>
		<date>2007-01-15</date>
		<time>11:11</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/test/etc/xsd/user.xsd]]></name>
			<revision>1.1</revision>
		</file>
		<msg><![CDATA[Moved to correct directory for build.]]></msg>
	</entry>
	<entry>
		<date>2007-01-11</date>
		<time>13:12</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/build.xml]]></name>
			<revision>1.43</revision>
			<prevrevision>1.42</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/project.properties]]></name>
			<revision>1.10</revision>
			<prevrevision>1.9.2.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/Management.java]]></name>
			<revision>1.9</revision>
			<prevrevision>1.8.2.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/Message.java]]></name>
			<revision>1.11</revision>
			<prevrevision>1.10.2.1</prevrevision>
		</file>
		<msg><![CDATA[Wiseman on top of JAX-WS 2.0. Merge with jaxws_branch.
Main changes:
- Removal of JAXB binaries from CVS.
  You will have to copy jaxws jars (you can download them from https://jax-ws.dev.java.net/jax-ws-20-fcs/) in lib/jaxws directory.
 (Planing to see how we can integrate the Maven java.net repository to express dependency we have on JAX-WS project.)
- Source code impact. Quite a lot but mainly rework of WsManServlet, introduced new WSManAgent and WSManJAXWSEndpoint.
  Rework of initialization, removal of various initialization() methods.
  New Message construction based on a SOAPMessage.
- Schemas location.They are now located in com.sun.ws.management.resources.schemas.
  They can be found as Resource from current ClassLoader. It is no more linked to Servlet.
  Custom schemas can still be provided thanks to ServletContext (as before)
  The schemas have been renamed, the ordering based on name has been replaced by a list in wiseman.properties file.
- JAXB Generation. Removal of the files from the repository.
  Generated file should be generated with the release of JAX-WS you selected.
  If we let the generated code in the CVS repository, we could ran into future compatibility problems.
  You have to call "generate-jaxb" manually.
- Build impact. New targets to build and deploy jax-ws compliant war (named wisman-jaxws.war)
- Tests. Removal of the automatic copy of JAXB/SAAJ jar in the tomcat /shared/lib.
  This is something that is nice but can easily break existing configuration.
  All existing tests and interop scenarii can be run with a Servlet based agent or with a JAX-WS one.
  Choose your target : "test" or "test-jaxws". The single difference between these 2 targets is deployment of the right war.
  J2SE deployment. WiseMan JAX-WS Endpoint can be deployed in JAX-WS http server (no more need of Servlet container),
  the build targets are currently commented due to Servlet dependency in Tests (If someone wants to rework a little bit handlers,
  we could have all tests passing indifferently on top of J2SE or J2EE!!!!). To play with such deployment, uncomment following
  ant build targets "deploy-j2se-jaxws" to start the agent side and "test-j2se-jaxws" to start the client side).
- misc: Commented the test.foo package from binding.properties.
- Trace. Removal of logging configuration file loading. Addition of a logging.properties file that is
  packaged in WEB-INF/classes in order to generate in <catalina-home>/logs a file that contains all wiseman traces.
  This is very useful when you are debugging tests. The generated file name is wiseman-<date of the day>.out]]></msg>
	</entry>
	<entry>
		<date>2007-01-30</date>
		<time>06:16</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[tools/src/templates/EnumerationIterator.vm]]></name>
			<revision>1.4</revision>
		</file>
		<msg><![CDATA[Issue number:  67
Obtained from:
Submitted by:  denis_rachal
Reviewed by:

Removed incorrect ee= null; line and unused template.]]></msg>
	</entry>
	<entry>
		<date>2006-10-20</date>
		<time>14:33</time>
		<author><![CDATA[nbeers]]></author>
		<file>
			<name><![CDATA[client/src/com/sun/ws/management/client/impl/EnumerationResourceImpl.java]]></name>
			<revision>1.13</revision>
			<prevrevision>1.12</prevrevision>
		</file>
		<file>
			<name><![CDATA[client/test/com/sun/ws/management/client/impl/ResourceImplTest.java]]></name>
			<revision>1.13</revision>
			<prevrevision>1.12</prevrevision>
		</file>
		<msg><![CDATA[Fix for issue 33 (Cannot set an enumerate parameter using client api).  Allow the client to pass in a variable length list of parameters.]]></msg>
	</entry>
	<entry>
		<date>2007-01-11</date>
		<time>13:12</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/nbproject/project.xml]]></name>
			<revision>1.7</revision>
			<prevrevision>1.6.2.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/BaseSupport.java]]></name>
			<revision>1.11</revision>
			<prevrevision>1.10</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/HandlerContext.java]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1.2.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/HandlerContextImpl.java]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1.2.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/ReflectiveRequestDispatcher.java]]></name>
			<revision>1.18</revision>
			<prevrevision>1.17</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/RequestDispatcherConfig.java]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/WSManServlet.java]]></name>
			<revision>1.28</revision>
			<prevrevision>1.27</prevrevision>
		</file>
		<msg><![CDATA[Wiseman on top of JAX-WS 2.0. Merge with jaxws_branch.
Main changes:
- Removal of JAXB binaries from CVS.
  You will have to copy jaxws jars (you can download them from https://jax-ws.dev.java.net/jax-ws-20-fcs/) in lib/jaxws directory.
 (Planing to see how we can integrate the Maven java.net repository to express dependency we have on JAX-WS project.)
- Source code impact. Quite a lot but mainly rework of WsManServlet, introduced new WSManAgent and WSManJAXWSEndpoint.
  Rework of initialization, removal of various initialization() methods.
  New Message construction based on a SOAPMessage.
- Schemas location.They are now located in com.sun.ws.management.resources.schemas.
  They can be found as Resource from current ClassLoader. It is no more linked to Servlet.
  Custom schemas can still be provided thanks to ServletContext (as before)
  The schemas have been renamed, the ordering based on name has been replaced by a list in wiseman.properties file.
- JAXB Generation. Removal of the files from the repository.
  Generated file should be generated with the release of JAX-WS you selected.
  If we let the generated code in the CVS repository, we could ran into future compatibility problems.
  You have to call "generate-jaxb" manually.
- Build impact. New targets to build and deploy jax-ws compliant war (named wisman-jaxws.war)
- Tests. Removal of the automatic copy of JAXB/SAAJ jar in the tomcat /shared/lib.
  This is something that is nice but can easily break existing configuration.
  All existing tests and interop scenarii can be run with a Servlet based agent or with a JAX-WS one.
  Choose your target : "test" or "test-jaxws". The single difference between these 2 targets is deployment of the right war.
  J2SE deployment. WiseMan JAX-WS Endpoint can be deployed in JAX-WS http server (no more need of Servlet container),
  the build targets are currently commented due to Servlet dependency in Tests (If someone wants to rework a little bit handlers,
  we could have all tests passing indifferently on top of J2SE or J2EE!!!!). To play with such deployment, uncomment following
  ant build targets "deploy-j2se-jaxws" to start the agent side and "test-j2se-jaxws" to start the client side).
- misc: Commented the test.foo package from binding.properties.
- Trace. Removal of logging configuration file loading. Addition of a logging.properties file that is
  packaged in WEB-INF/classes in order to generate in <catalina-home>/logs a file that contains all wiseman traces.
  This is very useful when you are debugging tests. The generated file name is wiseman-<date of the day>.out]]></msg>
	</entry>
	<entry>
		<date>2006-10-10</date>
		<time>19:50</time>
		<author><![CDATA[nbeers]]></author>
		<file>
			<name><![CDATA[se/test/src/util/WsManBaseTestSupport.java]]></name>
			<revision>1.3</revision>
			<prevrevision>1.3.2.1</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.3.2;
Fix for issue 36 (Concurrent JAXB access fails in SOAP class).  Make the XMLBinding member variable of the SOAP class non-static and fix all references to it throughout the code.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:27</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/test/src/demo/CmdLineDemo.java]]></name>
			<revision>1.13.2.1</revision>
		</file>
		<msg><![CDATA[Removal of Message.initialization]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:21</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/Management.java]]></name>
			<revision>1.8.2.1</revision>
		</file>
		<msg><![CDATA[SOAPMessage constructor]]></msg>
	</entry>
	<entry>
		<date>2007-01-29</date>
		<time>19:04</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[tools/samples/README_SAMPLES.txt]]></name>
			<revision>1.3</revision>
			<prevrevision>1.2</prevrevision>
		</file>
		<msg><![CDATA[Issue number:  69
Obtained from:
Submitted by:
Reviewed by:

Update README.]]></msg>
	</entry>
	<entry>
		<date>2007-01-29</date>
		<time>18:39</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[tools/samples/trafficlight_server/src/net/java/dev/wiseman/traffic/light/impl/LightHandlerImpl.java]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1</prevrevision>
		</file>
		<msg><![CDATA[Issue number:  68
Obtained from:
Submitted by:  denis_rachal
Reviewed by:

Incorrect namespace. Corrected.]]></msg>
	</entry>
	<entry>
		<date>2006-10-20</date>
		<time>14:34</time>
		<author><![CDATA[nbeers]]></author>
		<file>
			<name><![CDATA[se/test/src/management/EnumerationTest.java]]></name>
			<revision>1.21</revision>
			<prevrevision>1.20</prevrevision>
		</file>
		<msg><![CDATA[A couple of more speed enhancements based on usage of the JAXB binding.]]></msg>
	</entry>
	<entry>
		<date>2007-01-16</date>
		<time>11:00</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/test/src/interop/_06/InteropTest.java]]></name>
			<revision>1.22</revision>
			<prevrevision>1.21</prevrevision>
		</file>
		<msg><![CDATA[Issue number:  58

XPath expression in the test was invalid. It should be:

"/CIM_NumericSensor[SensorType=2]"]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>13:03</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/CannotProcessFilterFault.java]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/BaseSupport.java]]></name>
			<revision>1.10</revision>
			<prevrevision>1.9</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/EnumerationSupport.java]]></name>
			<revision>1.40</revision>
			<prevrevision>1.39</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/test/src/framework/models/EnumerationUserHandler.java]]></name>
			<revision>1.11</revision>
			<prevrevision>1.10</prevrevision>
		</file>
		<msg><![CDATA[Issue number:  50
Obtained from:
Submitted by:  jfdenise
Reviewed by:

Added changes to support wsman:Filter, as opposed to just wsen:Filter.]]></msg>
	</entry>
	<entry>
		<date>2006-10-09</date>
		<time>18:32</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[se/test/src/framework/models/EnumerationUserHandler.java]]></name>
			<revision>1.4</revision>
		</file>
		<msg><![CDATA[Client now autoinitalizes wiseman stack when a resource if created in the factory via a static block.
User enumeration did not support enumeration without filters. This case has now been implemented but in general this class still does not signal the end of an enueration correctly.----------------------------
revision 1.8.2.1
date: 2006/12/21 14:56:00;  author: jfdenise;  state: Exp;  lines: +179 -46
Merge with rachal fixes]]></msg>
	</entry>
	<entry>
		<date>2007-01-26</date>
		<time>15:11</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/test/gen-src/foo/test/A.java]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[se/test/gen-src/foo/test/Is.java]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[tools/samples/trafficlight_client/.cvsignore]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[tools/samples/trafficlight_client/build.xml]]></name>
			<revision>1.1</revision>
			<prevrevision>1.2.2.1</prevrevision>
		</file>
		<msg><![CDATA[Issue number:  61
Obtained from:
Submitted by:  denis_rachal
Reviewed by:

Templates for code generation have been updated to run with new Enumeration interfaces.

Samples programs updated to run with newer Enumeration interfaces.

Sample documentation updated.

Build project files updated for sample ant builds.

Eclipse project files added for sample builds.]]></msg>
	</entry>
	<entry>
		<date>2006-10-10</date>
		<time>19:50</time>
		<author><![CDATA[nbeers]]></author>
		<file>
			<name><![CDATA[se/test/src/management/TestBase.java]]></name>
			<revision>1.9</revision>
			<prevrevision>1.9.2.1</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.9.2;
Fix for issue 36 (Concurrent JAXB access fails in SOAP class).  Make the XMLBinding member variable of the SOAP class non-static and fix all references to it throughout the code.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>10:04</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/gen-src/README]]></name>
			<revision>1.1</revision>
			<prevrevision>1.1.2.1</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.1.2;
file README was initially added on branch jaxws_branch.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>15:03</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/build.xml]]></name>
			<revision>1.42.2.5</revision>
			<prevrevision>1.42.2.4</prevrevision>
		</file>
		<msg><![CDATA[Removed useless comments]]></msg>
	</entry>
	<entry>
		<date>2007-01-14</date>
		<time>21:56</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/test/src/framework/models/EnumerationUserHandler.java]]></name>
			<revision>1.13</revision>
			<prevrevision>1.12</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/test/src/framework/models/UserStore.java]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/test/src/framework/models/users.store]]></name>
			<revision>1.3</revision>
			<prevrevision>1.2</prevrevision>
		</file>
		<msg><![CDATA[Remove deprecated source.]]></msg>
	</entry>
	<entry>
		<date>2007-01-11</date>
		<time>13:19</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/etc/logging.properties]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/etc/jaxws/web.xml]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/lib/jaxws/README]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1</prevrevision>
		</file>
		<msg><![CDATA[Wiseman on top of JAX-WS 2.0. Merge with jaxws_branch
Main changes:
- Removal of JAXB binaries from CVS.
  You will have to copy jaxws jars (you can download them from https://jax-ws.dev.java.net/jax-ws-20-fcs/) in lib/jaxws directory.
 (Planing to see how we can integrate the Maven java.net repository to express dependency we have on JAX-WS project.)
- Source code impact. Quite a lot but mainly rework of WsManServlet, introduced new WSManAgent and WSManJAXWSEndpoint.
  Rework of initialization, removal of various initialization() methods.
  New Message construction based on a SOAPMessage.
- Schemas location.They are now located in com.sun.ws.management.resources.schemas.
  They can be found as Resource from current ClassLoader. It is no more linked to Servlet.
  Custom schemas can still be provided thanks to ServletContext (as before)
  The schemas have been renamed, the ordering based on name has been replaced by a list in wiseman.properties file.
- JAXB Generation. Removal of the files from the repository.
  Generated file should be generated with the release of JAX-WS you selected.
  If we let the generated code in the CVS repository, we could ran into future compatibility problems.
  You have to call "generate-jaxb" manually.
- Build impact. New targets to build and deploy jax-ws compliant war (named wisman-jaxws.war)
- Tests. Removal of the automatic copy of JAXB/SAAJ jar in the tomcat /shared/lib.
  This is something that is nice but can easily break existing configuration.
  All existing tests and interop scenarii can be run with a Servlet based agent or with a JAX-WS one.
  Choose your target : "test" or "test-jaxws". The single difference between these 2 targets is deployment of the right war.
  J2SE deployment. WiseMan JAX-WS Endpoint can be deployed in JAX-WS http server (no more need of Servlet container),
  the build targets are currently commented due to Servlet dependency in Tests (If someone wants to rework a little bit handlers,
  we could have all tests passing indifferently on top of J2SE or J2EE!!!!). To play with such deployment, uncomment following
  ant build targets "deploy-j2se-jaxws" to start the agent side and "test-j2se-jaxws" to start the client side).
- misc: Commented the test.foo package from binding.properties.
- Trace. Removal of logging configuration file loading. Addition of a logging.properties file that is
  packaged in WEB-INF/classes in order to generate in <catalina-home>/logs a file that contains all wiseman traces.
  This is very useful when you are debugging tests. The generated file name is wiseman-<date of the day>.out]]></msg>
	</entry>
	<entry>
		<date>2007-01-14</date>
		<time>17:53</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/test/src/management/EventingTest.java]]></name>
			<revision>1.13</revision>
			<prevrevision>1.12</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.13.2;


Changes with this submission:

51: Enhance EnumerationIterator IF to indicate iterator is already filtered.
52: Enumeration Pull may return zero objects when filtered.
53: Concurrent access to Enum context not protected

In addition the following items have been added:

1. EnumerationSupport, EnumerationHandler and EnumerationIterator have been
   completely reworked and simplified. An IteratorFactory interface has
   been added. Users wanting EnumerationSupport to handle their enumeration
   requests will need to port their iterator to the new EnumerationIterator
   interface, create an IteratorFactory and register their factory with
   EnumerationSupport.

   EnumerationSupport & EnumerationHandler are now able to support concurrent
   requests to a single resource URI.

   EnumerationSupport will now correctly detect "projections" in the filter
   and wrap the projected items within an XmlFragment. Projections are selections
   of a portion of a resource as opposed to the whole resource.

   EnumerationSupport will not filter or wrap in XmlFragment items returned from
   an iterator that returns true from EnumerationIterator.isFilter().

   The test User handler EnuerationUserHandler has been completely rewritten
   to now use the EnumerationSupport & is now split into UserEnumerationHandler,
   UserIteratorFactory & UserStore. They are used for testing and can be used
   as an example.

2. A filter unit test has been added. Several bugs were fixed in this area
   due to errors produced by this test. In particular, a namespace map was
   needed to be added to the client interfaces accepting a filter. This map
   contains the namespaces used in the filter expression. The namespaces are
   needed on the server side in order to properly evaluate the filter.
   Previously the namespaces for the document produced on the server side were
   passed to the XPath object. This was incorrect.

   Additionally NamespaceMap(Node node) was used on the server side to obtain
   the set of namespaces. This scanned the document from the specified node
   to the last child. This was incorrect. It needed to scan the document from
   the specified node to the root (opposite direction).

   Several support functions were added to process filtering on the server side.
   See below in item 3.

3. Several client and server interfaces have been enhanced to allow for easier
   handling of XmlFragment and filtering in general.
   EnumerationSupport has already been mentioned.

   EnumerationSupport has the added method:
   public static Filter createFilter(final Enumeration request)
   for easy creation of a Filter object from an Enumeration Request.
   EventingSupport & TransferExtensions have similar methods.

   BaseSupport has added two methods, createXmlFragment(List<Node>) &
   createXmlFragment(Nodelist) to ease creation of XmlFragment objects.
   TransferExtensions has done the same for use on the client side.

   The Filter interface was changed to return the filtered object as
   a Nodelist object rather than just a boolean. The Nodelist may contain
   projected elements if the filter contains a projection. The Nodelist
   can be diretly passed to BaseSupport.createXmlFragment(Nodelist)
   described above.

   Transfer.getResource(QName name) was added to easily get the resource object
   passed in Create, Update, & Delete requests.

   TransferExtensions.getResource(QName) overrides Transfer.getResource() and
   will check for XmlFragment objects if the QName object is not found.

   TransferExtensions.setFragmentGetResponse(
			final SOAPHeaderElement fragmentTransferHeader,
			final Object resource)

   has been added. This method will, using any registerd Filter handler,
   process the Fragment Transfer get against the provided resource object
   and set the result in the response. The resulting resource will
   automatically be wrapped into an XmlFragment for the caller and placed
   into the body of the repsonse. NOTE: results from applying the
   Fragment Transfer filter are always warpped in an XmlFragment by
   this method, whether the filter specified projections or not, as the caller
   specifically requested Fragment Transfer. This is not done for
   enumerations where the fragment transfer is mixed in with the wsman:filter.
   In the case of Enumerations if the filter selects the entire resource
   it is not wrapped in an XmlFragment.

   If setFragmentGetResponse() is called with fragmentTransferHeader set
   to null the method will simply put the resource object into the body of
   the response for the caller.

   NOTE: More work is needed on the client side to make, so I have listed/closed
         issue #24: Client fragment support should be simplified

4. To run the tests the "se/src/binding.properties" file MUST be edited first.
   Uncomment the line:

   com.sun.ws.management.xml.custom.packagenames = foo.test,com.hp.examples.ws.wsman.user

   This is needed for some tests to correctly execute.

5. I could NOT correctly build the JAXB Object Factory sources using the build.xml.
   All sources were built and compiled OK, but some tests failed. The reason is that
   attempts to add the "mustUnderstand" attribute to a header did not work. The
   call did not produce an error, but the header did not have the attribute. I
   duplicated this problem on two different system. Eventually I used the source
   that was previously built with JAXB and the tests then passed.

6. testMaxEnvelopeSizeTooBig() fails for test-jaxws. I do not know why. It is the
   only test that failed for me, though. I commented it out for my tests.]]></msg>
	</entry>
	<entry>
		<date>2007-01-29</date>
		<time>06:05</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/handler/wsman/test/fragment_Handler.java]]></name>
			<revision>1.14</revision>
			<prevrevision>1.13</prevrevision>
		</file>
		<file>
			<name><![CDATA[tools/samples/trafficlight_server/etc/binding.properties]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1</prevrevision>
		</file>
		<msg><![CDATA[Issue number:  68
Obtained from:
Submitted by:
Reviewed by:

Code generation updated to create a single handle per XSD.]]></msg>
	</entry>
	<entry>
		<date>2007-01-29</date>
		<time>06:05</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/transfer/TransferExtensions.java]]></name>
			<revision>1.9</revision>
			<prevrevision>1.8</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.9.2;
Issue number:  68
Obtained from:
Submitted by:
Reviewed by:

Code generation updated to create a single handle per XSD.]]></msg>
	</entry>
	<entry>
		<date>2007-01-14</date>
		<time>17:55</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[client/samples/trafficlight_client/src/com/sun/ws/management/traffic/client/TrafficClientApp.java]]></name>
			<revision>1.8</revision>
		</file>
		<file>
			<name><![CDATA[se/etc/xsd/user.xsd]]></name>
			<revision>1.2</revision>
		</file>
		<msg><![CDATA[

Changes with this submission:

51: Enhance EnumerationIterator IF to indicate iterator is already filtered.
52: Enumeration Pull may return zero objects when filtered.
53: Concurrent access to Enum context not protected

In addition the following items have been added:

1. EnumerationSupport, EnumerationHandler and EnumerationIterator have been
   completely reworked and simplified. An IteratorFactory interface has
   been added. Users wanting EnumerationSupport to handle their enumeration
   requests will need to port their iterator to the new EnumerationIterator
   interface, create an IteratorFactory and register their factory with
   EnumerationSupport.

   EnumerationSupport & EnumerationHandler are now able to support concurrent
   requests to a single resource URI.

   EnumerationSupport will now correctly detect "projections" in the filter
   and wrap the projected items within an XmlFragment. Projections are selections
   of a portion of a resource as opposed to the whole resource.

   EnumerationSupport will not filter or wrap in XmlFragment items returned from
   an iterator that returns true from EnumerationIterator.isFilter().

   The test User handler EnuerationUserHandler has been completely rewritten
   to now use the EnumerationSupport & is now split into UserEnumerationHandler,
   UserIteratorFactory & UserStore. They are used for testing and can be used
   as an example.

2. A filter unit test has been added. Several bugs were fixed in this area
   due to errors produced by this test. In particular, a namespace map was
   needed to be added to the client interfaces accepting a filter. This map
   contains the namespaces used in the filter expression. The namespaces are
   needed on the server side in order to properly evaluate the filter.
   Previously the namespaces for the document produced on the server side were
   passed to the XPath object. This was incorrect.

   Additionally NamespaceMap(Node node) was used on the server side to obtain
   the set of namespaces. This scanned the document from the specified node
   to the last child. This was incorrect. It needed to scan the document from
   the specified node to the root (opposite direction).

   Several support functions were added to process filtering on the server side.
   See below in item 3.

3. Several client and server interfaces have been enhanced to allow for easier
   handling of XmlFragment and filtering in general.
   EnumerationSupport has already been mentioned.

   EnumerationSupport has the added method:
   public static Filter createFilter(final Enumeration request)
   for easy creation of a Filter object from an Enumeration Request.
   EventingSupport & TransferExtensions have similar methods.

   BaseSupport has added two methods, createXmlFragment(List<Node>) &
   createXmlFragment(Nodelist) to ease creation of XmlFragment objects.
   TransferExtensions has done the same for use on the client side.

   The Filter interface was changed to return the filtered object as
   a Nodelist object rather than just a boolean. The Nodelist may contain
   projected elements if the filter contains a projection. The Nodelist
   can be diretly passed to BaseSupport.createXmlFragment(Nodelist)
   described above.

   Transfer.getResource(QName name) was added to easily get the resource object
   passed in Create, Update, & Delete requests.

   TransferExtensions.getResource(QName) overrides Transfer.getResource() and
   will check for XmlFragment objects if the QName object is not found.

   TransferExtensions.setFragmentGetResponse(
			final SOAPHeaderElement fragmentTransferHeader,
			final Object resource)

   has been added. This method will, using any registerd Filter handler,
   process the Fragment Transfer get against the provided resource object
   and set the result in the response. The resulting resource will
   automatically be wrapped into an XmlFragment for the caller and placed
   into the body of the repsonse. NOTE: results from applying the
   Fragment Transfer filter are always warpped in an XmlFragment by
   this method, whether the filter specified projections or not, as the caller
   specifically requested Fragment Transfer. This is not done for
   enumerations where the fragment transfer is mixed in with the wsman:filter.
   In the case of Enumerations if the filter selects the entire resource
   it is not wrapped in an XmlFragment.

   If setFragmentGetResponse() is called with fragmentTransferHeader set
   to null the method will simply put the resource object into the body of
   the response for the caller.

   NOTE: More work is needed on the client side to make, so I have listed/closed
         issue #24: Client fragment support should be simplified

4. To run the tests the "se/src/binding.properties" file MUST be edited first.
   Uncomment the line:

   com.sun.ws.management.xml.custom.packagenames = foo.test,com.hp.examples.ws.wsman.user

   This is needed for some tests to correctly execute.

5. I could NOT correctly build the JAXB Object Factory sources using the build.xml.
   All sources were built and compiled OK, but some tests failed. The reason is that
   attempts to add the "mustUnderstand" attribute to a header did not work. The
   call did not produce an error, but the header did not have the attribute. I
   duplicated this problem on two different system. Eventually I used the source
   that was previously built with JAXB and the tests then passed.

6. testMaxEnvelopeSizeTooBig() fails for test-jaxws. I do not know why. It is the
   only test that failed for me, though. I commented it out for my tests.]]></msg>
	</entry>
	<entry>
		<date>2006-12-05</date>
		<time>10:35</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/handler/org/dmtf/schemas/wbem/wscim/_1/cim_schema/_2/cim_computersystem_Handler.java]]></name>
			<revision>1.2</revision>
			<prevrevision>1.2.2.1</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.2.2;
Fix for Supporting multiple Filter dialects : https://wiseman.dev.java.net/issues/show_bug.cgi?id=43]]></msg>
	</entry>
	<entry>
		<date>2007-01-17</date>
		<time>08:47</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/WSManAgent.java]]></name>
			<revision>1.4</revision>
			<prevrevision>1.3</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.4.2;
Fix for bug 56: JAX-WS deployment doesn't support non anonymous replies]]></msg>
	</entry>
	<entry>
		<date>2007-01-14</date>
		<time>17:53</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/test/src/management/EnumerationFilterTest.java]]></name>
			<revision>1.1</revision>
			<prevrevision>1.3.2.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/test/src/management/TransferExtensionsTest.java]]></name>
			<revision>1.9</revision>
		</file>
		<msg><![CDATA[

Changes with this submission:

51: Enhance EnumerationIterator IF to indicate iterator is already filtered.
52: Enumeration Pull may return zero objects when filtered.
53: Concurrent access to Enum context not protected

In addition the following items have been added:

1. EnumerationSupport, EnumerationHandler and EnumerationIterator have been
   completely reworked and simplified. An IteratorFactory interface has
   been added. Users wanting EnumerationSupport to handle their enumeration
   requests will need to port their iterator to the new EnumerationIterator
   interface, create an IteratorFactory and register their factory with
   EnumerationSupport.

   EnumerationSupport & EnumerationHandler are now able to support concurrent
   requests to a single resource URI.

   EnumerationSupport will now correctly detect "projections" in the filter
   and wrap the projected items within an XmlFragment. Projections are selections
   of a portion of a resource as opposed to the whole resource.

   EnumerationSupport will not filter or wrap in XmlFragment items returned from
   an iterator that returns true from EnumerationIterator.isFilter().

   The test User handler EnuerationUserHandler has been completely rewritten
   to now use the EnumerationSupport & is now split into UserEnumerationHandler,
   UserIteratorFactory & UserStore. They are used for testing and can be used
   as an example.

2. A filter unit test has been added. Several bugs were fixed in this area
   due to errors produced by this test. In particular, a namespace map was
   needed to be added to the client interfaces accepting a filter. This map
   contains the namespaces used in the filter expression. The namespaces are
   needed on the server side in order to properly evaluate the filter.
   Previously the namespaces for the document produced on the server side were
   passed to the XPath object. This was incorrect.

   Additionally NamespaceMap(Node node) was used on the server side to obtain
   the set of namespaces. This scanned the document from the specified node
   to the last child. This was incorrect. It needed to scan the document from
   the specified node to the root (opposite direction).

   Several support functions were added to process filtering on the server side.
   See below in item 3.

3. Several client and server interfaces have been enhanced to allow for easier
   handling of XmlFragment and filtering in general.
   EnumerationSupport has already been mentioned.

   EnumerationSupport has the added method:
   public static Filter createFilter(final Enumeration request)
   for easy creation of a Filter object from an Enumeration Request.
   EventingSupport & TransferExtensions have similar methods.

   BaseSupport has added two methods, createXmlFragment(List<Node>) &
   createXmlFragment(Nodelist) to ease creation of XmlFragment objects.
   TransferExtensions has done the same for use on the client side.

   The Filter interface was changed to return the filtered object as
   a Nodelist object rather than just a boolean. The Nodelist may contain
   projected elements if the filter contains a projection. The Nodelist
   can be diretly passed to BaseSupport.createXmlFragment(Nodelist)
   described above.

   Transfer.getResource(QName name) was added to easily get the resource object
   passed in Create, Update, & Delete requests.

   TransferExtensions.getResource(QName) overrides Transfer.getResource() and
   will check for XmlFragment objects if the QName object is not found.

   TransferExtensions.setFragmentGetResponse(
			final SOAPHeaderElement fragmentTransferHeader,
			final Object resource)

   has been added. This method will, using any registerd Filter handler,
   process the Fragment Transfer get against the provided resource object
   and set the result in the response. The resulting resource will
   automatically be wrapped into an XmlFragment for the caller and placed
   into the body of the repsonse. NOTE: results from applying the
   Fragment Transfer filter are always warpped in an XmlFragment by
   this method, whether the filter specified projections or not, as the caller
   specifically requested Fragment Transfer. This is not done for
   enumerations where the fragment transfer is mixed in with the wsman:filter.
   In the case of Enumerations if the filter selects the entire resource
   it is not wrapped in an XmlFragment.

   If setFragmentGetResponse() is called with fragmentTransferHeader set
   to null the method will simply put the resource object into the body of
   the response for the caller.

   NOTE: More work is needed on the client side to make, so I have listed/closed
         issue #24: Client fragment support should be simplified

4. To run the tests the "se/src/binding.properties" file MUST be edited first.
   Uncomment the line:

   com.sun.ws.management.xml.custom.packagenames = foo.test,com.hp.examples.ws.wsman.user

   This is needed for some tests to correctly execute.

5. I could NOT correctly build the JAXB Object Factory sources using the build.xml.
   All sources were built and compiled OK, but some tests failed. The reason is that
   attempts to add the "mustUnderstand" attribute to a header did not work. The
   call did not produce an error, but the header did not have the attribute. I
   duplicated this problem on two different system. Eventually I used the source
   that was previously built with JAXB and the tests then passed.

6. testMaxEnvelopeSizeTooBig() fails for test-jaxws. I do not know why. It is the
   only test that failed for me, though. I commented it out for my tests.]]></msg>
	</entry>
	<entry>
		<date>2006-12-05</date>
		<time>10:35</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/transfer/TransferExtensions.java]]></name>
			<revision>1.6</revision>
			<prevrevision>1.9.2.1</prevrevision>
		</file>
		<msg><![CDATA[Fix for Supporting multiple Filter dialects : https://wiseman.dev.java.net/issues/show_bug.cgi?id=43]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:39</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/test/src/management/TestBase.java]]></name>
			<revision>1.9.2.1</revision>
		</file>
		<msg><![CDATA[Removal of Message.initialization]]></msg>
	</entry>
	<entry>
		<date>2006-10-16</date>
		<time>20:26</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[client/src/com/sun/ws/management/client/IdentifyTask.java]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[client/src/com/sun/ws/management/client/ResourceFactory.java]]></name>
			<revision>1.10</revision>
			<prevrevision>1.9</prevrevision>
		</file>
		<file>
			<name><![CDATA[client/src/com/sun/ws/management/client/impl/ResourceImpl.java]]></name>
			<revision>1.7</revision>
			<prevrevision>1.6</prevrevision>
		</file>
		<msg><![CDATA[Added the ability to send arbitrary http headers in identify requests.]]></msg>
	</entry>
	<entry>
		<date>2007-01-11</date>
		<time>13:19</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/wsman.properties]]></name>
			<revision>1.6</revision>
			<prevrevision>1.5.2.2</prevrevision>
		</file>
		<msg><![CDATA[Wiseman on top of JAX-WS 2.0. Merge with jaxws_branch
Main changes:
- Removal of JAXB binaries from CVS.
  You will have to copy jaxws jars (you can download them from https://jax-ws.dev.java.net/jax-ws-20-fcs/) in lib/jaxws directory.
 (Planing to see how we can integrate the Maven java.net repository to express dependency we have on JAX-WS project.)
- Source code impact. Quite a lot but mainly rework of WsManServlet, introduced new WSManAgent and WSManJAXWSEndpoint.
  Rework of initialization, removal of various initialization() methods.
  New Message construction based on a SOAPMessage.
- Schemas location.They are now located in com.sun.ws.management.resources.schemas.
  They can be found as Resource from current ClassLoader. It is no more linked to Servlet.
  Custom schemas can still be provided thanks to ServletContext (as before)
  The schemas have been renamed, the ordering based on name has been replaced by a list in wiseman.properties file.
- JAXB Generation. Removal of the files from the repository.
  Generated file should be generated with the release of JAX-WS you selected.
  If we let the generated code in the CVS repository, we could ran into future compatibility problems.
  You have to call "generate-jaxb" manually.
- Build impact. New targets to build and deploy jax-ws compliant war (named wisman-jaxws.war)
- Tests. Removal of the automatic copy of JAXB/SAAJ jar in the tomcat /shared/lib.
  This is something that is nice but can easily break existing configuration.
  All existing tests and interop scenarii can be run with a Servlet based agent or with a JAX-WS one.
  Choose your target : "test" or "test-jaxws". The single difference between these 2 targets is deployment of the right war.
  J2SE deployment. WiseMan JAX-WS Endpoint can be deployed in JAX-WS http server (no more need of Servlet container),
  the build targets are currently commented due to Servlet dependency in Tests (If someone wants to rework a little bit handlers,
  we could have all tests passing indifferently on top of J2SE or J2EE!!!!). To play with such deployment, uncomment following
  ant build targets "deploy-j2se-jaxws" to start the agent side and "test-j2se-jaxws" to start the client side).
- misc: Commented the test.foo package from binding.properties.
- Trace. Removal of logging configuration file loading. Addition of a logging.properties file that is
  packaged in WEB-INF/classes in order to generate in <catalina-home>/logs a file that contains all wiseman traces.
  This is very useful when you are debugging tests. The generated file name is wiseman-<date of the day>.out]]></msg>
	</entry>
	<entry>
		<date>2007-01-14</date>
		<time>17:52</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/EnumerationContext.java]]></name>
			<revision>1.8</revision>
			<prevrevision>1.7</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.8.2;


Changes with this submission:

51: Enhance EnumerationIterator IF to indicate iterator is already filtered.
52: Enumeration Pull may return zero objects when filtered.
53: Concurrent access to Enum context not protected

In addition the following items have been added:

1. EnumerationSupport, EnumerationHandler and EnumerationIterator have been
   completely reworked and simplified. An IteratorFactory interface has
   been added. Users wanting EnumerationSupport to handle their enumeration
   requests will need to port their iterator to the new EnumerationIterator
   interface, create an IteratorFactory and register their factory with
   EnumerationSupport.

   EnumerationSupport & EnumerationHandler are now able to support concurrent
   requests to a single resource URI.

   EnumerationSupport will now correctly detect "projections" in the filter
   and wrap the projected items within an XmlFragment. Projections are selections
   of a portion of a resource as opposed to the whole resource.

   EnumerationSupport will not filter or wrap in XmlFragment items returned from
   an iterator that returns true from EnumerationIterator.isFilter().

   The test User handler EnuerationUserHandler has been completely rewritten
   to now use the EnumerationSupport & is now split into UserEnumerationHandler,
   UserIteratorFactory & UserStore. They are used for testing and can be used
   as an example.

2. A filter unit test has been added. Several bugs were fixed in this area
   due to errors produced by this test. In particular, a namespace map was
   needed to be added to the client interfaces accepting a filter. This map
   contains the namespaces used in the filter expression. The namespaces are
   needed on the server side in order to properly evaluate the filter.
   Previously the namespaces for the document produced on the server side were
   passed to the XPath object. This was incorrect.

   Additionally NamespaceMap(Node node) was used on the server side to obtain
   the set of namespaces. This scanned the document from the specified node
   to the last child. This was incorrect. It needed to scan the document from
   the specified node to the root (opposite direction).

   Several support functions were added to process filtering on the server side.
   See below in item 3.

3. Several client and server interfaces have been enhanced to allow for easier
   handling of XmlFragment and filtering in general.
   EnumerationSupport has already been mentioned.

   EnumerationSupport has the added method:
   public static Filter createFilter(final Enumeration request)
   for easy creation of a Filter object from an Enumeration Request.
   EventingSupport & TransferExtensions have similar methods.

   BaseSupport has added two methods, createXmlFragment(List<Node>) &
   createXmlFragment(Nodelist) to ease creation of XmlFragment objects.
   TransferExtensions has done the same for use on the client side.

   The Filter interface was changed to return the filtered object as
   a Nodelist object rather than just a boolean. The Nodelist may contain
   projected elements if the filter contains a projection. The Nodelist
   can be diretly passed to BaseSupport.createXmlFragment(Nodelist)
   described above.

   Transfer.getResource(QName name) was added to easily get the resource object
   passed in Create, Update, & Delete requests.

   TransferExtensions.getResource(QName) overrides Transfer.getResource() and
   will check for XmlFragment objects if the QName object is not found.

   TransferExtensions.setFragmentGetResponse(
			final SOAPHeaderElement fragmentTransferHeader,
			final Object resource)

   has been added. This method will, using any registerd Filter handler,
   process the Fragment Transfer get against the provided resource object
   and set the result in the response. The resulting resource will
   automatically be wrapped into an XmlFragment for the caller and placed
   into the body of the repsonse. NOTE: results from applying the
   Fragment Transfer filter are always warpped in an XmlFragment by
   this method, whether the filter specified projections or not, as the caller
   specifically requested Fragment Transfer. This is not done for
   enumerations where the fragment transfer is mixed in with the wsman:filter.
   In the case of Enumerations if the filter selects the entire resource
   it is not wrapped in an XmlFragment.

   If setFragmentGetResponse() is called with fragmentTransferHeader set
   to null the method will simply put the resource object into the body of
   the response for the caller.

   NOTE: More work is needed on the client side to make, so I have listed/closed
         issue #24: Client fragment support should be simplified

4. To run the tests the "se/src/binding.properties" file MUST be edited first.
   Uncomment the line:

   com.sun.ws.management.xml.custom.packagenames = foo.test,com.hp.examples.ws.wsman.user

   This is needed for some tests to correctly execute.

5. I could NOT correctly build the JAXB Object Factory sources using the build.xml.
   All sources were built and compiled OK, but some tests failed. The reason is that
   attempts to add the "mustUnderstand" attribute to a header did not work. The
   call did not produce an error, but the header did not have the attribute. I
   duplicated this problem on two different system. Eventually I used the source
   that was previously built with JAXB and the tests then passed.

6. testMaxEnvelopeSizeTooBig() fails for test-jaxws. I do not know why. It is the
   only test that failed for me, though. I commented it out for my tests.]]></msg>
	</entry>
	<entry>
		<date>2006-12-05</date>
		<time>10:35</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/handler/org/dmtf/schemas/wbem/wscim/_1/cim_schema/_2/cim_numericsensor_Handler.java]]></name>
			<revision>1.5</revision>
			<prevrevision>1.4</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.5.2;
Fix for Supporting multiple Filter dialects : https://wiseman.dev.java.net/issues/show_bug.cgi?id=43]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>13:30</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/CannotProcessFilterFault.java]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1</prevrevision>
		</file>
		<msg><![CDATA[File is not needed. Class is already in enumeration sub-package.]]></msg>
	</entry>
	<entry>
		<date>2006-10-09</date>
		<time>19:08</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[client/test/com/sun/ws/management/client/impl/EnumerationResourceImplTest.java]]></name>
			<revision>1.2</revision>
		</file>
		<msg><![CDATA[Issue number: 41 Custom Dialects in Client filter requests are ignored.
Dialect as hard coded to NSURI.EPath. This has been changed.----------------------------
revision 1.1
date: 2006/10/09 18:29:56;  author: obiwan314;  state: Exp;
Issue number: 40
Client was failing to provide resourceuri and selectors consistenly in all requests during enumeration process. EnumerationResourceImpl now uses utilities in base class to provide this data.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:21</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/addressing/Addressing.java]]></name>
			<revision>1.12.2.1</revision>
			<prevrevision>1.13.2.2</prevrevision>
		</file>
		<msg><![CDATA[SOAPMessage constructor]]></msg>
	</entry>
	<entry>
		<date>2007-01-02</date>
		<time>16:54</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/WSManJAXWSEndpoint.java]]></name>
			<revision>1.1.2.2</revision>
			<prevrevision>1.1.2.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/WSManReflectiveAgent.java]]></name>
			<revision>1.1.2.2</revision>
			<prevrevision>1.1.2.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/WSManServlet.java]]></name>
			<revision>1.27.2.2</revision>
			<prevrevision>1.27.2.1</prevrevision>
		</file>
		<msg><![CDATA[Added the ability to load custom schemas and JAXB custom  packages.
For Servlet, custom schemas are located as before in /xsd directory
Custom packages can be passed programaticaly to a WSManAgent]]></msg>
	</entry>
	<entry>
		<date>2007-01-23</date>
		<time>08:10</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[.classpath]]></name>
			<revision>1.7</revision>
			<prevrevision>1.9.2.1</prevrevision>
		</file>
		<msg><![CDATA[Updated for eclipse to reference new JAXWS library jar files.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>14:14</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/build.xml]]></name>
			<revision>1.42.2.3</revision>
			<prevrevision>1.42.2.2</prevrevision>
		</file>
		<msg><![CDATA[no message]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:26</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/handler/wsman/test/java/system/properties_Handler.java]]></name>
			<revision>1.16.2.1</revision>
			<prevrevision>1.18.2.1</prevrevision>
		</file>
		<msg><![CDATA[HandlerContext changes side effect]]></msg>
	</entry>
	<entry>
		<date>2006-12-18</date>
		<time>22:48</time>
		<author><![CDATA[simeonpinder]]></author>
		<file>
			<name><![CDATA[client/src/com/sun/ws/management/client/support/IdentifySupport.java]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[client/test/com/sun/ws/management/client/impl/Interop20060801Test.java]]></name>
			<revision>1.6</revision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/handler/org/dmtf/schemas/wbem/wscim/_1/cim_schema/_2/cim_numericsensor_Handler.java]]></name>
			<revision>1.6</revision>
			<prevrevision>1.5</prevrevision>
		</file>
		<msg><![CDATA[A few updates generated at the interop testing: Handler generated max message size exceeded, and support classes for Identify.]]></msg>
	</entry>
	<entry>
		<date>2007-01-26</date>
		<time>12:08</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[client/src/com/sun/ws/management/client/impl/TransferableResourceImpl.java]]></name>
			<revision>1.11</revision>
			<prevrevision>1.10</prevrevision>
		</file>
		<msg><![CDATA[Checks if body has a child on Pull Response before attempting to extract the object from the body.]]></msg>
	</entry>
	<entry>
		<date>2006-10-10</date>
		<time>19:50</time>
		<author><![CDATA[nbeers]]></author>
		<file>
			<name><![CDATA[client/src/com/sun/ws/management/client/impl/TransferableResourceImpl.java]]></name>
			<revision>1.9</revision>
			<prevrevision>1.8</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/test/src/framework/EnumerationTestCase.java]]></name>
			<revision>1.2</revision>
		</file>
		<msg><![CDATA[Fix for issue 36 (Concurrent JAXB access fails in SOAP class).  Make the XMLBinding member variable of the SOAP class non-static and fix all references to it throughout the code.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>14:56</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/enumeration/Enumeration.java]]></name>
			<revision>1.16.2.1</revision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/enumeration/EnumerationExtensions.java]]></name>
			<revision>1.7.2.1</revision>
		</file>
		<msg><![CDATA[Merge with rachal fixes]]></msg>
	</entry>
	<entry>
		<date>2006-12-11</date>
		<time>16:20</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/enumeration/Enumeration.java]]></name>
			<revision>1.15</revision>
			<prevrevision>1.16.2.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/enumeration/EnumerationExtensions.java]]></name>
			<revision>1.6</revision>
			<prevrevision>1.7.2.1</prevrevision>
		</file>
		<msg><![CDATA[Issue number:  18
Obtained from: Wiseman
Submitted by:  akhilarora
Reviewed by:
CVS: ----------------------------------------------------------------------
CVS: Issue number:18
CVS:   If this change addresses one or more issues,
CVS:   then enter the issue number(s) here.
CVS: Obtained from:
CVS:   If this change has been taken from another system,
CVS:   then name the system in this line, otherwise delete it.
CVS: Submitted by:
CVS:   If this code has been contributed to the project by someone else; i.e.,
CVS:   they sent us a patch or a set of diffs, then include their name/email
CVS:   address here. If this is your work then delete this line.
CVS: Reviewed by:
CVS:   If we are doing pre-commit code reviews and someone else has
CVS:   reviewed your changes, include their name(s) here.
CVS:   If you have not had it reviewed then delete this line.

Enumeration now supports wsman:item wrapper.]]></msg>
	</entry>
	<entry>
		<date>2007-01-29</date>
		<time>16:48</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[tools/samples/trafficlight_server/src/net/java/dev/wiseman/schemas/traffic/_1/light/ObjectFactory.java]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[tools/samples/trafficlight_server/src/net/java/dev/wiseman/schemas/traffic/_1/light/TrafficLightType.java]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[tools/samples/trafficlight_server/src/net/java/dev/wiseman/schemas/traffic/_1/light/package-info.java]]></name>
			<revision>1.1</revision>
		</file>
		<msg><![CDATA[Issue number:  68
Obtained from:
Submitted by:  denis_rachal
Reviewed by:

Updated sample client to use a single handler and new generated source files.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:22</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/resources/schemas/management.xsd]]></name>
			<revision>1.1</revision>
			<prevrevision>1.1.2.1</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.1.2;
file management.xsd was initially added on branch jaxws_branch.]]></msg>
	</entry>
	<entry>
		<date>2007-01-26</date>
		<time>15:11</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[tools/samples/.classpath]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[tools/samples/.project]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[tools/samples/README_SAMPLES.txt]]></name>
			<revision>1.2</revision>
		</file>
		<msg><![CDATA[Issue number:  61
Obtained from:
Submitted by:  denis_rachal
Reviewed by:

Templates for code generation have been updated to run with new Enumeration interfaces.

Samples programs updated to run with newer Enumeration interfaces.

Sample documentation updated.

Build project files updated for sample ant builds.

Eclipse project files added for sample builds.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:22</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/resources/schemas/xml.xsd]]></name>
			<revision>1.1</revision>
			<prevrevision>1.1.2.1</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.1.2;
file xml.xsd was initially added on branch jaxws_branch.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:21</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/Message.java]]></name>
			<revision>1.10.2.1</revision>
		</file>
		<msg><![CDATA[SOAPMessage constructor]]></msg>
	</entry>
	<entry>
		<date>2006-12-12</date>
		<time>19:36</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[www/index.html]]></name>
			<revision>1.23</revision>
		</file>
		<msg><![CDATA[Updated homepage to include this news item
-----------Dec 12th, 2006Wiseman at MDC (http://www.mandevcon.com/). The Wiseman project was the topic of a presentation at the Management Developers Conference last week in San Jose, CA.  A general status and update on what we have implemented was given including details on our client library and upcomming JMX support. The slides are available online at https://wiseman.dev.java.net/preso/mdc/MDC_2006_WSMan_and_Wiseman.pdf----------------------------
revision 1.24.4.1
date: 2007/03/03 00:25:17;  author: simeonpinder;  state: Exp;  lines: +17 -9
Final build 0.6 changes:
-update to index.html
-update to installation.html
-modify bundle name.]]></msg>
	</entry>
	<entry>
		<date>2007-01-11</date>
		<time>13:12</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/test/src/interop/_06/InteropTest.java]]></name>
			<revision>1.21</revision>
			<prevrevision>1.20</prevrevision>
		</file>
		<msg><![CDATA[Wiseman on top of JAX-WS 2.0. Merge with jaxws_branch.
Main changes:
- Removal of JAXB binaries from CVS.
  You will have to copy jaxws jars (you can download them from https://jax-ws.dev.java.net/jax-ws-20-fcs/) in lib/jaxws directory.
 (Planing to see how we can integrate the Maven java.net repository to express dependency we have on JAX-WS project.)
- Source code impact. Quite a lot but mainly rework of WsManServlet, introduced new WSManAgent and WSManJAXWSEndpoint.
  Rework of initialization, removal of various initialization() methods.
  New Message construction based on a SOAPMessage.
- Schemas location.They are now located in com.sun.ws.management.resources.schemas.
  They can be found as Resource from current ClassLoader. It is no more linked to Servlet.
  Custom schemas can still be provided thanks to ServletContext (as before)
  The schemas have been renamed, the ordering based on name has been replaced by a list in wiseman.properties file.
- JAXB Generation. Removal of the files from the repository.
  Generated file should be generated with the release of JAX-WS you selected.
  If we let the generated code in the CVS repository, we could ran into future compatibility problems.
  You have to call "generate-jaxb" manually.
- Build impact. New targets to build and deploy jax-ws compliant war (named wisman-jaxws.war)
- Tests. Removal of the automatic copy of JAXB/SAAJ jar in the tomcat /shared/lib.
  This is something that is nice but can easily break existing configuration.
  All existing tests and interop scenarii can be run with a Servlet based agent or with a JAX-WS one.
  Choose your target : "test" or "test-jaxws". The single difference between these 2 targets is deployment of the right war.
  J2SE deployment. WiseMan JAX-WS Endpoint can be deployed in JAX-WS http server (no more need of Servlet container),
  the build targets are currently commented due to Servlet dependency in Tests (If someone wants to rework a little bit handlers,
  we could have all tests passing indifferently on top of J2SE or J2EE!!!!). To play with such deployment, uncomment following
  ant build targets "deploy-j2se-jaxws" to start the agent side and "test-j2se-jaxws" to start the client side).
- misc: Commented the test.foo package from binding.properties.
- Trace. Removal of logging configuration file loading. Addition of a logging.properties file that is
  packaged in WEB-INF/classes in order to generate in <catalina-home>/logs a file that contains all wiseman traces.
  This is very useful when you are debugging tests. The generated file name is wiseman-<date of the day>.out]]></msg>
	</entry>
	<entry>
		<date>2007-01-11</date>
		<time>13:19</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/resources/schemas/xml.xsd]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1</prevrevision>
		</file>
		<msg><![CDATA[Wiseman on top of JAX-WS 2.0. Merge with jaxws_branch
Main changes:
- Removal of JAXB binaries from CVS.
  You will have to copy jaxws jars (you can download them from https://jax-ws.dev.java.net/jax-ws-20-fcs/) in lib/jaxws directory.
 (Planing to see how we can integrate the Maven java.net repository to express dependency we have on JAX-WS project.)
- Source code impact. Quite a lot but mainly rework of WsManServlet, introduced new WSManAgent and WSManJAXWSEndpoint.
  Rework of initialization, removal of various initialization() methods.
  New Message construction based on a SOAPMessage.
- Schemas location.They are now located in com.sun.ws.management.resources.schemas.
  They can be found as Resource from current ClassLoader. It is no more linked to Servlet.
  Custom schemas can still be provided thanks to ServletContext (as before)
  The schemas have been renamed, the ordering based on name has been replaced by a list in wiseman.properties file.
- JAXB Generation. Removal of the files from the repository.
  Generated file should be generated with the release of JAX-WS you selected.
  If we let the generated code in the CVS repository, we could ran into future compatibility problems.
  You have to call "generate-jaxb" manually.
- Build impact. New targets to build and deploy jax-ws compliant war (named wisman-jaxws.war)
- Tests. Removal of the automatic copy of JAXB/SAAJ jar in the tomcat /shared/lib.
  This is something that is nice but can easily break existing configuration.
  All existing tests and interop scenarii can be run with a Servlet based agent or with a JAX-WS one.
  Choose your target : "test" or "test-jaxws". The single difference between these 2 targets is deployment of the right war.
  J2SE deployment. WiseMan JAX-WS Endpoint can be deployed in JAX-WS http server (no more need of Servlet container),
  the build targets are currently commented due to Servlet dependency in Tests (If someone wants to rework a little bit handlers,
  we could have all tests passing indifferently on top of J2SE or J2EE!!!!). To play with such deployment, uncomment following
  ant build targets "deploy-j2se-jaxws" to start the agent side and "test-j2se-jaxws" to start the client side).
- misc: Commented the test.foo package from binding.properties.
- Trace. Removal of logging configuration file loading. Addition of a logging.properties file that is
  packaged in WEB-INF/classes in order to generate in <catalina-home>/logs a file that contains all wiseman traces.
  This is very useful when you are debugging tests. The generated file name is wiseman-<date of the day>.out]]></msg>
	</entry>
	<entry>
		<date>2007-01-25</date>
		<time>15:42</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/EnumerationSupport.java]]></name>
			<revision>1.44</revision>
			<prevrevision>1.43</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.44.2;
Issue number:  66
Obtained from:
Submitted by:
Reviewed by:

Added tryy/catch blocks around XmlBinding.marshal() calls and throws InternalErrorFault in these cases.]]></msg>
	</entry>
	<entry>
		<date>2006-12-11</date>
		<time>16:23</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/EnumerationSupport.java]]></name>
			<revision>1.36</revision>
			<prevrevision>1.35</prevrevision>
		</file>
		<msg><![CDATA[Issue number:  18
Obtained from:
Submitted by:  akhilarora
Reviewed by:
CVS: ----------------------------------------------------------------------
CVS: Issue number:
CVS:   If this change addresses one or more issues,
CVS:   then enter the issue number(s) here.
CVS: Obtained from:
CVS:   If this change has been taken from another system,
CVS:   then name the system in this line, otherwise delete it.
CVS: Submitted by:
CVS:   If this code has been contributed to the project by someone else; i.e.,
CVS:   they sent us a patch or a set of diffs, then include their name/email
CVS:   address here. If this is your work then delete this line.
CVS: Reviewed by:
CVS:   If we are doing pre-commit code reviews and someone else has
CVS:   reviewed your changes, include their name(s) here.
CVS:   If you have not had it reviewed then delete this line.

Checks for correct data on Enumerate with EPR.]]></msg>
	</entry>
	<entry>
		<date>2007-01-14</date>
		<time>17:52</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/framework/enumeration/Enumeratable.java]]></name>
			<revision>1.7</revision>
			<prevrevision>1.6</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.7.2;


Changes with this submission:

51: Enhance EnumerationIterator IF to indicate iterator is already filtered.
52: Enumeration Pull may return zero objects when filtered.
53: Concurrent access to Enum context not protected

In addition the following items have been added:

1. EnumerationSupport, EnumerationHandler and EnumerationIterator have been
   completely reworked and simplified. An IteratorFactory interface has
   been added. Users wanting EnumerationSupport to handle their enumeration
   requests will need to port their iterator to the new EnumerationIterator
   interface, create an IteratorFactory and register their factory with
   EnumerationSupport.

   EnumerationSupport & EnumerationHandler are now able to support concurrent
   requests to a single resource URI.

   EnumerationSupport will now correctly detect "projections" in the filter
   and wrap the projected items within an XmlFragment. Projections are selections
   of a portion of a resource as opposed to the whole resource.

   EnumerationSupport will not filter or wrap in XmlFragment items returned from
   an iterator that returns true from EnumerationIterator.isFilter().

   The test User handler EnuerationUserHandler has been completely rewritten
   to now use the EnumerationSupport & is now split into UserEnumerationHandler,
   UserIteratorFactory & UserStore. They are used for testing and can be used
   as an example.

2. A filter unit test has been added. Several bugs were fixed in this area
   due to errors produced by this test. In particular, a namespace map was
   needed to be added to the client interfaces accepting a filter. This map
   contains the namespaces used in the filter expression. The namespaces are
   needed on the server side in order to properly evaluate the filter.
   Previously the namespaces for the document produced on the server side were
   passed to the XPath object. This was incorrect.

   Additionally NamespaceMap(Node node) was used on the server side to obtain
   the set of namespaces. This scanned the document from the specified node
   to the last child. This was incorrect. It needed to scan the document from
   the specified node to the root (opposite direction).

   Several support functions were added to process filtering on the server side.
   See below in item 3.

3. Several client and server interfaces have been enhanced to allow for easier
   handling of XmlFragment and filtering in general.
   EnumerationSupport has already been mentioned.

   EnumerationSupport has the added method:
   public static Filter createFilter(final Enumeration request)
   for easy creation of a Filter object from an Enumeration Request.
   EventingSupport & TransferExtensions have similar methods.

   BaseSupport has added two methods, createXmlFragment(List<Node>) &
   createXmlFragment(Nodelist) to ease creation of XmlFragment objects.
   TransferExtensions has done the same for use on the client side.

   The Filter interface was changed to return the filtered object as
   a Nodelist object rather than just a boolean. The Nodelist may contain
   projected elements if the filter contains a projection. The Nodelist
   can be diretly passed to BaseSupport.createXmlFragment(Nodelist)
   described above.

   Transfer.getResource(QName name) was added to easily get the resource object
   passed in Create, Update, & Delete requests.

   TransferExtensions.getResource(QName) overrides Transfer.getResource() and
   will check for XmlFragment objects if the QName object is not found.

   TransferExtensions.setFragmentGetResponse(
			final SOAPHeaderElement fragmentTransferHeader,
			final Object resource)

   has been added. This method will, using any registerd Filter handler,
   process the Fragment Transfer get against the provided resource object
   and set the result in the response. The resulting resource will
   automatically be wrapped into an XmlFragment for the caller and placed
   into the body of the repsonse. NOTE: results from applying the
   Fragment Transfer filter are always warpped in an XmlFragment by
   this method, whether the filter specified projections or not, as the caller
   specifically requested Fragment Transfer. This is not done for
   enumerations where the fragment transfer is mixed in with the wsman:filter.
   In the case of Enumerations if the filter selects the entire resource
   it is not wrapped in an XmlFragment.

   If setFragmentGetResponse() is called with fragmentTransferHeader set
   to null the method will simply put the resource object into the body of
   the response for the caller.

   NOTE: More work is needed on the client side to make, so I have listed/closed
         issue #24: Client fragment support should be simplified

4. To run the tests the "se/src/binding.properties" file MUST be edited first.
   Uncomment the line:

   com.sun.ws.management.xml.custom.packagenames = foo.test,com.hp.examples.ws.wsman.user

   This is needed for some tests to correctly execute.

5. I could NOT correctly build the JAXB Object Factory sources using the build.xml.
   All sources were built and compiled OK, but some tests failed. The reason is that
   attempts to add the "mustUnderstand" attribute to a header did not work. The
   call did not produce an error, but the header did not have the attribute. I
   duplicated this problem on two different system. Eventually I used the source
   that was previously built with JAXB and the tests then passed.

6. testMaxEnvelopeSizeTooBig() fails for test-jaxws. I do not know why. It is the
   only test that failed for me, though. I commented it out for my tests.]]></msg>
	</entry>
	<entry>
		<date>2006-12-05</date>
		<time>10:34</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/FilterFactory.java]]></name>
			<revision>1.1</revision>
		</file>
		<msg><![CDATA[Fix for Supporting multiple Filter dialects : https://wiseman.dev.java.net/issues/show_bug.cgi?id=43]]></msg>
	</entry>
	<entry>
		<date>2006-11-02</date>
		<time>20:45</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/ReflectiveRequestDispatcher.java]]></name>
			<revision>1.17</revision>
			<prevrevision>1.17.2.1</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.17.2;
Reflective Request Dispatcher now supports a configuration file to map specifc resource to handler classes.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:53</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/etc/jaxws/web.xml]]></name>
			<revision>1.1</revision>
			<prevrevision>1.1.2.1</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.1.2;
file web.xml was initially added on branch jaxws_branch.]]></msg>
	</entry>
	<entry>
		<date>2007-01-26</date>
		<time>15:11</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[.classpath]]></name>
			<revision>1.8</revision>
			<prevrevision>1.7</prevrevision>
		</file>
		<file>
			<name><![CDATA[build.xml]]></name>
			<revision>1.9</revision>
			<prevrevision>1.8</prevrevision>
		</file>
		<file>
			<name><![CDATA[tools/src/com/sun/ws/management/tools/Wsdl2WsmanGenerator.java]]></name>
			<revision>1.3</revision>
			<prevrevision>1.5.2.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[tools/src/templates/IteratorFactory.vm]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[tools/src/templates/TransferSupport.vm]]></name>
			<revision>1.4</revision>
			<prevrevision>1.3</prevrevision>
		</file>
		<msg><![CDATA[Issue number:  61
Obtained from:
Submitted by:  denis_rachal
Reviewed by:

Templates for code generation have been updated to run with new Enumeration interfaces.

Samples programs updated to run with newer Enumeration interfaces.

Sample documentation updated.

Build project files updated for sample ant builds.

Eclipse project files added for sample builds.]]></msg>
	</entry>
	<entry>
		<date>2006-12-02</date>
		<time>14:48</time>
		<author><![CDATA[simeonpinder]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/handler/org/dmtf/schemas/wbem/wscim/_1/cim_schema/_2/cim_numericsensor_Handler_Pull_Large_0.xml]]></name>
			<revision>1.1</revision>
		</file>
		<msg><![CDATA[Updating interop scenario to process for responses exceeding requested maximum.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>10:04</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/gen-src/README]]></name>
			<revision>1.1.2.1</revision>
		</file>
		<msg><![CDATA[Directory description]]></msg>
	</entry>
	<entry>
		<date>2007-01-14</date>
		<time>17:52</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/handler/wsman/test/java/system/properties_Handler.java]]></name>
			<revision>1.18</revision>
			<prevrevision>1.17</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.18.2;


Changes with this submission:

51: Enhance EnumerationIterator IF to indicate iterator is already filtered.
52: Enumeration Pull may return zero objects when filtered.
53: Concurrent access to Enum context not protected

In addition the following items have been added:

1. EnumerationSupport, EnumerationHandler and EnumerationIterator have been
   completely reworked and simplified. An IteratorFactory interface has
   been added. Users wanting EnumerationSupport to handle their enumeration
   requests will need to port their iterator to the new EnumerationIterator
   interface, create an IteratorFactory and register their factory with
   EnumerationSupport.

   EnumerationSupport & EnumerationHandler are now able to support concurrent
   requests to a single resource URI.

   EnumerationSupport will now correctly detect "projections" in the filter
   and wrap the projected items within an XmlFragment. Projections are selections
   of a portion of a resource as opposed to the whole resource.

   EnumerationSupport will not filter or wrap in XmlFragment items returned from
   an iterator that returns true from EnumerationIterator.isFilter().

   The test User handler EnuerationUserHandler has been completely rewritten
   to now use the EnumerationSupport & is now split into UserEnumerationHandler,
   UserIteratorFactory & UserStore. They are used for testing and can be used
   as an example.

2. A filter unit test has been added. Several bugs were fixed in this area
   due to errors produced by this test. In particular, a namespace map was
   needed to be added to the client interfaces accepting a filter. This map
   contains the namespaces used in the filter expression. The namespaces are
   needed on the server side in order to properly evaluate the filter.
   Previously the namespaces for the document produced on the server side were
   passed to the XPath object. This was incorrect.

   Additionally NamespaceMap(Node node) was used on the server side to obtain
   the set of namespaces. This scanned the document from the specified node
   to the last child. This was incorrect. It needed to scan the document from
   the specified node to the root (opposite direction).

   Several support functions were added to process filtering on the server side.
   See below in item 3.

3. Several client and server interfaces have been enhanced to allow for easier
   handling of XmlFragment and filtering in general.
   EnumerationSupport has already been mentioned.

   EnumerationSupport has the added method:
   public static Filter createFilter(final Enumeration request)
   for easy creation of a Filter object from an Enumeration Request.
   EventingSupport & TransferExtensions have similar methods.

   BaseSupport has added two methods, createXmlFragment(List<Node>) &
   createXmlFragment(Nodelist) to ease creation of XmlFragment objects.
   TransferExtensions has done the same for use on the client side.

   The Filter interface was changed to return the filtered object as
   a Nodelist object rather than just a boolean. The Nodelist may contain
   projected elements if the filter contains a projection. The Nodelist
   can be diretly passed to BaseSupport.createXmlFragment(Nodelist)
   described above.

   Transfer.getResource(QName name) was added to easily get the resource object
   passed in Create, Update, & Delete requests.

   TransferExtensions.getResource(QName) overrides Transfer.getResource() and
   will check for XmlFragment objects if the QName object is not found.

   TransferExtensions.setFragmentGetResponse(
			final SOAPHeaderElement fragmentTransferHeader,
			final Object resource)

   has been added. This method will, using any registerd Filter handler,
   process the Fragment Transfer get against the provided resource object
   and set the result in the response. The resulting resource will
   automatically be wrapped into an XmlFragment for the caller and placed
   into the body of the repsonse. NOTE: results from applying the
   Fragment Transfer filter are always warpped in an XmlFragment by
   this method, whether the filter specified projections or not, as the caller
   specifically requested Fragment Transfer. This is not done for
   enumerations where the fragment transfer is mixed in with the wsman:filter.
   In the case of Enumerations if the filter selects the entire resource
   it is not wrapped in an XmlFragment.

   If setFragmentGetResponse() is called with fragmentTransferHeader set
   to null the method will simply put the resource object into the body of
   the response for the caller.

   NOTE: More work is needed on the client side to make, so I have listed/closed
         issue #24: Client fragment support should be simplified

4. To run the tests the "se/src/binding.properties" file MUST be edited first.
   Uncomment the line:

   com.sun.ws.management.xml.custom.packagenames = foo.test,com.hp.examples.ws.wsman.user

   This is needed for some tests to correctly execute.

5. I could NOT correctly build the JAXB Object Factory sources using the build.xml.
   All sources were built and compiled OK, but some tests failed. The reason is that
   attempts to add the "mustUnderstand" attribute to a header did not work. The
   call did not produce an error, but the header did not have the attribute. I
   duplicated this problem on two different system. Eventually I used the source
   that was previously built with JAXB and the tests then passed.

6. testMaxEnvelopeSizeTooBig() fails for test-jaxws. I do not know why. It is the
   only test that failed for me, though. I commented it out for my tests.]]></msg>
	</entry>
	<entry>
		<date>2007-01-14</date>
		<time>17:52</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/handler/wsman/test/enumeration/filter/custom_filter_IteratorFactory.java]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/handler/wsman/test/java/system/properties_IteratorFactory.java]]></name>
			<revision>1.1</revision>
		</file>
		<msg><![CDATA[

Changes with this submission:

51: Enhance EnumerationIterator IF to indicate iterator is already filtered.
52: Enumeration Pull may return zero objects when filtered.
53: Concurrent access to Enum context not protected

In addition the following items have been added:

1. EnumerationSupport, EnumerationHandler and EnumerationIterator have been
   completely reworked and simplified. An IteratorFactory interface has
   been added. Users wanting EnumerationSupport to handle their enumeration
   requests will need to port their iterator to the new EnumerationIterator
   interface, create an IteratorFactory and register their factory with
   EnumerationSupport.

   EnumerationSupport & EnumerationHandler are now able to support concurrent
   requests to a single resource URI.

   EnumerationSupport will now correctly detect "projections" in the filter
   and wrap the projected items within an XmlFragment. Projections are selections
   of a portion of a resource as opposed to the whole resource.

   EnumerationSupport will not filter or wrap in XmlFragment items returned from
   an iterator that returns true from EnumerationIterator.isFilter().

   The test User handler EnuerationUserHandler has been completely rewritten
   to now use the EnumerationSupport & is now split into UserEnumerationHandler,
   UserIteratorFactory & UserStore. They are used for testing and can be used
   as an example.

2. A filter unit test has been added. Several bugs were fixed in this area
   due to errors produced by this test. In particular, a namespace map was
   needed to be added to the client interfaces accepting a filter. This map
   contains the namespaces used in the filter expression. The namespaces are
   needed on the server side in order to properly evaluate the filter.
   Previously the namespaces for the document produced on the server side were
   passed to the XPath object. This was incorrect.

   Additionally NamespaceMap(Node node) was used on the server side to obtain
   the set of namespaces. This scanned the document from the specified node
   to the last child. This was incorrect. It needed to scan the document from
   the specified node to the root (opposite direction).

   Several support functions were added to process filtering on the server side.
   See below in item 3.

3. Several client and server interfaces have been enhanced to allow for easier
   handling of XmlFragment and filtering in general.
   EnumerationSupport has already been mentioned.

   EnumerationSupport has the added method:
   public static Filter createFilter(final Enumeration request)
   for easy creation of a Filter object from an Enumeration Request.
   EventingSupport & TransferExtensions have similar methods.

   BaseSupport has added two methods, createXmlFragment(List<Node>) &
   createXmlFragment(Nodelist) to ease creation of XmlFragment objects.
   TransferExtensions has done the same for use on the client side.

   The Filter interface was changed to return the filtered object as
   a Nodelist object rather than just a boolean. The Nodelist may contain
   projected elements if the filter contains a projection. The Nodelist
   can be diretly passed to BaseSupport.createXmlFragment(Nodelist)
   described above.

   Transfer.getResource(QName name) was added to easily get the resource object
   passed in Create, Update, & Delete requests.

   TransferExtensions.getResource(QName) overrides Transfer.getResource() and
   will check for XmlFragment objects if the QName object is not found.

   TransferExtensions.setFragmentGetResponse(
			final SOAPHeaderElement fragmentTransferHeader,
			final Object resource)

   has been added. This method will, using any registerd Filter handler,
   process the Fragment Transfer get against the provided resource object
   and set the result in the response. The resulting resource will
   automatically be wrapped into an XmlFragment for the caller and placed
   into the body of the repsonse. NOTE: results from applying the
   Fragment Transfer filter are always warpped in an XmlFragment by
   this method, whether the filter specified projections or not, as the caller
   specifically requested Fragment Transfer. This is not done for
   enumerations where the fragment transfer is mixed in with the wsman:filter.
   In the case of Enumerations if the filter selects the entire resource
   it is not wrapped in an XmlFragment.

   If setFragmentGetResponse() is called with fragmentTransferHeader set
   to null the method will simply put the resource object into the body of
   the response for the caller.

   NOTE: More work is needed on the client side to make, so I have listed/closed
         issue #24: Client fragment support should be simplified

4. To run the tests the "se/src/binding.properties" file MUST be edited first.
   Uncomment the line:

   com.sun.ws.management.xml.custom.packagenames = foo.test,com.hp.examples.ws.wsman.user

   This is needed for some tests to correctly execute.

5. I could NOT correctly build the JAXB Object Factory sources using the build.xml.
   All sources were built and compiled OK, but some tests failed. The reason is that
   attempts to add the "mustUnderstand" attribute to a header did not work. The
   call did not produce an error, but the header did not have the attribute. I
   duplicated this problem on two different system. Eventually I used the source
   that was previously built with JAXB and the tests then passed.

6. testMaxEnvelopeSizeTooBig() fails for test-jaxws. I do not know why. It is the
   only test that failed for me, though. I commented it out for my tests.]]></msg>
	</entry>
	<entry>
		<date>2006-10-16</date>
		<time>14:47</time>
		<author><![CDATA[nbeers]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/soap/SOAP.java]]></name>
			<revision>1.14</revision>
			<prevrevision>1.13</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.14.2;
Copy XMLBinding in SOAP object copy constructor]]></msg>
	</entry>
	<entry>
		<date>2007-01-11</date>
		<time>13:20</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/etc/xsd/1-xml.xsd]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1.2.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/etc/xsd/4-transfer.xsd]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1.2.1</prevrevision>
		</file>
		<msg><![CDATA[Wiseman on top of JAX-WS 2.0. Merge with jaxws_branch
Main changes:
- Removal of JAXB binaries from CVS.
  You will have to copy jaxws jars (you can download them from https://jax-ws.dev.java.net/jax-ws-20-fcs/) in lib/jaxws directory.
 (Planing to see how we can integrate the Maven java.net repository to express dependency we have on JAX-WS project.)
- Source code impact. Quite a lot but mainly rework of WsManServlet, introduced new WSManAgent and WSManJAXWSEndpoint.
  Rework of initialization, removal of various initialization() methods.
  New Message construction based on a SOAPMessage.
- Schemas location.They are now located in com.sun.ws.management.resources.schemas.
  They can be found as Resource from current ClassLoader. It is no more linked to Servlet.
  Custom schemas can still be provided thanks to ServletContext (as before)
  The schemas have been renamed, the ordering based on name has been replaced by a list in wiseman.properties file.
- JAXB Generation. Removal of the files from the repository.
  Generated file should be generated with the release of JAX-WS you selected.
  If we let the generated code in the CVS repository, we could ran into future compatibility problems.
  You have to call "generate-jaxb" manually.
- Build impact. New targets to build and deploy jax-ws compliant war (named wisman-jaxws.war)
- Tests. Removal of the automatic copy of JAXB/SAAJ jar in the tomcat /shared/lib.
  This is something that is nice but can easily break existing configuration.
  All existing tests and interop scenarii can be run with a Servlet based agent or with a JAX-WS one.
  Choose your target : "test" or "test-jaxws". The single difference between these 2 targets is deployment of the right war.
  J2SE deployment. WiseMan JAX-WS Endpoint can be deployed in JAX-WS http server (no more need of Servlet container),
  the build targets are currently commented due to Servlet dependency in Tests (If someone wants to rework a little bit handlers,
  we could have all tests passing indifferently on top of J2SE or J2EE!!!!). To play with such deployment, uncomment following
  ant build targets "deploy-j2se-jaxws" to start the agent side and "test-j2se-jaxws" to start the client side).
- misc: Commented the test.foo package from binding.properties.
- Trace. Removal of logging configuration file loading. Addition of a logging.properties file that is
  packaged in WEB-INF/classes in order to generate in <catalina-home>/logs a file that contains all wiseman traces.
  This is very useful when you are debugging tests. The generated file name is wiseman-<date of the day>.out]]></msg>
	</entry>
	<entry>
		<date>2006-10-16</date>
		<time>14:50</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[client/src/com/sun/ws/management/client/impl/ResourceImpl.java]]></name>
			<revision>1.6</revision>
		</file>
		<msg><![CDATA[Issue number:  42
Refactored Handler Context all the way down the stack into all generated or framework based code and examples.----------------------------
revision 1.5
date: 2006/09/29 15:18:02;  author: obiwan314;  state: Exp;  lines: +61 -0
My previous change introduced some refactoring I was doing to implement invoke for ResourceImpl. These changes are required to keep the client buildable. Invoke is not completely tested yet.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:22</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/resources/schemas/transfer.xsd]]></name>
			<revision>1.1</revision>
			<prevrevision>1.1.2.1</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.1.2;
file transfer.xsd was initially added on branch jaxws_branch.]]></msg>
	</entry>
	<entry>
		<date>2007-01-26</date>
		<time>16:50</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[tools/samples/trafficlight_client/project.properties]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[tools/samples/trafficlight_server/project.properties]]></name>
			<revision>1.5</revision>
			<prevrevision>1.4</prevrevision>
		</file>
		<msg><![CDATA[Issue number:  61
Obtained from:
Submitted by:
Reviewed by:

Update proxy settings for no proxy.]]></msg>
	</entry>
	<entry>
		<date>2006-09-27</date>
		<time>15:12</time>
		<author><![CDATA[nbeers]]></author>
		<file>
			<name><![CDATA[client/test/com/sun/ws/management/client/impl/ResourceImplTest.java]]></name>
			<revision>1.10</revision>
			<prevrevision>1.9</prevrevision>
		</file>
		<msg><![CDATA[Fix for issue 35.  Add the ability for the client to specify Option Sets.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>10:09</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/build.xml]]></name>
			<revision>1.42.2.2</revision>
			<prevrevision>1.42.2.1</prevrevision>
		</file>
		<msg><![CDATA[Updated generate-jaxb with new schema location]]></msg>
	</entry>
	<entry>
		<date>2007-01-11</date>
		<time>13:12</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/handler/org/dmtf/schemas/wbem/wscim/_1/cim_schema/_2/cim_computersystem_Handler.java]]></name>
			<revision>1.3</revision>
			<prevrevision>1.2</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/handler/org/dmtf/schemas/wbem/wscim/_1/cim_schema/_2/cim_numericsensor_Handler.java]]></name>
			<revision>1.7</revision>
			<prevrevision>1.6</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/handler/wsman/test/exec_Handler.java]]></name>
			<revision>1.11</revision>
			<prevrevision>1.10.2.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/handler/wsman/test/pull_source_Handler.java]]></name>
			<revision>1.13</revision>
			<prevrevision>1.12.2.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/test/src/util/WsManBaseTestSupport.java]]></name>
			<revision>1.4</revision>
			<prevrevision>1.3</prevrevision>
		</file>
		<msg><![CDATA[Wiseman on top of JAX-WS 2.0. Merge with jaxws_branch.
Main changes:
- Removal of JAXB binaries from CVS.
  You will have to copy jaxws jars (you can download them from https://jax-ws.dev.java.net/jax-ws-20-fcs/) in lib/jaxws directory.
 (Planing to see how we can integrate the Maven java.net repository to express dependency we have on JAX-WS project.)
- Source code impact. Quite a lot but mainly rework of WsManServlet, introduced new WSManAgent and WSManJAXWSEndpoint.
  Rework of initialization, removal of various initialization() methods.
  New Message construction based on a SOAPMessage.
- Schemas location.They are now located in com.sun.ws.management.resources.schemas.
  They can be found as Resource from current ClassLoader. It is no more linked to Servlet.
  Custom schemas can still be provided thanks to ServletContext (as before)
  The schemas have been renamed, the ordering based on name has been replaced by a list in wiseman.properties file.
- JAXB Generation. Removal of the files from the repository.
  Generated file should be generated with the release of JAX-WS you selected.
  If we let the generated code in the CVS repository, we could ran into future compatibility problems.
  You have to call "generate-jaxb" manually.
- Build impact. New targets to build and deploy jax-ws compliant war (named wisman-jaxws.war)
- Tests. Removal of the automatic copy of JAXB/SAAJ jar in the tomcat /shared/lib.
  This is something that is nice but can easily break existing configuration.
  All existing tests and interop scenarii can be run with a Servlet based agent or with a JAX-WS one.
  Choose your target : "test" or "test-jaxws". The single difference between these 2 targets is deployment of the right war.
  J2SE deployment. WiseMan JAX-WS Endpoint can be deployed in JAX-WS http server (no more need of Servlet container),
  the build targets are currently commented due to Servlet dependency in Tests (If someone wants to rework a little bit handlers,
  we could have all tests passing indifferently on top of J2SE or J2EE!!!!). To play with such deployment, uncomment following
  ant build targets "deploy-j2se-jaxws" to start the agent side and "test-j2se-jaxws" to start the client side).
- misc: Commented the test.foo package from binding.properties.
- Trace. Removal of logging configuration file loading. Addition of a logging.properties file that is
  packaged in WEB-INF/classes in order to generate in <catalina-home>/logs a file that contains all wiseman traces.
  This is very useful when you are debugging tests. The generated file name is wiseman-<date of the day>.out]]></msg>
	</entry>
	<entry>
		<date>2007-01-22</date>
		<time>12:48</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/build.xml]]></name>
			<revision>1.47</revision>
			<prevrevision>1.46</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/xml/XmlBinding.java]]></name>
			<revision>1.15</revision>
			<prevrevision>1.16.2.1</prevrevision>
		</file>
		<msg><![CDATA[Issue number:  64
Obtained from:
Submitted by:  denis_rachal
Reviewed by:

Build files updated to no longer include binding.properties or logging.properties in the wiseman jarfiles. Tes warfile is now built with the necessary bingind.properties and logging.properties files customized for testing.

XmlBinding has been changed to allow client to specify the bindging property on the command line at runtime, or through the binding.properties file in the classpath. Runtime property definition takes precedence:

com.sun.ws.management.xml.custom.packagenames=<comma separated list of packages>]]></msg>
	</entry>
	<entry>
		<date>2007-01-14</date>
		<time>21:25</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/test/src/framework/models/UserHandler.java]]></name>
			<revision>1.8</revision>
			<prevrevision>1.7</prevrevision>
		</file>
		<msg><![CDATA[

Changes with this submission:

51: Enhance EnumerationIterator IF to indicate iterator is already filtered.
52: Enumeration Pull may return zero objects when filtered.
53: Concurrent access to Enum context not protected

In addition the following items have been added:

1. EnumerationSupport, EnumerationHandler and EnumerationIterator have been
   completely reworked and simplified. An IteratorFactory interface has
   been added. Users wanting EnumerationSupport to handle their enumeration
   requests will need to port their iterator to the new EnumerationIterator
   interface, create an IteratorFactory and register their factory with
   EnumerationSupport.

   EnumerationSupport & EnumerationHandler are now able to support concurrent
   requests to a single resource URI.

   EnumerationSupport will now correctly detect "projections" in the filter
   and wrap the projected items within an XmlFragment. Projections are selections
   of a portion of a resource as opposed to the whole resource.

   EnumerationSupport will not filter or wrap in XmlFragment items returned from
   an iterator that returns true from EnumerationIterator.isFilter().

   The test User handler EnuerationUserHandler has been completely rewritten
   to now use the EnumerationSupport & is now split into UserEnumerationHandler,
   UserIteratorFactory & UserStore. They are used for testing and can be used
   as an example.

2. A filter unit test has been added. Several bugs were fixed in this area
   due to errors produced by this test. In particular, a namespace map was
   needed to be added to the client interfaces accepting a filter. This map
   contains the namespaces used in the filter expression. The namespaces are
   needed on the server side in order to properly evaluate the filter.
   Previously the namespaces for the document produced on the server side were
   passed to the XPath object. This was incorrect.

   Additionally NamespaceMap(Node node) was used on the server side to obtain
   the set of namespaces. This scanned the document from the specified node
   to the last child. This was incorrect. It needed to scan the document from
   the specified node to the root (opposite direction).

   Several support functions were added to process filtering on the server side.
   See below in item 3.

3. Several client and server interfaces have been enhanced to allow for easier
   handling of XmlFragment and filtering in general.
   EnumerationSupport has already been mentioned.

   EnumerationSupport has the added method:
   public static Filter createFilter(final Enumeration request)
   for easy creation of a Filter object from an Enumeration Request.
   EventingSupport & TransferExtensions have similar methods.

   BaseSupport has added two methods, createXmlFragment(List<Node>) &
   createXmlFragment(Nodelist) to ease creation of XmlFragment objects.
   TransferExtensions has done the same for use on the client side.

   The Filter interface was changed to return the filtered object as
   a Nodelist object rather than just a boolean. The Nodelist may contain
   projected elements if the filter contains a projection. The Nodelist
   can be diretly passed to BaseSupport.createXmlFragment(Nodelist)
   described above.

   Transfer.getResource(QName name) was added to easily get the resource object
   passed in Create, Update, & Delete requests.

   TransferExtensions.getResource(QName) overrides Transfer.getResource() and
   will check for XmlFragment objects if the QName object is not found.

   TransferExtensions.setFragmentGetResponse(
			final SOAPHeaderElement fragmentTransferHeader,
			final Object resource)

   has been added. This method will, using any registerd Filter handler,
   process the Fragment Transfer get against the provided resource object
   and set the result in the response. The resulting resource will
   automatically be wrapped into an XmlFragment for the caller and placed
   into the body of the repsonse. NOTE: results from applying the
   Fragment Transfer filter are always warpped in an XmlFragment by
   this method, whether the filter specified projections or not, as the caller
   specifically requested Fragment Transfer. This is not done for
   enumerations where the fragment transfer is mixed in with the wsman:filter.
   In the case of Enumerations if the filter selects the entire resource
   it is not wrapped in an XmlFragment.

   If setFragmentGetResponse() is called with fragmentTransferHeader set
   to null the method will simply put the resource object into the body of
   the response for the caller.

   NOTE: More work is needed on the client side to make, so I have not
         listed or closed issue #24: Client fragment support should be simplified

4. To run the tests the "se/src/binding.properties" file MUST be edited first.
   Uncomment the line:

   com.sun.ws.management.xml.custom.packagenames = foo.test,com.hp.examples.ws.wsman.user

   This is needed for some tests to correctly execute.

5. I could NOT correctly build the JAXB Object Factory sources using the build.xml.
   All sources were built and compiled OK, but some tests failed. The reason is that
   attempts to add the "mustUnderstand" attribute to a header did not work. The
   call did not produce an error, but the header did not have the attribute. I
   duplicated this problem on two different system. Eventually I used the source
   that was previously built with JAXB and the tests then passed. The following was
   the test that failed:


    [junit] Testsuite: management.ManagementTest
    [junit] Tests run: 6, Failures: 1, Errors: 0, Time elapsed: 4.296 sec

    [junit] Testcase: testValidate(management.ManagementTest):  FAILED
    [junit] expected:<3> but was:<0>
    [junit] junit.framework.AssertionFailedError: expected:<3> but was:<0>
    [junit]     at management.ManagementTest.testValidate(ManagementTest.java:275)

6. testMaxEnvelopeSizeTooBig() fails for test-jaxws. I do not know why. It is the
   only test that failed for me, though. I commented it out for my tests.]]></msg>
	</entry>
	<entry>
		<date>2007-01-14</date>
		<time>17:52</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/handler/org/dmtf/schemas/wbem/wscim/_1/cim_schema/_2/cim_computersystem_Handler.java]]></name>
			<revision>1.4</revision>
			<prevrevision>1.3</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/handler/wsman/test/exec_IteratorFactory.java]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/handler/wsman/test/fragment_Handler.java]]></name>
			<revision>1.13</revision>
			<prevrevision>1.12</prevrevision>
		</file>
		<msg><![CDATA[

Changes with this submission:

51: Enhance EnumerationIterator IF to indicate iterator is already filtered.
52: Enumeration Pull may return zero objects when filtered.
53: Concurrent access to Enum context not protected

In addition the following items have been added:

1. EnumerationSupport, EnumerationHandler and EnumerationIterator have been
   completely reworked and simplified. An IteratorFactory interface has
   been added. Users wanting EnumerationSupport to handle their enumeration
   requests will need to port their iterator to the new EnumerationIterator
   interface, create an IteratorFactory and register their factory with
   EnumerationSupport.

   EnumerationSupport & EnumerationHandler are now able to support concurrent
   requests to a single resource URI.

   EnumerationSupport will now correctly detect "projections" in the filter
   and wrap the projected items within an XmlFragment. Projections are selections
   of a portion of a resource as opposed to the whole resource.

   EnumerationSupport will not filter or wrap in XmlFragment items returned from
   an iterator that returns true from EnumerationIterator.isFilter().

   The test User handler EnuerationUserHandler has been completely rewritten
   to now use the EnumerationSupport & is now split into UserEnumerationHandler,
   UserIteratorFactory & UserStore. They are used for testing and can be used
   as an example.

2. A filter unit test has been added. Several bugs were fixed in this area
   due to errors produced by this test. In particular, a namespace map was
   needed to be added to the client interfaces accepting a filter. This map
   contains the namespaces used in the filter expression. The namespaces are
   needed on the server side in order to properly evaluate the filter.
   Previously the namespaces for the document produced on the server side were
   passed to the XPath object. This was incorrect.

   Additionally NamespaceMap(Node node) was used on the server side to obtain
   the set of namespaces. This scanned the document from the specified node
   to the last child. This was incorrect. It needed to scan the document from
   the specified node to the root (opposite direction).

   Several support functions were added to process filtering on the server side.
   See below in item 3.

3. Several client and server interfaces have been enhanced to allow for easier
   handling of XmlFragment and filtering in general.
   EnumerationSupport has already been mentioned.

   EnumerationSupport has the added method:
   public static Filter createFilter(final Enumeration request)
   for easy creation of a Filter object from an Enumeration Request.
   EventingSupport & TransferExtensions have similar methods.

   BaseSupport has added two methods, createXmlFragment(List<Node>) &
   createXmlFragment(Nodelist) to ease creation of XmlFragment objects.
   TransferExtensions has done the same for use on the client side.

   The Filter interface was changed to return the filtered object as
   a Nodelist object rather than just a boolean. The Nodelist may contain
   projected elements if the filter contains a projection. The Nodelist
   can be diretly passed to BaseSupport.createXmlFragment(Nodelist)
   described above.

   Transfer.getResource(QName name) was added to easily get the resource object
   passed in Create, Update, & Delete requests.

   TransferExtensions.getResource(QName) overrides Transfer.getResource() and
   will check for XmlFragment objects if the QName object is not found.

   TransferExtensions.setFragmentGetResponse(
			final SOAPHeaderElement fragmentTransferHeader,
			final Object resource)

   has been added. This method will, using any registerd Filter handler,
   process the Fragment Transfer get against the provided resource object
   and set the result in the response. The resulting resource will
   automatically be wrapped into an XmlFragment for the caller and placed
   into the body of the repsonse. NOTE: results from applying the
   Fragment Transfer filter are always warpped in an XmlFragment by
   this method, whether the filter specified projections or not, as the caller
   specifically requested Fragment Transfer. This is not done for
   enumerations where the fragment transfer is mixed in with the wsman:filter.
   In the case of Enumerations if the filter selects the entire resource
   it is not wrapped in an XmlFragment.

   If setFragmentGetResponse() is called with fragmentTransferHeader set
   to null the method will simply put the resource object into the body of
   the response for the caller.

   NOTE: More work is needed on the client side to make, so I have listed/closed
         issue #24: Client fragment support should be simplified

4. To run the tests the "se/src/binding.properties" file MUST be edited first.
   Uncomment the line:

   com.sun.ws.management.xml.custom.packagenames = foo.test,com.hp.examples.ws.wsman.user

   This is needed for some tests to correctly execute.

5. I could NOT correctly build the JAXB Object Factory sources using the build.xml.
   All sources were built and compiled OK, but some tests failed. The reason is that
   attempts to add the "mustUnderstand" attribute to a header did not work. The
   call did not produce an error, but the header did not have the attribute. I
   duplicated this problem on two different system. Eventually I used the source
   that was previously built with JAXB and the tests then passed.

6. testMaxEnvelopeSizeTooBig() fails for test-jaxws. I do not know why. It is the
   only test that failed for me, though. I commented it out for my tests.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:26</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/handler/wsman/test/enumeration/filter/custom_filter_Handler.java]]></name>
			<revision>1.1.2.1</revision>
			<prevrevision>1.3.2.1</prevrevision>
		</file>
		<msg><![CDATA[HandlerContext changes side effect]]></msg>
	</entry>
	<entry>
		<date>2006-12-20</date>
		<time>11:41</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/test/src/framework/models/EnumerationUserHandler.java]]></name>
			<revision>1.10</revision>
			<prevrevision>1.9</prevrevision>
		</file>
		<msg><![CDATA[Issue number:  47
Obtained from:
Submitted by:  jfdenise
Reviewed by:

Updated test to use custom package JAXB elements. This tests the fix for issue 47.Also fixed issue where xpath selection may fail on fragment transfer and empty XmlFragment elements are returned.]]></msg>
	</entry>
	<entry>
		<date>2006-12-13</date>
		<time>09:11</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/enumeration/EnumerationExtensions.java]]></name>
			<revision>1.7</revision>
			<prevrevision>1.6</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.7.2;
Issue number:  18
Obtained from:
Submitted by:  akhilarora
Reviewed by:

Cleaned up code in Enumeration & EnumerationExtensions. All WS Management extensions are now located in EnumerationExtensions. Enumeration is for WS Enumeration without the WS Management extensions.]]></msg>
	</entry>
	<entry>
		<date>2007-01-29</date>
		<time>06:05</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/test/src/management/TransferExtensionsTest.java]]></name>
			<revision>1.10</revision>
			<prevrevision>1.9</prevrevision>
		</file>
		<file>
			<name><![CDATA[tools/src/com/sun/ws/management/tools/Wsdl2WsmanGenerator.java]]></name>
			<revision>1.4</revision>
			<prevrevision>1.3</prevrevision>
		</file>
		<file>
			<name><![CDATA[tools/src/com/sun/ws/management/tools/Xsd2WsdlTask.java]]></name>
			<revision>1.3</revision>
			<prevrevision>1.2</prevrevision>
		</file>
		<file>
			<name><![CDATA[tools/src/templates/IteratorFactory.vm]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[tools/src/templates/WsdlFromXsdMultiHandler.vm]]></name>
			<revision>1.1</revision>
		</file>
		<msg><![CDATA[Issue number:  68
Obtained from:
Submitted by:
Reviewed by:

Code generation updated to create a single handle per XSD.]]></msg>
	</entry>
	<entry>
		<date>2006-12-02</date>
		<time>14:48</time>
		<author><![CDATA[simeonpinder]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/handler/org/dmtf/schemas/wbem/wscim/_1/cim_schema/_2/cim_numericsensor_Handler.java]]></name>
			<revision>1.4</revision>
			<prevrevision>1.5.2.1</prevrevision>
		</file>
		<msg><![CDATA[Updating interop scenario to process for responses exceeding requested maximum.]]></msg>
	</entry>
	<entry>
		<date>2006-10-27</date>
		<time>18:53</time>
		<author><![CDATA[nbeers]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/addressing/Addressing.java]]></name>
			<revision>1.12</revision>
			<prevrevision>1.12.2.1</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.12.2;
Updated for issue 34 (Enumeration Count support for the Client Toolkit). The enumerate and enumerate:pull operations in the client toolkit now support the RequestTotalItemsCountEstimate option.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:56</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/lib/jaxws/README]]></name>
			<revision>1.1.2.1</revision>
		</file>
		<msg><![CDATA[JAX-WS dependency]]></msg>
	</entry>
	<entry>
		<date>2006-10-17</date>
		<time>17:39</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[client/src/com/sun/ws/management/client/impl/ResourceStateImpl.java]]></name>
			<revision>1.3</revision>
		</file>
		<msg><![CDATA[getValueText was requireing that all nodes in a document must be in namespace or it would abort at the first non-namespaced node and find nothing. It now will not search nodes which are not in a namespace.]]></msg>
	</entry>
	<entry>
		<date>2007-01-29</date>
		<time>16:48</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[tools/samples/trafficlight_server/etc/binding.properties]]></name>
			<revision>1.3</revision>
			<prevrevision>1.2</prevrevision>
		</file>
		<file>
			<name><![CDATA[tools/samples/trafficlight_server/src/net/java/dev/wiseman/resources/traffic/_1/light/LightIteratorFactory.java]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[tools/src/templates/EnumerationSupport.vm]]></name>
			<revision>1.6</revision>
			<prevrevision>1.5</prevrevision>
		</file>
		<file>
			<name><![CDATA[tools/src/templates/IteratorFactory.vm]]></name>
			<revision>1.3</revision>
			<prevrevision>1.2</prevrevision>
		</file>
		<msg><![CDATA[Issue number:  68
Obtained from:
Submitted by:  denis_rachal
Reviewed by:

Updated sample client to use a single handler and new generated source files.]]></msg>
	</entry>
	<entry>
		<date>2006-10-16</date>
		<time>14:50</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/framework/transfer/TransferSupport.java]]></name>
			<revision>1.5</revision>
			<prevrevision>1.4</prevrevision>
		</file>
		<msg><![CDATA[Issue number:  42
Refactored Handler Context all the way down the stack into all generated or framework based code and examples.=============================================================================

RCS file: /cvs/wiseman/se/src/com/sun/ws/management/framework/transfer/Transferable.java,v
Working file: se/src/com/sun/ws/management/framework/transfer/Transferable.java
head: 1.4
branch:
locks: strict
access list:
symbolic names:
	wiseman_0_6_release: 1.4.0.6
	Root_wiseman_0_6_release: 1.4
	wiseman_0_6_rc3: 1.4
	post_0_6_enh: 1.4.0.4
	Root_post_0_6_enh: 1.4
	pre_jaxws_10jan2007: 1.4
	jaxws_branch: 1.4.0.2
	Release_05: 1.3
	interop06: 1.3
keyword substitution: kv
total revisions: 4;	selected revisions: 1
description:]]></msg>
	</entry>
	<entry>
		<date>2007-01-14</date>
		<time>17:52</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/EventingSupport.java]]></name>
			<revision>1.18</revision>
			<prevrevision>1.17</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.18.2;


Changes with this submission:

51: Enhance EnumerationIterator IF to indicate iterator is already filtered.
52: Enumeration Pull may return zero objects when filtered.
53: Concurrent access to Enum context not protected

In addition the following items have been added:

1. EnumerationSupport, EnumerationHandler and EnumerationIterator have been
   completely reworked and simplified. An IteratorFactory interface has
   been added. Users wanting EnumerationSupport to handle their enumeration
   requests will need to port their iterator to the new EnumerationIterator
   interface, create an IteratorFactory and register their factory with
   EnumerationSupport.

   EnumerationSupport & EnumerationHandler are now able to support concurrent
   requests to a single resource URI.

   EnumerationSupport will now correctly detect "projections" in the filter
   and wrap the projected items within an XmlFragment. Projections are selections
   of a portion of a resource as opposed to the whole resource.

   EnumerationSupport will not filter or wrap in XmlFragment items returned from
   an iterator that returns true from EnumerationIterator.isFilter().

   The test User handler EnuerationUserHandler has been completely rewritten
   to now use the EnumerationSupport & is now split into UserEnumerationHandler,
   UserIteratorFactory & UserStore. They are used for testing and can be used
   as an example.

2. A filter unit test has been added. Several bugs were fixed in this area
   due to errors produced by this test. In particular, a namespace map was
   needed to be added to the client interfaces accepting a filter. This map
   contains the namespaces used in the filter expression. The namespaces are
   needed on the server side in order to properly evaluate the filter.
   Previously the namespaces for the document produced on the server side were
   passed to the XPath object. This was incorrect.

   Additionally NamespaceMap(Node node) was used on the server side to obtain
   the set of namespaces. This scanned the document from the specified node
   to the last child. This was incorrect. It needed to scan the document from
   the specified node to the root (opposite direction).

   Several support functions were added to process filtering on the server side.
   See below in item 3.

3. Several client and server interfaces have been enhanced to allow for easier
   handling of XmlFragment and filtering in general.
   EnumerationSupport has already been mentioned.

   EnumerationSupport has the added method:
   public static Filter createFilter(final Enumeration request)
   for easy creation of a Filter object from an Enumeration Request.
   EventingSupport & TransferExtensions have similar methods.

   BaseSupport has added two methods, createXmlFragment(List<Node>) &
   createXmlFragment(Nodelist) to ease creation of XmlFragment objects.
   TransferExtensions has done the same for use on the client side.

   The Filter interface was changed to return the filtered object as
   a Nodelist object rather than just a boolean. The Nodelist may contain
   projected elements if the filter contains a projection. The Nodelist
   can be diretly passed to BaseSupport.createXmlFragment(Nodelist)
   described above.

   Transfer.getResource(QName name) was added to easily get the resource object
   passed in Create, Update, & Delete requests.

   TransferExtensions.getResource(QName) overrides Transfer.getResource() and
   will check for XmlFragment objects if the QName object is not found.

   TransferExtensions.setFragmentGetResponse(
			final SOAPHeaderElement fragmentTransferHeader,
			final Object resource)

   has been added. This method will, using any registerd Filter handler,
   process the Fragment Transfer get against the provided resource object
   and set the result in the response. The resulting resource will
   automatically be wrapped into an XmlFragment for the caller and placed
   into the body of the repsonse. NOTE: results from applying the
   Fragment Transfer filter are always warpped in an XmlFragment by
   this method, whether the filter specified projections or not, as the caller
   specifically requested Fragment Transfer. This is not done for
   enumerations where the fragment transfer is mixed in with the wsman:filter.
   In the case of Enumerations if the filter selects the entire resource
   it is not wrapped in an XmlFragment.

   If setFragmentGetResponse() is called with fragmentTransferHeader set
   to null the method will simply put the resource object into the body of
   the response for the caller.

   NOTE: More work is needed on the client side to make, so I have listed/closed
         issue #24: Client fragment support should be simplified

4. To run the tests the "se/src/binding.properties" file MUST be edited first.
   Uncomment the line:

   com.sun.ws.management.xml.custom.packagenames = foo.test,com.hp.examples.ws.wsman.user

   This is needed for some tests to correctly execute.

5. I could NOT correctly build the JAXB Object Factory sources using the build.xml.
   All sources were built and compiled OK, but some tests failed. The reason is that
   attempts to add the "mustUnderstand" attribute to a header did not work. The
   call did not produce an error, but the header did not have the attribute. I
   duplicated this problem on two different system. Eventually I used the source
   that was previously built with JAXB and the tests then passed.

6. testMaxEnvelopeSizeTooBig() fails for test-jaxws. I do not know why. It is the
   only test that failed for me, though. I commented it out for my tests.]]></msg>
	</entry>
	<entry>
		<date>2007-01-11</date>
		<time>13:19</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/resources/schemas/addressing.xsd]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/resources/schemas/eventing.xsd]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/resources/schemas/identity.xsd]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/resources/schemas/management.xsd]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/resources/schemas/transfer.xsd]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1</prevrevision>
		</file>
		<msg><![CDATA[Wiseman on top of JAX-WS 2.0. Merge with jaxws_branch
Main changes:
- Removal of JAXB binaries from CVS.
  You will have to copy jaxws jars (you can download them from https://jax-ws.dev.java.net/jax-ws-20-fcs/) in lib/jaxws directory.
 (Planing to see how we can integrate the Maven java.net repository to express dependency we have on JAX-WS project.)
- Source code impact. Quite a lot but mainly rework of WsManServlet, introduced new WSManAgent and WSManJAXWSEndpoint.
  Rework of initialization, removal of various initialization() methods.
  New Message construction based on a SOAPMessage.
- Schemas location.They are now located in com.sun.ws.management.resources.schemas.
  They can be found as Resource from current ClassLoader. It is no more linked to Servlet.
  Custom schemas can still be provided thanks to ServletContext (as before)
  The schemas have been renamed, the ordering based on name has been replaced by a list in wiseman.properties file.
- JAXB Generation. Removal of the files from the repository.
  Generated file should be generated with the release of JAX-WS you selected.
  If we let the generated code in the CVS repository, we could ran into future compatibility problems.
  You have to call "generate-jaxb" manually.
- Build impact. New targets to build and deploy jax-ws compliant war (named wisman-jaxws.war)
- Tests. Removal of the automatic copy of JAXB/SAAJ jar in the tomcat /shared/lib.
  This is something that is nice but can easily break existing configuration.
  All existing tests and interop scenarii can be run with a Servlet based agent or with a JAX-WS one.
  Choose your target : "test" or "test-jaxws". The single difference between these 2 targets is deployment of the right war.
  J2SE deployment. WiseMan JAX-WS Endpoint can be deployed in JAX-WS http server (no more need of Servlet container),
  the build targets are currently commented due to Servlet dependency in Tests (If someone wants to rework a little bit handlers,
  we could have all tests passing indifferently on top of J2SE or J2EE!!!!). To play with such deployment, uncomment following
  ant build targets "deploy-j2se-jaxws" to start the agent side and "test-j2se-jaxws" to start the client side).
- misc: Commented the test.foo package from binding.properties.
- Trace. Removal of logging configuration file loading. Addition of a logging.properties file that is
  packaged in WEB-INF/classes in order to generate in <catalina-home>/logs a file that contains all wiseman traces.
  This is very useful when you are debugging tests. The generated file name is wiseman-<date of the day>.out]]></msg>
	</entry>
	<entry>
		<date>2007-01-14</date>
		<time>17:53</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/test/src/management/EnumerationExtensionsTest.java]]></name>
			<revision>1.10</revision>
			<prevrevision>1.9</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.10.2;


Changes with this submission:

51: Enhance EnumerationIterator IF to indicate iterator is already filtered.
52: Enumeration Pull may return zero objects when filtered.
53: Concurrent access to Enum context not protected

In addition the following items have been added:

1. EnumerationSupport, EnumerationHandler and EnumerationIterator have been
   completely reworked and simplified. An IteratorFactory interface has
   been added. Users wanting EnumerationSupport to handle their enumeration
   requests will need to port their iterator to the new EnumerationIterator
   interface, create an IteratorFactory and register their factory with
   EnumerationSupport.

   EnumerationSupport & EnumerationHandler are now able to support concurrent
   requests to a single resource URI.

   EnumerationSupport will now correctly detect "projections" in the filter
   and wrap the projected items within an XmlFragment. Projections are selections
   of a portion of a resource as opposed to the whole resource.

   EnumerationSupport will not filter or wrap in XmlFragment items returned from
   an iterator that returns true from EnumerationIterator.isFilter().

   The test User handler EnuerationUserHandler has been completely rewritten
   to now use the EnumerationSupport & is now split into UserEnumerationHandler,
   UserIteratorFactory & UserStore. They are used for testing and can be used
   as an example.

2. A filter unit test has been added. Several bugs were fixed in this area
   due to errors produced by this test. In particular, a namespace map was
   needed to be added to the client interfaces accepting a filter. This map
   contains the namespaces used in the filter expression. The namespaces are
   needed on the server side in order to properly evaluate the filter.
   Previously the namespaces for the document produced on the server side were
   passed to the XPath object. This was incorrect.

   Additionally NamespaceMap(Node node) was used on the server side to obtain
   the set of namespaces. This scanned the document from the specified node
   to the last child. This was incorrect. It needed to scan the document from
   the specified node to the root (opposite direction).

   Several support functions were added to process filtering on the server side.
   See below in item 3.

3. Several client and server interfaces have been enhanced to allow for easier
   handling of XmlFragment and filtering in general.
   EnumerationSupport has already been mentioned.

   EnumerationSupport has the added method:
   public static Filter createFilter(final Enumeration request)
   for easy creation of a Filter object from an Enumeration Request.
   EventingSupport & TransferExtensions have similar methods.

   BaseSupport has added two methods, createXmlFragment(List<Node>) &
   createXmlFragment(Nodelist) to ease creation of XmlFragment objects.
   TransferExtensions has done the same for use on the client side.

   The Filter interface was changed to return the filtered object as
   a Nodelist object rather than just a boolean. The Nodelist may contain
   projected elements if the filter contains a projection. The Nodelist
   can be diretly passed to BaseSupport.createXmlFragment(Nodelist)
   described above.

   Transfer.getResource(QName name) was added to easily get the resource object
   passed in Create, Update, & Delete requests.

   TransferExtensions.getResource(QName) overrides Transfer.getResource() and
   will check for XmlFragment objects if the QName object is not found.

   TransferExtensions.setFragmentGetResponse(
			final SOAPHeaderElement fragmentTransferHeader,
			final Object resource)

   has been added. This method will, using any registerd Filter handler,
   process the Fragment Transfer get against the provided resource object
   and set the result in the response. The resulting resource will
   automatically be wrapped into an XmlFragment for the caller and placed
   into the body of the repsonse. NOTE: results from applying the
   Fragment Transfer filter are always warpped in an XmlFragment by
   this method, whether the filter specified projections or not, as the caller
   specifically requested Fragment Transfer. This is not done for
   enumerations where the fragment transfer is mixed in with the wsman:filter.
   In the case of Enumerations if the filter selects the entire resource
   it is not wrapped in an XmlFragment.

   If setFragmentGetResponse() is called with fragmentTransferHeader set
   to null the method will simply put the resource object into the body of
   the response for the caller.

   NOTE: More work is needed on the client side to make, so I have listed/closed
         issue #24: Client fragment support should be simplified

4. To run the tests the "se/src/binding.properties" file MUST be edited first.
   Uncomment the line:

   com.sun.ws.management.xml.custom.packagenames = foo.test,com.hp.examples.ws.wsman.user

   This is needed for some tests to correctly execute.

5. I could NOT correctly build the JAXB Object Factory sources using the build.xml.
   All sources were built and compiled OK, but some tests failed. The reason is that
   attempts to add the "mustUnderstand" attribute to a header did not work. The
   call did not produce an error, but the header did not have the attribute. I
   duplicated this problem on two different system. Eventually I used the source
   that was previously built with JAXB and the tests then passed.

6. testMaxEnvelopeSizeTooBig() fails for test-jaxws. I do not know why. It is the
   only test that failed for me, though. I commented it out for my tests.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:22</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/resources/schemas/addressing.xsd]]></name>
			<revision>1.1.2.1</revision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/resources/schemas/management.xsd]]></name>
			<revision>1.1.2.1</revision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/resources/schemas/xml.xsd]]></name>
			<revision>1.1.2.1</revision>
		</file>
		<msg><![CDATA[Schema can be loaded as Resource in J2se or J2ee]]></msg>
	</entry>
	<entry>
		<date>2006-09-29</date>
		<time>15:04</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[client/src/com/sun/ws/management/client/ResourceFactory.java]]></name>
			<revision>1.7</revision>
			<prevrevision>1.6</prevrevision>
		</file>
		<msg><![CDATA[When an Identify fails on a timeout the logging message is now info, no severe. Requested by an end user.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>15:00</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/build.xml]]></name>
			<revision>1.42.2.4</revision>
			<prevrevision>1.42.2.3</prevrevision>
		</file>
		<msg><![CDATA[Merge with trunck]]></msg>
	</entry>
	<entry>
		<date>2007-01-22</date>
		<time>12:48</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[client/build.xml]]></name>
			<revision>1.5</revision>
		</file>
		<file>
			<name><![CDATA[se/test/etc/binding.properties]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[se/test/etc/logging.properties]]></name>
			<revision>1.1</revision>
		</file>
		<msg><![CDATA[Issue number:  64
Obtained from:
Submitted by:  denis_rachal
Reviewed by:

Build files updated to no longer include binding.properties or logging.properties in the wiseman jarfiles. Tes warfile is now built with the necessary bingind.properties and logging.properties files customized for testing.

XmlBinding has been changed to allow client to specify the bindging property on the command line at runtime, or through the binding.properties file in the classpath. Runtime property definition takes precedence:

com.sun.ws.management.xml.custom.packagenames=<comma separated list of packages>]]></msg>
	</entry>
	<entry>
		<date>2007-01-14</date>
		<time>17:52</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/handler/wsman/test/exec_Handler.java]]></name>
			<revision>1.12</revision>
			<prevrevision>1.11</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.12.2;


Changes with this submission:

51: Enhance EnumerationIterator IF to indicate iterator is already filtered.
52: Enumeration Pull may return zero objects when filtered.
53: Concurrent access to Enum context not protected

In addition the following items have been added:

1. EnumerationSupport, EnumerationHandler and EnumerationIterator have been
   completely reworked and simplified. An IteratorFactory interface has
   been added. Users wanting EnumerationSupport to handle their enumeration
   requests will need to port their iterator to the new EnumerationIterator
   interface, create an IteratorFactory and register their factory with
   EnumerationSupport.

   EnumerationSupport & EnumerationHandler are now able to support concurrent
   requests to a single resource URI.

   EnumerationSupport will now correctly detect "projections" in the filter
   and wrap the projected items within an XmlFragment. Projections are selections
   of a portion of a resource as opposed to the whole resource.

   EnumerationSupport will not filter or wrap in XmlFragment items returned from
   an iterator that returns true from EnumerationIterator.isFilter().

   The test User handler EnuerationUserHandler has been completely rewritten
   to now use the EnumerationSupport & is now split into UserEnumerationHandler,
   UserIteratorFactory & UserStore. They are used for testing and can be used
   as an example.

2. A filter unit test has been added. Several bugs were fixed in this area
   due to errors produced by this test. In particular, a namespace map was
   needed to be added to the client interfaces accepting a filter. This map
   contains the namespaces used in the filter expression. The namespaces are
   needed on the server side in order to properly evaluate the filter.
   Previously the namespaces for the document produced on the server side were
   passed to the XPath object. This was incorrect.

   Additionally NamespaceMap(Node node) was used on the server side to obtain
   the set of namespaces. This scanned the document from the specified node
   to the last child. This was incorrect. It needed to scan the document from
   the specified node to the root (opposite direction).

   Several support functions were added to process filtering on the server side.
   See below in item 3.

3. Several client and server interfaces have been enhanced to allow for easier
   handling of XmlFragment and filtering in general.
   EnumerationSupport has already been mentioned.

   EnumerationSupport has the added method:
   public static Filter createFilter(final Enumeration request)
   for easy creation of a Filter object from an Enumeration Request.
   EventingSupport & TransferExtensions have similar methods.

   BaseSupport has added two methods, createXmlFragment(List<Node>) &
   createXmlFragment(Nodelist) to ease creation of XmlFragment objects.
   TransferExtensions has done the same for use on the client side.

   The Filter interface was changed to return the filtered object as
   a Nodelist object rather than just a boolean. The Nodelist may contain
   projected elements if the filter contains a projection. The Nodelist
   can be diretly passed to BaseSupport.createXmlFragment(Nodelist)
   described above.

   Transfer.getResource(QName name) was added to easily get the resource object
   passed in Create, Update, & Delete requests.

   TransferExtensions.getResource(QName) overrides Transfer.getResource() and
   will check for XmlFragment objects if the QName object is not found.

   TransferExtensions.setFragmentGetResponse(
			final SOAPHeaderElement fragmentTransferHeader,
			final Object resource)

   has been added. This method will, using any registerd Filter handler,
   process the Fragment Transfer get against the provided resource object
   and set the result in the response. The resulting resource will
   automatically be wrapped into an XmlFragment for the caller and placed
   into the body of the repsonse. NOTE: results from applying the
   Fragment Transfer filter are always warpped in an XmlFragment by
   this method, whether the filter specified projections or not, as the caller
   specifically requested Fragment Transfer. This is not done for
   enumerations where the fragment transfer is mixed in with the wsman:filter.
   In the case of Enumerations if the filter selects the entire resource
   it is not wrapped in an XmlFragment.

   If setFragmentGetResponse() is called with fragmentTransferHeader set
   to null the method will simply put the resource object into the body of
   the response for the caller.

   NOTE: More work is needed on the client side to make, so I have listed/closed
         issue #24: Client fragment support should be simplified

4. To run the tests the "se/src/binding.properties" file MUST be edited first.
   Uncomment the line:

   com.sun.ws.management.xml.custom.packagenames = foo.test,com.hp.examples.ws.wsman.user

   This is needed for some tests to correctly execute.

5. I could NOT correctly build the JAXB Object Factory sources using the build.xml.
   All sources were built and compiled OK, but some tests failed. The reason is that
   attempts to add the "mustUnderstand" attribute to a header did not work. The
   call did not produce an error, but the header did not have the attribute. I
   duplicated this problem on two different system. Eventually I used the source
   that was previously built with JAXB and the tests then passed.

6. testMaxEnvelopeSizeTooBig() fails for test-jaxws. I do not know why. It is the
   only test that failed for me, though. I commented it out for my tests.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:22</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/resources/schemas/soap.xsd]]></name>
			<revision>1.1</revision>
			<prevrevision>1.1.2.1</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.1.2;
file soap.xsd was initially added on branch jaxws_branch.]]></msg>
	</entry>
	<entry>
		<date>2006-10-16</date>
		<time>14:50</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/framework/handlers/DefaultHandler.java]]></name>
			<revision>1.4</revision>
		</file>
		<msg><![CDATA[Issue number:  42
Refactored Handler Context all the way down the stack into all generated or framework based code and examples.=============================================================================

RCS file: /cvs/wiseman/se/src/com/sun/ws/management/framework/handlers/DelegatingHandler.java,v
Working file: se/src/com/sun/ws/management/framework/handlers/DelegatingHandler.java
head: 1.4
branch:
locks: strict
access list:
symbolic names:
	wiseman_0_6_release: 1.4.0.6
	Root_wiseman_0_6_release: 1.4
	wiseman_0_6_rc3: 1.4
	post_0_6_enh: 1.4.0.4
	Root_post_0_6_enh: 1.4
	pre_jaxws_10jan2007: 1.4
	jaxws_branch: 1.4.0.2
	Release_05: 1.3
	interop06: 1.3
keyword substitution: kv
total revisions: 4;	selected revisions: 1
description:]]></msg>
	</entry>
	<entry>
		<date>2007-01-14</date>
		<time>17:52</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/handler/org/dmtf/schemas/wbem/wscim/_1/cim_schema/_2/cim_numericsensor_Handler.java]]></name>
			<revision>1.8</revision>
			<prevrevision>1.7</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.8.2;


Changes with this submission:

51: Enhance EnumerationIterator IF to indicate iterator is already filtered.
52: Enumeration Pull may return zero objects when filtered.
53: Concurrent access to Enum context not protected

In addition the following items have been added:

1. EnumerationSupport, EnumerationHandler and EnumerationIterator have been
   completely reworked and simplified. An IteratorFactory interface has
   been added. Users wanting EnumerationSupport to handle their enumeration
   requests will need to port their iterator to the new EnumerationIterator
   interface, create an IteratorFactory and register their factory with
   EnumerationSupport.

   EnumerationSupport & EnumerationHandler are now able to support concurrent
   requests to a single resource URI.

   EnumerationSupport will now correctly detect "projections" in the filter
   and wrap the projected items within an XmlFragment. Projections are selections
   of a portion of a resource as opposed to the whole resource.

   EnumerationSupport will not filter or wrap in XmlFragment items returned from
   an iterator that returns true from EnumerationIterator.isFilter().

   The test User handler EnuerationUserHandler has been completely rewritten
   to now use the EnumerationSupport & is now split into UserEnumerationHandler,
   UserIteratorFactory & UserStore. They are used for testing and can be used
   as an example.

2. A filter unit test has been added. Several bugs were fixed in this area
   due to errors produced by this test. In particular, a namespace map was
   needed to be added to the client interfaces accepting a filter. This map
   contains the namespaces used in the filter expression. The namespaces are
   needed on the server side in order to properly evaluate the filter.
   Previously the namespaces for the document produced on the server side were
   passed to the XPath object. This was incorrect.

   Additionally NamespaceMap(Node node) was used on the server side to obtain
   the set of namespaces. This scanned the document from the specified node
   to the last child. This was incorrect. It needed to scan the document from
   the specified node to the root (opposite direction).

   Several support functions were added to process filtering on the server side.
   See below in item 3.

3. Several client and server interfaces have been enhanced to allow for easier
   handling of XmlFragment and filtering in general.
   EnumerationSupport has already been mentioned.

   EnumerationSupport has the added method:
   public static Filter createFilter(final Enumeration request)
   for easy creation of a Filter object from an Enumeration Request.
   EventingSupport & TransferExtensions have similar methods.

   BaseSupport has added two methods, createXmlFragment(List<Node>) &
   createXmlFragment(Nodelist) to ease creation of XmlFragment objects.
   TransferExtensions has done the same for use on the client side.

   The Filter interface was changed to return the filtered object as
   a Nodelist object rather than just a boolean. The Nodelist may contain
   projected elements if the filter contains a projection. The Nodelist
   can be diretly passed to BaseSupport.createXmlFragment(Nodelist)
   described above.

   Transfer.getResource(QName name) was added to easily get the resource object
   passed in Create, Update, & Delete requests.

   TransferExtensions.getResource(QName) overrides Transfer.getResource() and
   will check for XmlFragment objects if the QName object is not found.

   TransferExtensions.setFragmentGetResponse(
			final SOAPHeaderElement fragmentTransferHeader,
			final Object resource)

   has been added. This method will, using any registerd Filter handler,
   process the Fragment Transfer get against the provided resource object
   and set the result in the response. The resulting resource will
   automatically be wrapped into an XmlFragment for the caller and placed
   into the body of the repsonse. NOTE: results from applying the
   Fragment Transfer filter are always warpped in an XmlFragment by
   this method, whether the filter specified projections or not, as the caller
   specifically requested Fragment Transfer. This is not done for
   enumerations where the fragment transfer is mixed in with the wsman:filter.
   In the case of Enumerations if the filter selects the entire resource
   it is not wrapped in an XmlFragment.

   If setFragmentGetResponse() is called with fragmentTransferHeader set
   to null the method will simply put the resource object into the body of
   the response for the caller.

   NOTE: More work is needed on the client side to make, so I have listed/closed
         issue #24: Client fragment support should be simplified

4. To run the tests the "se/src/binding.properties" file MUST be edited first.
   Uncomment the line:

   com.sun.ws.management.xml.custom.packagenames = foo.test,com.hp.examples.ws.wsman.user

   This is needed for some tests to correctly execute.

5. I could NOT correctly build the JAXB Object Factory sources using the build.xml.
   All sources were built and compiled OK, but some tests failed. The reason is that
   attempts to add the "mustUnderstand" attribute to a header did not work. The
   call did not produce an error, but the header did not have the attribute. I
   duplicated this problem on two different system. Eventually I used the source
   that was previously built with JAXB and the tests then passed.

6. testMaxEnvelopeSizeTooBig() fails for test-jaxws. I do not know why. It is the
   only test that failed for me, though. I commented it out for my tests.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>14:55</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/nbproject/project.xml]]></name>
			<revision>1.6.2.1</revision>
		</file>
		<msg><![CDATA[List of dependencty for netbeans editor]]></msg>
	</entry>
	<entry>
		<date>2007-01-26</date>
		<time>15:11</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/test/gen-src/foo/test/Foo.java]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[se/test/gen-src/foo/test/ObjectFactory.java]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[se/test/gen-src/foo/test/This.java]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[se/test/gen-src/foo/test/package-info.java]]></name>
			<revision>1.1</revision>
		</file>
		<msg><![CDATA[Issue number:  61
Obtained from:
Submitted by:  denis_rachal
Reviewed by:

Templates for code generation have been updated to run with new Enumeration interfaces.

Samples programs updated to run with newer Enumeration interfaces.

Sample documentation updated.

Build project files updated for sample ant builds.

Eclipse project files added for sample builds.]]></msg>
	</entry>
	<entry>
		<date>2007-01-23</date>
		<time>07:23</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/test/src/com/sun/ws/management/server/handler/wsman/auth/userenum_Handler.java]]></name>
			<revision>1.3</revision>
			<prevrevision>1.2</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.3.2;
Fix for error in test.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:24</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/WSManReflectiveAgent.java]]></name>
			<revision>1.1</revision>
			<prevrevision>1.1.2.2</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.1.2;
file WSManReflectiveAgent.java was initially added on branch jaxws_branch.]]></msg>
	</entry>
	<entry>
		<date>2007-01-11</date>
		<time>13:20</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/etc/xsd/3-addressing.xsd]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1.2.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/etc/xsd/5-management.xsd]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1.2.1</prevrevision>
		</file>
		<msg><![CDATA[Wiseman on top of JAX-WS 2.0. Merge with jaxws_branch
Main changes:
- Removal of JAXB binaries from CVS.
  You will have to copy jaxws jars (you can download them from https://jax-ws.dev.java.net/jax-ws-20-fcs/) in lib/jaxws directory.
 (Planing to see how we can integrate the Maven java.net repository to express dependency we have on JAX-WS project.)
- Source code impact. Quite a lot but mainly rework of WsManServlet, introduced new WSManAgent and WSManJAXWSEndpoint.
  Rework of initialization, removal of various initialization() methods.
  New Message construction based on a SOAPMessage.
- Schemas location.They are now located in com.sun.ws.management.resources.schemas.
  They can be found as Resource from current ClassLoader. It is no more linked to Servlet.
  Custom schemas can still be provided thanks to ServletContext (as before)
  The schemas have been renamed, the ordering based on name has been replaced by a list in wiseman.properties file.
- JAXB Generation. Removal of the files from the repository.
  Generated file should be generated with the release of JAX-WS you selected.
  If we let the generated code in the CVS repository, we could ran into future compatibility problems.
  You have to call "generate-jaxb" manually.
- Build impact. New targets to build and deploy jax-ws compliant war (named wisman-jaxws.war)
- Tests. Removal of the automatic copy of JAXB/SAAJ jar in the tomcat /shared/lib.
  This is something that is nice but can easily break existing configuration.
  All existing tests and interop scenarii can be run with a Servlet based agent or with a JAX-WS one.
  Choose your target : "test" or "test-jaxws". The single difference between these 2 targets is deployment of the right war.
  J2SE deployment. WiseMan JAX-WS Endpoint can be deployed in JAX-WS http server (no more need of Servlet container),
  the build targets are currently commented due to Servlet dependency in Tests (If someone wants to rework a little bit handlers,
  we could have all tests passing indifferently on top of J2SE or J2EE!!!!). To play with such deployment, uncomment following
  ant build targets "deploy-j2se-jaxws" to start the agent side and "test-j2se-jaxws" to start the client side).
- misc: Commented the test.foo package from binding.properties.
- Trace. Removal of logging configuration file loading. Addition of a logging.properties file that is
  packaged in WEB-INF/classes in order to generate in <catalina-home>/logs a file that contains all wiseman traces.
  This is very useful when you are debugging tests. The generated file name is wiseman-<date of the day>.out]]></msg>
	</entry>
	<entry>
		<date>2007-01-14</date>
		<time>17:53</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/test/src/com/sun/ws/management/server/handler/wsman/auth/userenum_Handler.java]]></name>
			<revision>1.2</revision>
			<prevrevision>1.3.2.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/test/src/framework/models/FileEnumerationHandler.java]]></name>
			<revision>1.3</revision>
		</file>
		<file>
			<name><![CDATA[se/test/src/framework/models/FileEnumerationIterator.java]]></name>
			<revision>1.6</revision>
		</file>
		<file>
			<name><![CDATA[se/test/src/framework/models/FileIteratorFactory.java]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[se/test/src/framework/models/UserEnumerationHandler.java]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[se/test/src/framework/models/UserHandler.java]]></name>
			<revision>1.7</revision>
			<prevrevision>1.6</prevrevision>
		</file>
		<msg><![CDATA[

Changes with this submission:

51: Enhance EnumerationIterator IF to indicate iterator is already filtered.
52: Enumeration Pull may return zero objects when filtered.
53: Concurrent access to Enum context not protected

In addition the following items have been added:

1. EnumerationSupport, EnumerationHandler and EnumerationIterator have been
   completely reworked and simplified. An IteratorFactory interface has
   been added. Users wanting EnumerationSupport to handle their enumeration
   requests will need to port their iterator to the new EnumerationIterator
   interface, create an IteratorFactory and register their factory with
   EnumerationSupport.

   EnumerationSupport & EnumerationHandler are now able to support concurrent
   requests to a single resource URI.

   EnumerationSupport will now correctly detect "projections" in the filter
   and wrap the projected items within an XmlFragment. Projections are selections
   of a portion of a resource as opposed to the whole resource.

   EnumerationSupport will not filter or wrap in XmlFragment items returned from
   an iterator that returns true from EnumerationIterator.isFilter().

   The test User handler EnuerationUserHandler has been completely rewritten
   to now use the EnumerationSupport & is now split into UserEnumerationHandler,
   UserIteratorFactory & UserStore. They are used for testing and can be used
   as an example.

2. A filter unit test has been added. Several bugs were fixed in this area
   due to errors produced by this test. In particular, a namespace map was
   needed to be added to the client interfaces accepting a filter. This map
   contains the namespaces used in the filter expression. The namespaces are
   needed on the server side in order to properly evaluate the filter.
   Previously the namespaces for the document produced on the server side were
   passed to the XPath object. This was incorrect.

   Additionally NamespaceMap(Node node) was used on the server side to obtain
   the set of namespaces. This scanned the document from the specified node
   to the last child. This was incorrect. It needed to scan the document from
   the specified node to the root (opposite direction).

   Several support functions were added to process filtering on the server side.
   See below in item 3.

3. Several client and server interfaces have been enhanced to allow for easier
   handling of XmlFragment and filtering in general.
   EnumerationSupport has already been mentioned.

   EnumerationSupport has the added method:
   public static Filter createFilter(final Enumeration request)
   for easy creation of a Filter object from an Enumeration Request.
   EventingSupport & TransferExtensions have similar methods.

   BaseSupport has added two methods, createXmlFragment(List<Node>) &
   createXmlFragment(Nodelist) to ease creation of XmlFragment objects.
   TransferExtensions has done the same for use on the client side.

   The Filter interface was changed to return the filtered object as
   a Nodelist object rather than just a boolean. The Nodelist may contain
   projected elements if the filter contains a projection. The Nodelist
   can be diretly passed to BaseSupport.createXmlFragment(Nodelist)
   described above.

   Transfer.getResource(QName name) was added to easily get the resource object
   passed in Create, Update, & Delete requests.

   TransferExtensions.getResource(QName) overrides Transfer.getResource() and
   will check for XmlFragment objects if the QName object is not found.

   TransferExtensions.setFragmentGetResponse(
			final SOAPHeaderElement fragmentTransferHeader,
			final Object resource)

   has been added. This method will, using any registerd Filter handler,
   process the Fragment Transfer get against the provided resource object
   and set the result in the response. The resulting resource will
   automatically be wrapped into an XmlFragment for the caller and placed
   into the body of the repsonse. NOTE: results from applying the
   Fragment Transfer filter are always warpped in an XmlFragment by
   this method, whether the filter specified projections or not, as the caller
   specifically requested Fragment Transfer. This is not done for
   enumerations where the fragment transfer is mixed in with the wsman:filter.
   In the case of Enumerations if the filter selects the entire resource
   it is not wrapped in an XmlFragment.

   If setFragmentGetResponse() is called with fragmentTransferHeader set
   to null the method will simply put the resource object into the body of
   the response for the caller.

   NOTE: More work is needed on the client side to make, so I have listed/closed
         issue #24: Client fragment support should be simplified

4. To run the tests the "se/src/binding.properties" file MUST be edited first.
   Uncomment the line:

   com.sun.ws.management.xml.custom.packagenames = foo.test,com.hp.examples.ws.wsman.user

   This is needed for some tests to correctly execute.

5. I could NOT correctly build the JAXB Object Factory sources using the build.xml.
   All sources were built and compiled OK, but some tests failed. The reason is that
   attempts to add the "mustUnderstand" attribute to a header did not work. The
   call did not produce an error, but the header did not have the attribute. I
   duplicated this problem on two different system. Eventually I used the source
   that was previously built with JAXB and the tests then passed.

6. testMaxEnvelopeSizeTooBig() fails for test-jaxws. I do not know why. It is the
   only test that failed for me, though. I commented it out for my tests.]]></msg>
	</entry>
	<entry>
		<date>2007-01-14</date>
		<time>17:52</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/BaseContext.java]]></name>
			<revision>1.9</revision>
			<prevrevision>1.8</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.9.2;


Changes with this submission:

51: Enhance EnumerationIterator IF to indicate iterator is already filtered.
52: Enumeration Pull may return zero objects when filtered.
53: Concurrent access to Enum context not protected

In addition the following items have been added:

1. EnumerationSupport, EnumerationHandler and EnumerationIterator have been
   completely reworked and simplified. An IteratorFactory interface has
   been added. Users wanting EnumerationSupport to handle their enumeration
   requests will need to port their iterator to the new EnumerationIterator
   interface, create an IteratorFactory and register their factory with
   EnumerationSupport.

   EnumerationSupport & EnumerationHandler are now able to support concurrent
   requests to a single resource URI.

   EnumerationSupport will now correctly detect "projections" in the filter
   and wrap the projected items within an XmlFragment. Projections are selections
   of a portion of a resource as opposed to the whole resource.

   EnumerationSupport will not filter or wrap in XmlFragment items returned from
   an iterator that returns true from EnumerationIterator.isFilter().

   The test User handler EnuerationUserHandler has been completely rewritten
   to now use the EnumerationSupport & is now split into UserEnumerationHandler,
   UserIteratorFactory & UserStore. They are used for testing and can be used
   as an example.

2. A filter unit test has been added. Several bugs were fixed in this area
   due to errors produced by this test. In particular, a namespace map was
   needed to be added to the client interfaces accepting a filter. This map
   contains the namespaces used in the filter expression. The namespaces are
   needed on the server side in order to properly evaluate the filter.
   Previously the namespaces for the document produced on the server side were
   passed to the XPath object. This was incorrect.

   Additionally NamespaceMap(Node node) was used on the server side to obtain
   the set of namespaces. This scanned the document from the specified node
   to the last child. This was incorrect. It needed to scan the document from
   the specified node to the root (opposite direction).

   Several support functions were added to process filtering on the server side.
   See below in item 3.

3. Several client and server interfaces have been enhanced to allow for easier
   handling of XmlFragment and filtering in general.
   EnumerationSupport has already been mentioned.

   EnumerationSupport has the added method:
   public static Filter createFilter(final Enumeration request)
   for easy creation of a Filter object from an Enumeration Request.
   EventingSupport & TransferExtensions have similar methods.

   BaseSupport has added two methods, createXmlFragment(List<Node>) &
   createXmlFragment(Nodelist) to ease creation of XmlFragment objects.
   TransferExtensions has done the same for use on the client side.

   The Filter interface was changed to return the filtered object as
   a Nodelist object rather than just a boolean. The Nodelist may contain
   projected elements if the filter contains a projection. The Nodelist
   can be diretly passed to BaseSupport.createXmlFragment(Nodelist)
   described above.

   Transfer.getResource(QName name) was added to easily get the resource object
   passed in Create, Update, & Delete requests.

   TransferExtensions.getResource(QName) overrides Transfer.getResource() and
   will check for XmlFragment objects if the QName object is not found.

   TransferExtensions.setFragmentGetResponse(
			final SOAPHeaderElement fragmentTransferHeader,
			final Object resource)

   has been added. This method will, using any registerd Filter handler,
   process the Fragment Transfer get against the provided resource object
   and set the result in the response. The resulting resource will
   automatically be wrapped into an XmlFragment for the caller and placed
   into the body of the repsonse. NOTE: results from applying the
   Fragment Transfer filter are always warpped in an XmlFragment by
   this method, whether the filter specified projections or not, as the caller
   specifically requested Fragment Transfer. This is not done for
   enumerations where the fragment transfer is mixed in with the wsman:filter.
   In the case of Enumerations if the filter selects the entire resource
   it is not wrapped in an XmlFragment.

   If setFragmentGetResponse() is called with fragmentTransferHeader set
   to null the method will simply put the resource object into the body of
   the response for the caller.

   NOTE: More work is needed on the client side to make, so I have listed/closed
         issue #24: Client fragment support should be simplified

4. To run the tests the "se/src/binding.properties" file MUST be edited first.
   Uncomment the line:

   com.sun.ws.management.xml.custom.packagenames = foo.test,com.hp.examples.ws.wsman.user

   This is needed for some tests to correctly execute.

5. I could NOT correctly build the JAXB Object Factory sources using the build.xml.
   All sources were built and compiled OK, but some tests failed. The reason is that
   attempts to add the "mustUnderstand" attribute to a header did not work. The
   call did not produce an error, but the header did not have the attribute. I
   duplicated this problem on two different system. Eventually I used the source
   that was previously built with JAXB and the tests then passed.

6. testMaxEnvelopeSizeTooBig() fails for test-jaxws. I do not know why. It is the
   only test that failed for me, though. I commented it out for my tests.]]></msg>
	</entry>
	<entry>
		<date>2006-12-18</date>
		<time>20:36</time>
		<author><![CDATA[nbeers]]></author>
		<file>
			<name><![CDATA[client/src/com/sun/ws/management/client/impl/EnumerationResourceImpl.java]]></name>
			<revision>1.16</revision>
			<prevrevision>1.15</prevrevision>
		</file>
		<file>
			<name><![CDATA[client/src/com/sun/ws/management/client/impl/EnumerationResourceStateImpl.java]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[se/test/src/framework/models/EnumerationUserHandler.java]]></name>
			<revision>1.9</revision>
			<prevrevision>1.8</prevrevision>
		</file>
		<msg><![CDATA[Updated for issue 14 (Fragment support for Enumerations) and issue 45 (Client support for optimized enumerations ).  Added client test cases in support of both of these issues.]]></msg>
	</entry>
	<entry>
		<date>2006-12-20</date>
		<time>08:15</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[client/test/com/sun/ws/management/client/impl/ResourceImplTest.java]]></name>
			<revision>1.17</revision>
			<prevrevision>1.16</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/binding.properties]]></name>
			<revision>1.3</revision>
			<prevrevision>1.2.2.2</prevrevision>
		</file>
		<msg><![CDATA[Issue number:  47
Obtained from:
Submitted by:
Reviewed by:

Changed test to use custom packages.]]></msg>
	</entry>
	<entry>
		<date>2006-10-16</date>
		<time>14:50</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/framework/enumeration/Enumeratable.java]]></name>
			<revision>1.4</revision>
			<prevrevision>1.8</prevrevision>
		</file>
		<msg><![CDATA[Issue number:  42
Refactored Handler Context all the way down the stack into all generated or framework based code and examples.=============================================================================

RCS file: /cvs/wiseman/se/src/com/sun/ws/management/framework/enumeration/EnumerationHandler.java,v
Working file: se/src/com/sun/ws/management/framework/enumeration/EnumerationHandler.java
head: 1.8
branch:
locks: strict
access list:
symbolic names:
	wiseman_0_6_release: 1.7.0.4
	Root_wiseman_0_6_release: 1.7
	wiseman_0_6_rc3: 1.7
	post_0_6_enh: 1.7.0.2
	Root_post_0_6_enh: 1.7
	pre_jaxws_10jan2007: 1.6
	jaxws_branch: 1.6.0.2
	Release_05: 1.5
	interop06: 1.4
keyword substitution: kv
total revisions: 9;	selected revisions: 4
description:]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:22</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/resources/schemas/identity.xsd]]></name>
			<revision>1.1</revision>
			<prevrevision>1.1.2.1</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.1.2;
file identity.xsd was initially added on branch jaxws_branch.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:21</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/binding.properties]]></name>
			<revision>1.2.2.1</revision>
			<prevrevision>1.6.2.1</prevrevision>
		</file>
		<msg><![CDATA[Commented foo.test package]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:24</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/WSManJAXWSEndpoint.java]]></name>
			<revision>1.1</revision>
			<prevrevision>1.1.2.2</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.1.2;
file WSManJAXWSEndpoint.java was initially added on branch jaxws_branch.]]></msg>
	</entry>
	<entry>
		<date>2006-12-12</date>
		<time>19:40</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[www/index.html]]></name>
			<revision>1.24</revision>
			<prevrevision>1.23</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.24.4;
The date headers were not aligned in my previous commit. This should fix that.]]></msg>
	</entry>
	<entry>
		<date>2006-12-18</date>
		<time>20:36</time>
		<author><![CDATA[nbeers]]></author>
		<file>
			<name><![CDATA[client/src/com/sun/ws/management/client/EnumerationResourceState.java]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[client/test/com/sun/ws/management/client/impl/ResourceImplTest.java]]></name>
			<revision>1.15</revision>
			<prevrevision>1.14</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/EnumerationSupport.java]]></name>
			<revision>1.38</revision>
			<prevrevision>1.37</prevrevision>
		</file>
		<msg><![CDATA[Updated for issue 14 (Fragment support for Enumerations) and issue 45 (Client support for optimized enumerations ).  Added client test cases in support of both of these issues.]]></msg>
	</entry>
	<entry>
		<date>2007-01-29</date>
		<time>16:48</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[tools/src/com/sun/ws/management/tools/Xsd2WsdlTask.java]]></name>
			<revision>1.4</revision>
			<prevrevision>1.3</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.4.2;
Issue number:  68
Obtained from:
Submitted by:  denis_rachal
Reviewed by:

Updated sample client to use a single handler and new generated source files.]]></msg>
	</entry>
	<entry>
		<date>2006-12-13</date>
		<time>09:11</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/EnumerationSupport.java]]></name>
			<revision>1.37</revision>
			<prevrevision>1.36</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.37.2;
Issue number:  18
Obtained from:
Submitted by:  akhilarora
Reviewed by:

Cleaned up code in Enumeration & EnumerationExtensions. All WS Management extensions are now located in EnumerationExtensions. Enumeration is for WS Enumeration without the WS Management extensions.]]></msg>
	</entry>
	<entry>
		<date>2006-10-09</date>
		<time>18:30</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[client/src/com/sun/ws/management/client/ResourceFactory.java]]></name>
			<revision>1.8</revision>
			<prevrevision>1.7</prevrevision>
		</file>
		<msg><![CDATA[Client now autoinitalizes wiseman stack when a resource if created in the factory via a static block.]]></msg>
	</entry>
	<entry>
		<date>2007-01-11</date>
		<time>13:19</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/README-JAXWS]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[se/etc/jaxws/sun-jaxws.xml]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1</prevrevision>
		</file>
		<msg><![CDATA[Wiseman on top of JAX-WS 2.0. Merge with jaxws_branch
Main changes:
- Removal of JAXB binaries from CVS.
  You will have to copy jaxws jars (you can download them from https://jax-ws.dev.java.net/jax-ws-20-fcs/) in lib/jaxws directory.
 (Planing to see how we can integrate the Maven java.net repository to express dependency we have on JAX-WS project.)
- Source code impact. Quite a lot but mainly rework of WsManServlet, introduced new WSManAgent and WSManJAXWSEndpoint.
  Rework of initialization, removal of various initialization() methods.
  New Message construction based on a SOAPMessage.
- Schemas location.They are now located in com.sun.ws.management.resources.schemas.
  They can be found as Resource from current ClassLoader. It is no more linked to Servlet.
  Custom schemas can still be provided thanks to ServletContext (as before)
  The schemas have been renamed, the ordering based on name has been replaced by a list in wiseman.properties file.
- JAXB Generation. Removal of the files from the repository.
  Generated file should be generated with the release of JAX-WS you selected.
  If we let the generated code in the CVS repository, we could ran into future compatibility problems.
  You have to call "generate-jaxb" manually.
- Build impact. New targets to build and deploy jax-ws compliant war (named wisman-jaxws.war)
- Tests. Removal of the automatic copy of JAXB/SAAJ jar in the tomcat /shared/lib.
  This is something that is nice but can easily break existing configuration.
  All existing tests and interop scenarii can be run with a Servlet based agent or with a JAX-WS one.
  Choose your target : "test" or "test-jaxws". The single difference between these 2 targets is deployment of the right war.
  J2SE deployment. WiseMan JAX-WS Endpoint can be deployed in JAX-WS http server (no more need of Servlet container),
  the build targets are currently commented due to Servlet dependency in Tests (If someone wants to rework a little bit handlers,
  we could have all tests passing indifferently on top of J2SE or J2EE!!!!). To play with such deployment, uncomment following
  ant build targets "deploy-j2se-jaxws" to start the agent side and "test-j2se-jaxws" to start the client side).
- misc: Commented the test.foo package from binding.properties.
- Trace. Removal of logging configuration file loading. Addition of a logging.properties file that is
  packaged in WEB-INF/classes in order to generate in <catalina-home>/logs a file that contains all wiseman traces.
  This is very useful when you are debugging tests. The generated file name is wiseman-<date of the day>.out]]></msg>
	</entry>
	<entry>
		<date>2007-01-14</date>
		<time>17:55</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[build.xml]]></name>
			<revision>1.8</revision>
		</file>
		<file>
			<name><![CDATA[client/src/com/sun/ws/management/client/EnumerableResource.java]]></name>
			<revision>1.5</revision>
		</file>
		<file>
			<name><![CDATA[client/src/com/sun/ws/management/client/ResourceFactory.java]]></name>
			<revision>1.11</revision>
			<prevrevision>1.10</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/build.xml]]></name>
			<revision>1.44</revision>
			<prevrevision>1.43</prevrevision>
		</file>
		<msg><![CDATA[

Changes with this submission:

51: Enhance EnumerationIterator IF to indicate iterator is already filtered.
52: Enumeration Pull may return zero objects when filtered.
53: Concurrent access to Enum context not protected

In addition the following items have been added:

1. EnumerationSupport, EnumerationHandler and EnumerationIterator have been
   completely reworked and simplified. An IteratorFactory interface has
   been added. Users wanting EnumerationSupport to handle their enumeration
   requests will need to port their iterator to the new EnumerationIterator
   interface, create an IteratorFactory and register their factory with
   EnumerationSupport.

   EnumerationSupport & EnumerationHandler are now able to support concurrent
   requests to a single resource URI.

   EnumerationSupport will now correctly detect "projections" in the filter
   and wrap the projected items within an XmlFragment. Projections are selections
   of a portion of a resource as opposed to the whole resource.

   EnumerationSupport will not filter or wrap in XmlFragment items returned from
   an iterator that returns true from EnumerationIterator.isFilter().

   The test User handler EnuerationUserHandler has been completely rewritten
   to now use the EnumerationSupport & is now split into UserEnumerationHandler,
   UserIteratorFactory & UserStore. They are used for testing and can be used
   as an example.

2. A filter unit test has been added. Several bugs were fixed in this area
   due to errors produced by this test. In particular, a namespace map was
   needed to be added to the client interfaces accepting a filter. This map
   contains the namespaces used in the filter expression. The namespaces are
   needed on the server side in order to properly evaluate the filter.
   Previously the namespaces for the document produced on the server side were
   passed to the XPath object. This was incorrect.

   Additionally NamespaceMap(Node node) was used on the server side to obtain
   the set of namespaces. This scanned the document from the specified node
   to the last child. This was incorrect. It needed to scan the document from
   the specified node to the root (opposite direction).

   Several support functions were added to process filtering on the server side.
   See below in item 3.

3. Several client and server interfaces have been enhanced to allow for easier
   handling of XmlFragment and filtering in general.
   EnumerationSupport has already been mentioned.

   EnumerationSupport has the added method:
   public static Filter createFilter(final Enumeration request)
   for easy creation of a Filter object from an Enumeration Request.
   EventingSupport & TransferExtensions have similar methods.

   BaseSupport has added two methods, createXmlFragment(List<Node>) &
   createXmlFragment(Nodelist) to ease creation of XmlFragment objects.
   TransferExtensions has done the same for use on the client side.

   The Filter interface was changed to return the filtered object as
   a Nodelist object rather than just a boolean. The Nodelist may contain
   projected elements if the filter contains a projection. The Nodelist
   can be diretly passed to BaseSupport.createXmlFragment(Nodelist)
   described above.

   Transfer.getResource(QName name) was added to easily get the resource object
   passed in Create, Update, & Delete requests.

   TransferExtensions.getResource(QName) overrides Transfer.getResource() and
   will check for XmlFragment objects if the QName object is not found.

   TransferExtensions.setFragmentGetResponse(
			final SOAPHeaderElement fragmentTransferHeader,
			final Object resource)

   has been added. This method will, using any registerd Filter handler,
   process the Fragment Transfer get against the provided resource object
   and set the result in the response. The resulting resource will
   automatically be wrapped into an XmlFragment for the caller and placed
   into the body of the repsonse. NOTE: results from applying the
   Fragment Transfer filter are always warpped in an XmlFragment by
   this method, whether the filter specified projections or not, as the caller
   specifically requested Fragment Transfer. This is not done for
   enumerations where the fragment transfer is mixed in with the wsman:filter.
   In the case of Enumerations if the filter selects the entire resource
   it is not wrapped in an XmlFragment.

   If setFragmentGetResponse() is called with fragmentTransferHeader set
   to null the method will simply put the resource object into the body of
   the response for the caller.

   NOTE: More work is needed on the client side to make, so I have listed/closed
         issue #24: Client fragment support should be simplified

4. To run the tests the "se/src/binding.properties" file MUST be edited first.
   Uncomment the line:

   com.sun.ws.management.xml.custom.packagenames = foo.test,com.hp.examples.ws.wsman.user

   This is needed for some tests to correctly execute.

5. I could NOT correctly build the JAXB Object Factory sources using the build.xml.
   All sources were built and compiled OK, but some tests failed. The reason is that
   attempts to add the "mustUnderstand" attribute to a header did not work. The
   call did not produce an error, but the header did not have the attribute. I
   duplicated this problem on two different system. Eventually I used the source
   that was previously built with JAXB and the tests then passed.

6. testMaxEnvelopeSizeTooBig() fails for test-jaxws. I do not know why. It is the
   only test that failed for me, though. I commented it out for my tests.]]></msg>
	</entry>
	<entry>
		<date>2006-10-16</date>
		<time>14:50</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[tools/src/templates/EnumerationSupport.vm]]></name>
			<revision>1.4</revision>
			<prevrevision>1.5</prevrevision>
		</file>
		<msg><![CDATA[Issue number:  42
Refactored Handler Context all the way down the stack into all generated or framework based code and examples.=============================================================================

RCS file: /cvs/wiseman/tools/src/templates/Handler.vm,v
Working file: tools/src/templates/Handler.vm
head: 1.5
branch:
locks: strict
access list:
symbolic names:
	wiseman_0_6_release: 1.4.0.4
	Root_wiseman_0_6_release: 1.4
	wiseman_0_6_rc3: 1.4
	post_0_6_enh: 1.4.0.2
	Root_post_0_6_enh: 1.4
	pre_jaxws_10jan2007: 1.3
	Release_05: 1.2
	interop06: 1.1
keyword substitution: kv
total revisions: 6;	selected revisions: 4
description:]]></msg>
	</entry>
	<entry>
		<date>2007-01-22</date>
		<time>12:58</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/etc/logging.properties]]></name>
			<revision>1.3</revision>
			<prevrevision>1.2</prevrevision>
		</file>
		<msg><![CDATA[Issue number:  64
Obtained from:
Submitted by:
Reviewed by:

Moved to se/test/etc.]]></msg>
	</entry>
	<entry>
		<date>2006-10-16</date>
		<time>14:50</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/framework/transfer/TransferSupport.java]]></name>
			<revision>1.4</revision>
		</file>
		<msg><![CDATA[Issue number:  42
Refactored Handler Context all the way down the stack into all generated or framework based code and examples.=============================================================================

RCS file: /cvs/wiseman/se/src/com/sun/ws/management/identify/Identify.java,v
Working file: se/src/com/sun/ws/management/identify/Identify.java
head: 1.3
branch:
locks: strict
access list:
symbolic names:
	wiseman_0_6_release: 1.3.0.6
	Root_wiseman_0_6_release: 1.3
	wiseman_0_6_rc3: 1.3
	post_0_6_enh: 1.3.0.4
	Root_post_0_6_enh: 1.3
	pre_jaxws_10jan2007: 1.3
	jaxws_branch: 1.3.0.2
	Release_05: 1.3
	interop06: 1.3
keyword substitution: kv
total revisions: 3;	selected revisions: 0
description:]]></msg>
	</entry>
	<entry>
		<date>2007-01-29</date>
		<time>16:48</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[tools/samples/trafficlight_client/src/net/java/dev/wiseman/traffic/light/client/LightPropertiesJPanel.java]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[tools/samples/trafficlight_client/src/net/java/dev/wiseman/traffic/light/client/TrafficAuthenticator.java]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[tools/samples/trafficlight_client/src/net/java/dev/wiseman/traffic/light/client/TrafficClientApp.java]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[tools/samples/trafficlight_server/src/com/sun/ws/management/server/handler/net/java/dev/wiseman/resources/traffic/_1/light_Handler.java]]></name>
			<revision>1.1</revision>
		</file>
		<msg><![CDATA[Issue number:  68
Obtained from:
Submitted by:  denis_rachal
Reviewed by:

Updated sample client to use a single handler and new generated source files.]]></msg>
	</entry>
	<entry>
		<date>2006-10-27</date>
		<time>18:53</time>
		<author><![CDATA[nbeers]]></author>
		<file>
			<name><![CDATA[client/src/com/sun/ws/management/client/impl/EnumerationResourceImpl.java]]></name>
			<revision>1.14</revision>
			<prevrevision>1.13</prevrevision>
		</file>
		<file>
			<name><![CDATA[client/test/com/sun/ws/management/client/impl/ResourceImplTest.java]]></name>
			<revision>1.14</revision>
			<prevrevision>1.13</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/test/src/framework/models/EnumerationUserHandler.java]]></name>
			<revision>1.7</revision>
			<prevrevision>1.6</prevrevision>
		</file>
		<msg><![CDATA[Updated for issue 34 (Enumeration Count support for the Client Toolkit). The enumerate and enumerate:pull operations in the client toolkit now support the RequestTotalItemsCountEstimate option.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:28</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/test/src/server/JAXWSAgent.java]]></name>
			<revision>1.1.2.1</revision>
		</file>
		<msg><![CDATA[JAX-WS J2se Deployment Agent.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:49</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/project.properties]]></name>
			<revision>1.9.2.1</revision>
		</file>
		<msg><![CDATA[JAX-WS support]]></msg>
	</entry>
	<entry>
		<date>2006-10-16</date>
		<time>14:50</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/framework/handlers/DefaultHandler.java]]></name>
			<revision>1.4</revision>
			<prevrevision>1.2</prevrevision>
		</file>
		<msg><![CDATA[Issue number:  42
Refactored Handler Context all the way down the stack into all generated or framework based code and examples.=============================================================================

RCS file: /cvs/wiseman/se/src/com/sun/ws/management/framework/handlers/ResourceHandler.java,v
Working file: se/src/com/sun/ws/management/framework/handlers/ResourceHandler.java
head: 1.2
branch:
locks: strict
access list:
symbolic names:
	post_0_6_enh: 1.1.0.2
keyword substitution: kv
total revisions: 3;	selected revisions: 3
description:]]></msg>
	</entry>
	<entry>
		<date>2006-11-15</date>
		<time>15:06</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/transport/HttpClient.java]]></name>
			<revision>1.16</revision>
			<prevrevision>1.15</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.16.4;
When a request comes in with no Content-type an NPE was being returned instead of a COntent-Type not acceptable message. We now chech for this condition.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:22</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/resources/schemas/enumeration.xsd]]></name>
			<revision>1.1</revision>
			<prevrevision>1.1.2.1</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.1.2;
file enumeration.xsd was initially added on branch jaxws_branch.]]></msg>
	</entry>
	<entry>
		<date>2006-11-02</date>
		<time>20:46</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[se/etc/resource-handler-config.xml]]></name>
			<revision>1.1</revision>
		</file>
		<msg><![CDATA[Build.xml modified to include a sample handler configuration file when the binary is built.]]></msg>
	</entry>
	<entry>
		<date>2007-01-18</date>
		<time>08:43</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/BaseSupport.java]]></name>
			<revision>1.13</revision>
			<prevrevision>1.12</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.13.2;
Issue number:  63
Obtained from:
Submitted by:  denis_rachal
Reviewed by:

Code changed in BaseSupport as described in defect. Filter test updated to add test for text() function.]]></msg>
	</entry>
	<entry>
		<date>2007-01-11</date>
		<time>13:20</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/etc/xsd/3-identity.xsd]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1.2.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/etc/xsd/4-eventing.xsd]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1.2.1</prevrevision>
		</file>
		<msg><![CDATA[Wiseman on top of JAX-WS 2.0. Merge with jaxws_branch
Main changes:
- Removal of JAXB binaries from CVS.
  You will have to copy jaxws jars (you can download them from https://jax-ws.dev.java.net/jax-ws-20-fcs/) in lib/jaxws directory.
 (Planing to see how we can integrate the Maven java.net repository to express dependency we have on JAX-WS project.)
- Source code impact. Quite a lot but mainly rework of WsManServlet, introduced new WSManAgent and WSManJAXWSEndpoint.
  Rework of initialization, removal of various initialization() methods.
  New Message construction based on a SOAPMessage.
- Schemas location.They are now located in com.sun.ws.management.resources.schemas.
  They can be found as Resource from current ClassLoader. It is no more linked to Servlet.
  Custom schemas can still be provided thanks to ServletContext (as before)
  The schemas have been renamed, the ordering based on name has been replaced by a list in wiseman.properties file.
- JAXB Generation. Removal of the files from the repository.
  Generated file should be generated with the release of JAX-WS you selected.
  If we let the generated code in the CVS repository, we could ran into future compatibility problems.
  You have to call "generate-jaxb" manually.
- Build impact. New targets to build and deploy jax-ws compliant war (named wisman-jaxws.war)
- Tests. Removal of the automatic copy of JAXB/SAAJ jar in the tomcat /shared/lib.
  This is something that is nice but can easily break existing configuration.
  All existing tests and interop scenarii can be run with a Servlet based agent or with a JAX-WS one.
  Choose your target : "test" or "test-jaxws". The single difference between these 2 targets is deployment of the right war.
  J2SE deployment. WiseMan JAX-WS Endpoint can be deployed in JAX-WS http server (no more need of Servlet container),
  the build targets are currently commented due to Servlet dependency in Tests (If someone wants to rework a little bit handlers,
  we could have all tests passing indifferently on top of J2SE or J2EE!!!!). To play with such deployment, uncomment following
  ant build targets "deploy-j2se-jaxws" to start the agent side and "test-j2se-jaxws" to start the client side).
- misc: Commented the test.foo package from binding.properties.
- Trace. Removal of logging configuration file loading. Addition of a logging.properties file that is
  packaged in WEB-INF/classes in order to generate in <catalina-home>/logs a file that contains all wiseman traces.
  This is very useful when you are debugging tests. The generated file name is wiseman-<date of the day>.out]]></msg>
	</entry>
	<entry>
		<date>2007-01-14</date>
		<time>17:52</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/transfer/Transfer.java]]></name>
			<revision>1.4</revision>
			<prevrevision>1.4.2.1</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.4.2;


Changes with this submission:

51: Enhance EnumerationIterator IF to indicate iterator is already filtered.
52: Enumeration Pull may return zero objects when filtered.
53: Concurrent access to Enum context not protected

In addition the following items have been added:

1. EnumerationSupport, EnumerationHandler and EnumerationIterator have been
   completely reworked and simplified. An IteratorFactory interface has
   been added. Users wanting EnumerationSupport to handle their enumeration
   requests will need to port their iterator to the new EnumerationIterator
   interface, create an IteratorFactory and register their factory with
   EnumerationSupport.

   EnumerationSupport & EnumerationHandler are now able to support concurrent
   requests to a single resource URI.

   EnumerationSupport will now correctly detect "projections" in the filter
   and wrap the projected items within an XmlFragment. Projections are selections
   of a portion of a resource as opposed to the whole resource.

   EnumerationSupport will not filter or wrap in XmlFragment items returned from
   an iterator that returns true from EnumerationIterator.isFilter().

   The test User handler EnuerationUserHandler has been completely rewritten
   to now use the EnumerationSupport & is now split into UserEnumerationHandler,
   UserIteratorFactory & UserStore. They are used for testing and can be used
   as an example.

2. A filter unit test has been added. Several bugs were fixed in this area
   due to errors produced by this test. In particular, a namespace map was
   needed to be added to the client interfaces accepting a filter. This map
   contains the namespaces used in the filter expression. The namespaces are
   needed on the server side in order to properly evaluate the filter.
   Previously the namespaces for the document produced on the server side were
   passed to the XPath object. This was incorrect.

   Additionally NamespaceMap(Node node) was used on the server side to obtain
   the set of namespaces. This scanned the document from the specified node
   to the last child. This was incorrect. It needed to scan the document from
   the specified node to the root (opposite direction).

   Several support functions were added to process filtering on the server side.
   See below in item 3.

3. Several client and server interfaces have been enhanced to allow for easier
   handling of XmlFragment and filtering in general.
   EnumerationSupport has already been mentioned.

   EnumerationSupport has the added method:
   public static Filter createFilter(final Enumeration request)
   for easy creation of a Filter object from an Enumeration Request.
   EventingSupport & TransferExtensions have similar methods.

   BaseSupport has added two methods, createXmlFragment(List<Node>) &
   createXmlFragment(Nodelist) to ease creation of XmlFragment objects.
   TransferExtensions has done the same for use on the client side.

   The Filter interface was changed to return the filtered object as
   a Nodelist object rather than just a boolean. The Nodelist may contain
   projected elements if the filter contains a projection. The Nodelist
   can be diretly passed to BaseSupport.createXmlFragment(Nodelist)
   described above.

   Transfer.getResource(QName name) was added to easily get the resource object
   passed in Create, Update, & Delete requests.

   TransferExtensions.getResource(QName) overrides Transfer.getResource() and
   will check for XmlFragment objects if the QName object is not found.

   TransferExtensions.setFragmentGetResponse(
			final SOAPHeaderElement fragmentTransferHeader,
			final Object resource)

   has been added. This method will, using any registerd Filter handler,
   process the Fragment Transfer get against the provided resource object
   and set the result in the response. The resulting resource will
   automatically be wrapped into an XmlFragment for the caller and placed
   into the body of the repsonse. NOTE: results from applying the
   Fragment Transfer filter are always warpped in an XmlFragment by
   this method, whether the filter specified projections or not, as the caller
   specifically requested Fragment Transfer. This is not done for
   enumerations where the fragment transfer is mixed in with the wsman:filter.
   In the case of Enumerations if the filter selects the entire resource
   it is not wrapped in an XmlFragment.

   If setFragmentGetResponse() is called with fragmentTransferHeader set
   to null the method will simply put the resource object into the body of
   the response for the caller.

   NOTE: More work is needed on the client side to make, so I have listed/closed
         issue #24: Client fragment support should be simplified

4. To run the tests the "se/src/binding.properties" file MUST be edited first.
   Uncomment the line:

   com.sun.ws.management.xml.custom.packagenames = foo.test,com.hp.examples.ws.wsman.user

   This is needed for some tests to correctly execute.

5. I could NOT correctly build the JAXB Object Factory sources using the build.xml.
   All sources were built and compiled OK, but some tests failed. The reason is that
   attempts to add the "mustUnderstand" attribute to a header did not work. The
   call did not produce an error, but the header did not have the attribute. I
   duplicated this problem on two different system. Eventually I used the source
   that was previously built with JAXB and the tests then passed.

6. testMaxEnvelopeSizeTooBig() fails for test-jaxws. I do not know why. It is the
   only test that failed for me, though. I commented it out for my tests.]]></msg>
	</entry>
	<entry>
		<date>2007-01-23</date>
		<time>06:28</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/test/src/management/EnumerationFilterTest.java]]></name>
			<revision>1.3</revision>
			<prevrevision>1.2</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.3.2;
Test fixed. Test Iterator did not work correctly when option was set to have Iterator do the filtering and EPRs were requested. Test now works as it should.]]></msg>
	</entry>
	<entry>
		<date>2007-01-29</date>
		<time>05:59</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/xml/XmlBinding.java]]></name>
			<revision>1.16</revision>
			<prevrevision>1.15</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.16.2;
Issue number:  67
Obtained from:
Submitted by:
Reviewed by:

Added property in binding.properties to allow turning off validation regardless of whether schems are present or not. Property also added to command line for client side. Default has schema validation turned on.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:24</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/WSManAgent.java]]></name>
			<revision>1.1</revision>
			<prevrevision>1.1.2.2</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.1.2;
file WSManAgent.java was initially added on branch jaxws_branch.]]></msg>
	</entry>
	<entry>
		<date>2006-11-15</date>
		<time>15:06</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/WSManServlet.java]]></name>
			<revision>1.27</revision>
			<prevrevision>1.26</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.27.2;
When a request comes in with no Content-type an NPE was being returned instead of a COntent-Type not acceptable message. We now chech for this condition.]]></msg>
	</entry>
	<entry>
		<date>2007-01-11</date>
		<time>13:12</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/test/src/demo/CmdLineDemo.java]]></name>
			<revision>1.14</revision>
			<prevrevision>1.13</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/test/src/management/TestBase.java]]></name>
			<revision>1.10</revision>
			<prevrevision>1.9</prevrevision>
		</file>
		<msg><![CDATA[Wiseman on top of JAX-WS 2.0. Merge with jaxws_branch.
Main changes:
- Removal of JAXB binaries from CVS.
  You will have to copy jaxws jars (you can download them from https://jax-ws.dev.java.net/jax-ws-20-fcs/) in lib/jaxws directory.
 (Planing to see how we can integrate the Maven java.net repository to express dependency we have on JAX-WS project.)
- Source code impact. Quite a lot but mainly rework of WsManServlet, introduced new WSManAgent and WSManJAXWSEndpoint.
  Rework of initialization, removal of various initialization() methods.
  New Message construction based on a SOAPMessage.
- Schemas location.They are now located in com.sun.ws.management.resources.schemas.
  They can be found as Resource from current ClassLoader. It is no more linked to Servlet.
  Custom schemas can still be provided thanks to ServletContext (as before)
  The schemas have been renamed, the ordering based on name has been replaced by a list in wiseman.properties file.
- JAXB Generation. Removal of the files from the repository.
  Generated file should be generated with the release of JAX-WS you selected.
  If we let the generated code in the CVS repository, we could ran into future compatibility problems.
  You have to call "generate-jaxb" manually.
- Build impact. New targets to build and deploy jax-ws compliant war (named wisman-jaxws.war)
- Tests. Removal of the automatic copy of JAXB/SAAJ jar in the tomcat /shared/lib.
  This is something that is nice but can easily break existing configuration.
  All existing tests and interop scenarii can be run with a Servlet based agent or with a JAX-WS one.
  Choose your target : "test" or "test-jaxws". The single difference between these 2 targets is deployment of the right war.
  J2SE deployment. WiseMan JAX-WS Endpoint can be deployed in JAX-WS http server (no more need of Servlet container),
  the build targets are currently commented due to Servlet dependency in Tests (If someone wants to rework a little bit handlers,
  we could have all tests passing indifferently on top of J2SE or J2EE!!!!). To play with such deployment, uncomment following
  ant build targets "deploy-j2se-jaxws" to start the agent side and "test-j2se-jaxws" to start the client side).
- misc: Commented the test.foo package from binding.properties.
- Trace. Removal of logging configuration file loading. Addition of a logging.properties file that is
  packaged in WEB-INF/classes in order to generate in <catalina-home>/logs a file that contains all wiseman traces.
  This is very useful when you are debugging tests. The generated file name is wiseman-<date of the day>.out]]></msg>
	</entry>
	<entry>
		<date>2007-01-11</date>
		<time>13:13</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/test/src/server/JAXWSAgent.java]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1</prevrevision>
		</file>
		<msg><![CDATA[Wiseman on top of JAX-WS 2.0. Merge with jaxws_branch.
Main changes:
- Removal of JAXB binaries from CVS.
  You will have to copy jaxws jars (you can download them from https://jax-ws.dev.java.net/jax-ws-20-fcs/) in lib/jaxws directory.
 (Planing to see how we can integrate the Maven java.net repository to express dependency we have on JAX-WS project.)
- Source code impact. Quite a lot but mainly rework of WsManServlet, introduced new WSManAgent and WSManJAXWSEndpoint.
  Rework of initialization, removal of various initialization() methods.
  New Message construction based on a SOAPMessage.
- Schemas location.They are now located in com.sun.ws.management.resources.schemas.
  They can be found as Resource from current ClassLoader. It is no more linked to Servlet.
  Custom schemas can still be provided thanks to ServletContext (as before)
  The schemas have been renamed, the ordering based on name has been replaced by a list in wiseman.properties file.
- JAXB Generation. Removal of the files from the repository.
  Generated file should be generated with the release of JAX-WS you selected.
  If we let the generated code in the CVS repository, we could ran into future compatibility problems.
  You have to call "generate-jaxb" manually.
- Build impact. New targets to build and deploy jax-ws compliant war (named wisman-jaxws.war)
- Tests. Removal of the automatic copy of JAXB/SAAJ jar in the tomcat /shared/lib.
  This is something that is nice but can easily break existing configuration.
  All existing tests and interop scenarii can be run with a Servlet based agent or with a JAX-WS one.
  Choose your target : "test" or "test-jaxws". The single difference between these 2 targets is deployment of the right war.
  J2SE deployment. WiseMan JAX-WS Endpoint can be deployed in JAX-WS http server (no more need of Servlet container),
  the build targets are currently commented due to Servlet dependency in Tests (If someone wants to rework a little bit handlers,
  we could have all tests passing indifferently on top of J2SE or J2EE!!!!). To play with such deployment, uncomment following
  ant build targets "deploy-j2se-jaxws" to start the agent side and "test-j2se-jaxws" to start the client side).
- misc: Commented the test.foo package from binding.properties.
- Trace. Removal of logging configuration file loading. Addition of a logging.properties file that is
  packaged in WEB-INF/classes in order to generate in <catalina-home>/logs a file that contains all wiseman traces.
  This is very useful when you are debugging tests. The generated file name is wiseman-<date of the day>.out]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:22</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/resources/schemas/enumeration.xsd]]></name>
			<revision>1.1.2.1</revision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/resources/schemas/soap.xsd]]></name>
			<revision>1.1.2.1</revision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/resources/schemas/transfer.xsd]]></name>
			<revision>1.1.2.1</revision>
		</file>
		<msg><![CDATA[Schema can be loaded as Resource in J2se or J2ee]]></msg>
	</entry>
	<entry>
		<date>2007-01-26</date>
		<time>15:11</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[client/build.xml]]></name>
			<revision>1.6</revision>
			<prevrevision>1.5</prevrevision>
		</file>
		<file>
			<name><![CDATA[tools/samples/trafficlight_server/etc/binding.properties]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[tools/src/templates/EnumerationSupport.vm]]></name>
			<revision>1.5</revision>
			<prevrevision>1.4</prevrevision>
		</file>
		<msg><![CDATA[Issue number:  61
Obtained from:
Submitted by:  denis_rachal
Reviewed by:

Templates for code generation have been updated to run with new Enumeration interfaces.

Samples programs updated to run with newer Enumeration interfaces.

Sample documentation updated.

Build project files updated for sample ant builds.

Eclipse project files added for sample builds.]]></msg>
	</entry>
	<entry>
		<date>2006-10-16</date>
		<time>14:50</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/framework/enumeration/Enumeratable.java]]></name>
			<revision>1.6</revision>
		</file>
		<msg><![CDATA[Issue number:  42
Refactored Handler Context all the way down the stack into all generated or framework based code and examples.----------------------------
revision 1.7.2.1
date: 2007/02/20 12:15:12;  author: denis_rachal;  state: Exp;  lines: +3 -3


Various enhancements and fixes are included in this branch:

1. XmlFragment processing on Get cannot handle Text nodes.

2. Addressing.addHeaders() cannot handle JAXB objects.

3. Enhancement: Add ability to to be notified on creation & deletion of enumerations and subscriptions.

4. Enhancement: Add code generation for Eventing operations

5. Enhancement: Add ability for Eventing & Enumeration pull mode applications to asynchronously notify waiters on the iterator that data is now available.

6. Enhancement: Add a default EventingIterator for use by Eventing pull sources.

7. Enhancement: Enhance EventingSupport.subscribe() to accept both pull and push mode subscriptions.

8. Enhancement: Add EventingSupport.sendEvent() method that can handle both push and pull mode events.

9. Enhancement: Add possibility to disable default wsman:OperationTimeout behavior built in to WSManAgent

10. Enhancement: Performance improvements to make better reuse of JAXBContext objects

11. Enhancement: Add Object getResource() helper method to Transfer class. Returns first object in SOAP body (payload).

12. Enhancement: Enhance Xsd2Wsdl task to allow specifying resource type, name, and target namespace from an ant task.]]></msg>
	</entry>
	<entry>
		<date>2007-01-30</date>
		<time>12:26</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/enumeration/EnumerationExtensions.java]]></name>
			<revision>1.12</revision>
			<prevrevision>1.11</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/eventing/EventingExtensions.java]]></name>
			<revision>1.6</revision>
			<prevrevision>1.5</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/resources/schemas/management.xsd]]></name>
			<revision>1.3</revision>
			<prevrevision>1.2</prevrevision>
		</file>
		<msg><![CDATA[Changes required to work with JAXB 2.1.2.]]></msg>
	</entry>
	<entry>
		<date>2006-11-02</date>
		<time>20:46</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[se/build.xml]]></name>
			<revision>1.42</revision>
			<prevrevision>1.42.2.5</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.42.2;
Build.xml modified to include a sample handler configuration file when the binary is built.]]></msg>
	</entry>
	<entry>
		<date>2007-01-29</date>
		<time>06:05</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[tools/src/templates/binding.properties.vm]]></name>
			<revision>1.1</revision>
		</file>
		<msg><![CDATA[Issue number:  68
Obtained from:
Submitted by:
Reviewed by:

Code generation updated to create a single handle per XSD.]]></msg>
	</entry>
	<entry>
		<date>2007-01-29</date>
		<time>05:59</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[client/build.xml]]></name>
			<revision>1.7</revision>
			<prevrevision>1.6</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/test/etc/binding.properties]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1</prevrevision>
		</file>
		<msg><![CDATA[Issue number:  67
Obtained from:
Submitted by:
Reviewed by:

Added property in binding.properties to allow turning off validation regardless of whether schems are present or not. Property also added to command line for client side. Default has schema validation turned on.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:24</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/RequestDispatcherConfig.java]]></name>
			<revision>1.1.2.1</revision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/WSManAgent.java]]></name>
			<revision>1.1.2.1</revision>
			<prevrevision>1.4.2.3</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/WSManReflectiveAgent.java]]></name>
			<revision>1.1.2.1</revision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/WSManServlet.java]]></name>
			<revision>1.27.2.1</revision>
		</file>
		<msg><![CDATA[Core changes implied by JAX-WS 2.0 integration]]></msg>
	</entry>
	<entry>
		<date>2006-12-02</date>
		<time>14:51</time>
		<author><![CDATA[simeonpinder]]></author>
		<file>
			<name><![CDATA[se/test/src/interop/_06/InteropTest.java]]></name>
			<revision>1.17</revision>
			<prevrevision>1.18.2.1</prevrevision>
		</file>
		<msg><![CDATA[update for 12/3/05 interop scenarios.]]></msg>
	</entry>
	<entry>
		<date>2007-01-11</date>
		<time>13:12</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/soap/SOAP.java]]></name>
			<revision>1.15</revision>
			<prevrevision>1.14</prevrevision>
		</file>
		<msg><![CDATA[Wiseman on top of JAX-WS 2.0. Merge with jaxws_branch.
Main changes:
- Removal of JAXB binaries from CVS.
  You will have to copy jaxws jars (you can download them from https://jax-ws.dev.java.net/jax-ws-20-fcs/) in lib/jaxws directory.
 (Planing to see how we can integrate the Maven java.net repository to express dependency we have on JAX-WS project.)
- Source code impact. Quite a lot but mainly rework of WsManServlet, introduced new WSManAgent and WSManJAXWSEndpoint.
  Rework of initialization, removal of various initialization() methods.
  New Message construction based on a SOAPMessage.
- Schemas location.They are now located in com.sun.ws.management.resources.schemas.
  They can be found as Resource from current ClassLoader. It is no more linked to Servlet.
  Custom schemas can still be provided thanks to ServletContext (as before)
  The schemas have been renamed, the ordering based on name has been replaced by a list in wiseman.properties file.
- JAXB Generation. Removal of the files from the repository.
  Generated file should be generated with the release of JAX-WS you selected.
  If we let the generated code in the CVS repository, we could ran into future compatibility problems.
  You have to call "generate-jaxb" manually.
- Build impact. New targets to build and deploy jax-ws compliant war (named wisman-jaxws.war)
- Tests. Removal of the automatic copy of JAXB/SAAJ jar in the tomcat /shared/lib.
  This is something that is nice but can easily break existing configuration.
  All existing tests and interop scenarii can be run with a Servlet based agent or with a JAX-WS one.
  Choose your target : "test" or "test-jaxws". The single difference between these 2 targets is deployment of the right war.
  J2SE deployment. WiseMan JAX-WS Endpoint can be deployed in JAX-WS http server (no more need of Servlet container),
  the build targets are currently commented due to Servlet dependency in Tests (If someone wants to rework a little bit handlers,
  we could have all tests passing indifferently on top of J2SE or J2EE!!!!). To play with such deployment, uncomment following
  ant build targets "deploy-j2se-jaxws" to start the agent side and "test-j2se-jaxws" to start the client side).
- misc: Commented the test.foo package from binding.properties.
- Trace. Removal of logging configuration file loading. Addition of a logging.properties file that is
  packaged in WEB-INF/classes in order to generate in <catalina-home>/logs a file that contains all wiseman traces.
  This is very useful when you are debugging tests. The generated file name is wiseman-<date of the day>.out]]></msg>
	</entry>
	<entry>
		<date>2006-12-05</date>
		<time>10:34</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/handler/wsman/test/enumeration/filter/custom_filter_Handler.java]]></name>
			<revision>1.1</revision>
			<prevrevision>1.1.2.1</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.1.2;
Fix for Supporting multiple Filter dialects : https://wiseman.dev.java.net/issues/show_bug.cgi?id=43]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:50</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/etc/logging.properties]]></name>
			<revision>1.1.2.1</revision>
		</file>
		<msg><![CDATA[Tomcat logging]]></msg>
	</entry>
	<entry>
		<date>2007-01-25</date>
		<time>15:42</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/transfer/TransferExtensions.java]]></name>
			<revision>1.8</revision>
			<prevrevision>1.7</prevrevision>
		</file>
		<msg><![CDATA[Issue number:  66
Obtained from:
Submitted by:
Reviewed by:

Added tryy/catch blocks around XmlBinding.marshal() calls and throws InternalErrorFault in these cases.]]></msg>
	</entry>
	<entry>
		<date>2007-01-30</date>
		<time>06:16</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[tools/src/templates/IteratorFactory.vm]]></name>
			<revision>1.4</revision>
			<prevrevision>1.3</prevrevision>
		</file>
		<msg><![CDATA[Issue number:  67
Obtained from:
Submitted by:  denis_rachal
Reviewed by:

Removed incorrect ee= null; line and unused template.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:28</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/test/src/util/WsManBaseTestSupport.java]]></name>
			<revision>1.3.2.1</revision>
		</file>
		<msg><![CDATA[Removal of Message.initialization]]></msg>
	</entry>
	<entry>
		<date>2006-09-20</date>
		<time>14:50</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[client/test/com/sun/ws/management/client/impl/ResourceImplTest.java]]></name>
			<revision>1.9</revision>
			<prevrevision>1.19.2.1</prevrevision>
		</file>
		<msg><![CDATA[HP user reported that ResourceFactory.getIdentity() was taking forever to timeout. This was because the client waited for the server to close the identify request socket. We now support a client side timeout for identify requests.]]></msg>
	</entry>
	<entry>
		<date>2006-12-13</date>
		<time>09:11</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/test/src/framework/models/EnumerationUserHandler.java]]></name>
			<revision>1.8</revision>
			<prevrevision>1.7</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.8.2;
Issue number:  18
Obtained from:
Submitted by:  akhilarora
Reviewed by:

Cleaned up code in Enumeration & EnumerationExtensions. All WS Management extensions are now located in EnumerationExtensions. Enumeration is for WS Enumeration without the WS Management extensions.]]></msg>
	</entry>
	<entry>
		<date>2007-01-14</date>
		<time>17:55</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[client/src/com/sun/ws/management/client/impl/EnumerationResourceImpl.java]]></name>
			<revision>1.19</revision>
			<prevrevision>1.18</prevrevision>
		</file>
		<file>
			<name><![CDATA[client/src/com/sun/ws/management/client/impl/TransferableResourceImpl.java]]></name>
			<revision>1.10</revision>
			<prevrevision>1.9</prevrevision>
		</file>
		<msg><![CDATA[

Changes with this submission:

51: Enhance EnumerationIterator IF to indicate iterator is already filtered.
52: Enumeration Pull may return zero objects when filtered.
53: Concurrent access to Enum context not protected

In addition the following items have been added:

1. EnumerationSupport, EnumerationHandler and EnumerationIterator have been
   completely reworked and simplified. An IteratorFactory interface has
   been added. Users wanting EnumerationSupport to handle their enumeration
   requests will need to port their iterator to the new EnumerationIterator
   interface, create an IteratorFactory and register their factory with
   EnumerationSupport.

   EnumerationSupport & EnumerationHandler are now able to support concurrent
   requests to a single resource URI.

   EnumerationSupport will now correctly detect "projections" in the filter
   and wrap the projected items within an XmlFragment. Projections are selections
   of a portion of a resource as opposed to the whole resource.

   EnumerationSupport will not filter or wrap in XmlFragment items returned from
   an iterator that returns true from EnumerationIterator.isFilter().

   The test User handler EnuerationUserHandler has been completely rewritten
   to now use the EnumerationSupport & is now split into UserEnumerationHandler,
   UserIteratorFactory & UserStore. They are used for testing and can be used
   as an example.

2. A filter unit test has been added. Several bugs were fixed in this area
   due to errors produced by this test. In particular, a namespace map was
   needed to be added to the client interfaces accepting a filter. This map
   contains the namespaces used in the filter expression. The namespaces are
   needed on the server side in order to properly evaluate the filter.
   Previously the namespaces for the document produced on the server side were
   passed to the XPath object. This was incorrect.

   Additionally NamespaceMap(Node node) was used on the server side to obtain
   the set of namespaces. This scanned the document from the specified node
   to the last child. This was incorrect. It needed to scan the document from
   the specified node to the root (opposite direction).

   Several support functions were added to process filtering on the server side.
   See below in item 3.

3. Several client and server interfaces have been enhanced to allow for easier
   handling of XmlFragment and filtering in general.
   EnumerationSupport has already been mentioned.

   EnumerationSupport has the added method:
   public static Filter createFilter(final Enumeration request)
   for easy creation of a Filter object from an Enumeration Request.
   EventingSupport & TransferExtensions have similar methods.

   BaseSupport has added two methods, createXmlFragment(List<Node>) &
   createXmlFragment(Nodelist) to ease creation of XmlFragment objects.
   TransferExtensions has done the same for use on the client side.

   The Filter interface was changed to return the filtered object as
   a Nodelist object rather than just a boolean. The Nodelist may contain
   projected elements if the filter contains a projection. The Nodelist
   can be diretly passed to BaseSupport.createXmlFragment(Nodelist)
   described above.

   Transfer.getResource(QName name) was added to easily get the resource object
   passed in Create, Update, & Delete requests.

   TransferExtensions.getResource(QName) overrides Transfer.getResource() and
   will check for XmlFragment objects if the QName object is not found.

   TransferExtensions.setFragmentGetResponse(
			final SOAPHeaderElement fragmentTransferHeader,
			final Object resource)

   has been added. This method will, using any registerd Filter handler,
   process the Fragment Transfer get against the provided resource object
   and set the result in the response. The resulting resource will
   automatically be wrapped into an XmlFragment for the caller and placed
   into the body of the repsonse. NOTE: results from applying the
   Fragment Transfer filter are always warpped in an XmlFragment by
   this method, whether the filter specified projections or not, as the caller
   specifically requested Fragment Transfer. This is not done for
   enumerations where the fragment transfer is mixed in with the wsman:filter.
   In the case of Enumerations if the filter selects the entire resource
   it is not wrapped in an XmlFragment.

   If setFragmentGetResponse() is called with fragmentTransferHeader set
   to null the method will simply put the resource object into the body of
   the response for the caller.

   NOTE: More work is needed on the client side to make, so I have listed/closed
         issue #24: Client fragment support should be simplified

4. To run the tests the "se/src/binding.properties" file MUST be edited first.
   Uncomment the line:

   com.sun.ws.management.xml.custom.packagenames = foo.test,com.hp.examples.ws.wsman.user

   This is needed for some tests to correctly execute.

5. I could NOT correctly build the JAXB Object Factory sources using the build.xml.
   All sources were built and compiled OK, but some tests failed. The reason is that
   attempts to add the "mustUnderstand" attribute to a header did not work. The
   call did not produce an error, but the header did not have the attribute. I
   duplicated this problem on two different system. Eventually I used the source
   that was previously built with JAXB and the tests then passed.

6. testMaxEnvelopeSizeTooBig() fails for test-jaxws. I do not know why. It is the
   only test that failed for me, though. I commented it out for my tests.]]></msg>
	</entry>
	<entry>
		<date>2006-10-16</date>
		<time>14:50</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[se/test/src/framework/models/UserHandler.java]]></name>
			<revision>1.6</revision>
			<prevrevision>1.9.2.1</prevrevision>
		</file>
		<msg><![CDATA[Issue number:  42
Refactored Handler Context all the way down the stack into all generated or framework based code and examples.----------------------------
revision 1.5
date: 2006/09/29 17:15:45;  author: obiwan314;  state: Exp;  lines: +20 -0
This checkin completes implementation of Invoke support.]]></msg>
	</entry>
	<entry>
		<date>2007-01-23</date>
		<time>07:23</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/test/src/framework/models/UserEnumerationHandler.java]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1</prevrevision>
		</file>
		<msg><![CDATA[Fix for error in test.]]></msg>
	</entry>
	<entry>
		<date>2007-01-11</date>
		<time>13:19</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/WSManAgent.java]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/WSManJAXWSEndpoint.java]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/WSManReflectiveAgent.java]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1</prevrevision>
		</file>
		<msg><![CDATA[Wiseman on top of JAX-WS 2.0. Merge with jaxws_branch
Main changes:
- Removal of JAXB binaries from CVS.
  You will have to copy jaxws jars (you can download them from https://jax-ws.dev.java.net/jax-ws-20-fcs/) in lib/jaxws directory.
 (Planing to see how we can integrate the Maven java.net repository to express dependency we have on JAX-WS project.)
- Source code impact. Quite a lot but mainly rework of WsManServlet, introduced new WSManAgent and WSManJAXWSEndpoint.
  Rework of initialization, removal of various initialization() methods.
  New Message construction based on a SOAPMessage.
- Schemas location.They are now located in com.sun.ws.management.resources.schemas.
  They can be found as Resource from current ClassLoader. It is no more linked to Servlet.
  Custom schemas can still be provided thanks to ServletContext (as before)
  The schemas have been renamed, the ordering based on name has been replaced by a list in wiseman.properties file.
- JAXB Generation. Removal of the files from the repository.
  Generated file should be generated with the release of JAX-WS you selected.
  If we let the generated code in the CVS repository, we could ran into future compatibility problems.
  You have to call "generate-jaxb" manually.
- Build impact. New targets to build and deploy jax-ws compliant war (named wisman-jaxws.war)
- Tests. Removal of the automatic copy of JAXB/SAAJ jar in the tomcat /shared/lib.
  This is something that is nice but can easily break existing configuration.
  All existing tests and interop scenarii can be run with a Servlet based agent or with a JAX-WS one.
  Choose your target : "test" or "test-jaxws". The single difference between these 2 targets is deployment of the right war.
  J2SE deployment. WiseMan JAX-WS Endpoint can be deployed in JAX-WS http server (no more need of Servlet container),
  the build targets are currently commented due to Servlet dependency in Tests (If someone wants to rework a little bit handlers,
  we could have all tests passing indifferently on top of J2SE or J2EE!!!!). To play with such deployment, uncomment following
  ant build targets "deploy-j2se-jaxws" to start the agent side and "test-j2se-jaxws" to start the client side).
- misc: Commented the test.foo package from binding.properties.
- Trace. Removal of logging configuration file loading. Addition of a logging.properties file that is
  packaged in WEB-INF/classes in order to generate in <catalina-home>/logs a file that contains all wiseman traces.
  This is very useful when you are debugging tests. The generated file name is wiseman-<date of the day>.out]]></msg>
	</entry>
	<entry>
		<date>2006-12-12</date>
		<time>19:04</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[www/preso/mdc/MDC_2005_Akhil_Arora.pdf]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[www/preso/mdc/MDC_2006_WSMan_and_Wiseman.pdf]]></name>
			<revision>1.1</revision>
		</file>
		<msg><![CDATA[Adding 2005 and 2006 MDC Presentations to website.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:24</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/BaseSupport.java]]></name>
			<revision>1.9.2.1</revision>
			<prevrevision>1.13.2.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/EnumerationSupport.java]]></name>
			<revision>1.37.2.1</revision>
			<prevrevision>1.44.2.2</prevrevision>
		</file>
		<msg><![CDATA[static init]]></msg>
	</entry>
	<entry>
		<date>2006-10-16</date>
		<time>14:50</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[client/src/com/sun/ws/management/client/Resource.java]]></name>
			<revision>1.5</revision>
		</file>
		<msg><![CDATA[Issue number:  42
Refactored Handler Context all the way down the stack into all generated or framework based code and examples.----------------------------
revision 1.4
date: 2006/09/29 15:18:02;  author: obiwan314;  state: Exp;  lines: +11 -0
My previous change introduced some refactoring I was doing to implement invoke for ResourceImpl. These changes are required to keep the client buildable. Invoke is not completely tested yet.]]></msg>
	</entry>
	<entry>
		<date>2006-12-13</date>
		<time>09:11</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/enumeration/Enumeration.java]]></name>
			<revision>1.16</revision>
			<prevrevision>1.15</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.16.2;
Issue number:  18
Obtained from:
Submitted by:  akhilarora
Reviewed by:

Cleaned up code in Enumeration & EnumerationExtensions. All WS Management extensions are now located in EnumerationExtensions. Enumeration is for WS Enumeration without the WS Management extensions.]]></msg>
	</entry>
	<entry>
		<date>2006-10-16</date>
		<time>20:26</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[client/test/com/sun/ws/management/client/impl/ResourceImplTest.java]]></name>
			<revision>1.12</revision>
			<prevrevision>1.11</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/transport/HttpClient.java]]></name>
			<revision>1.15</revision>
			<prevrevision>1.16.4.1</prevrevision>
		</file>
		<msg><![CDATA[Added the ability to send arbitrary http headers in identify requests.]]></msg>
	</entry>
	<entry>
		<date>2006-12-05</date>
		<time>10:35</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/BaseContext.java]]></name>
			<revision>1.8</revision>
			<prevrevision>1.9.2.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/BaseSupport.java]]></name>
			<revision>1.8</revision>
			<prevrevision>1.9.2.2</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/EnumerationContext.java]]></name>
			<revision>1.7</revision>
			<prevrevision>1.8.2.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/EnumerationSupport.java]]></name>
			<revision>1.35</revision>
			<prevrevision>1.37.2.2</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/EventingSupport.java]]></name>
			<revision>1.17</revision>
			<prevrevision>1.18.2.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/test/src/management/EventingTest.java]]></name>
			<revision>1.12</revision>
			<prevrevision>1.13.2.1</prevrevision>
		</file>
		<msg><![CDATA[Fix for Supporting multiple Filter dialects : https://wiseman.dev.java.net/issues/show_bug.cgi?id=43]]></msg>
	</entry>
	<entry>
		<date>2006-10-10</date>
		<time>19:50</time>
		<author><![CDATA[nbeers]]></author>
		<file>
			<name><![CDATA[client/src/com/sun/ws/management/client/ResourceFactory.java]]></name>
			<revision>1.9</revision>
			<prevrevision>1.8</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/WSManServlet.java]]></name>
			<revision>1.26</revision>
			<prevrevision>1.27.2.2</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/soap/SOAP.java]]></name>
			<revision>1.13</revision>
			<prevrevision>1.14.2.1</prevrevision>
		</file>
		<msg><![CDATA[Fix for issue 36 (Concurrent JAXB access fails in SOAP class).  Make the XMLBinding member variable of the SOAP class non-static and fix all references to it throughout the code.]]></msg>
	</entry>
	<entry>
		<date>2007-01-17</date>
		<time>07:55</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/test/gen-src/README]]></name>
			<revision>1.1</revision>
		</file>
		<msg><![CDATA[Issue number:  59
Obtained from:
Submitted by:
Reviewed by:

Added README to empty directory]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:24</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/HandlerContextImpl.java]]></name>
			<revision>1.1.2.1</revision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/RequestDispatcher.java]]></name>
			<revision>1.9.2.1</revision>
			<prevrevision>1.10.2.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/WSManJAXWSEndpoint.java]]></name>
			<revision>1.1.2.1</revision>
		</file>
		<msg><![CDATA[Core changes implied by JAX-WS 2.0 integration]]></msg>
	</entry>
	<entry>
		<date>2006-12-05</date>
		<time>10:34</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/Filter.java]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/xml/XPathFilterFactory.java]]></name>
			<revision>1.1</revision>
		</file>
		<msg><![CDATA[Fix for Supporting multiple Filter dialects : https://wiseman.dev.java.net/issues/show_bug.cgi?id=43]]></msg>
	</entry>
	<entry>
		<date>2006-12-11</date>
		<time>16:20</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/test/src/interop/_06/InteropTest.java]]></name>
			<revision>1.18</revision>
			<prevrevision>1.17</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.18.2;
Issue number:  18
Obtained from: Wiseman
Submitted by:  akhilarora
Reviewed by:
CVS: ----------------------------------------------------------------------
CVS: Issue number:18
CVS:   If this change addresses one or more issues,
CVS:   then enter the issue number(s) here.
CVS: Obtained from:
CVS:   If this change has been taken from another system,
CVS:   then name the system in this line, otherwise delete it.
CVS: Submitted by:
CVS:   If this code has been contributed to the project by someone else; i.e.,
CVS:   they sent us a patch or a set of diffs, then include their name/email
CVS:   address here. If this is your work then delete this line.
CVS: Reviewed by:
CVS:   If we are doing pre-commit code reviews and someone else has
CVS:   reviewed your changes, include their name(s) here.
CVS:   If you have not had it reviewed then delete this line.

Enumeration now supports wsman:item wrapper.]]></msg>
	</entry>
	<entry>
		<date>2007-01-11</date>
		<time>13:12</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/RequestDispatcher.java]]></name>
			<revision>1.10</revision>
			<prevrevision>1.9.2.1</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.10.2;
Wiseman on top of JAX-WS 2.0. Merge with jaxws_branch.
Main changes:
- Removal of JAXB binaries from CVS.
  You will have to copy jaxws jars (you can download them from https://jax-ws.dev.java.net/jax-ws-20-fcs/) in lib/jaxws directory.
 (Planing to see how we can integrate the Maven java.net repository to express dependency we have on JAX-WS project.)
- Source code impact. Quite a lot but mainly rework of WsManServlet, introduced new WSManAgent and WSManJAXWSEndpoint.
  Rework of initialization, removal of various initialization() methods.
  New Message construction based on a SOAPMessage.
- Schemas location.They are now located in com.sun.ws.management.resources.schemas.
  They can be found as Resource from current ClassLoader. It is no more linked to Servlet.
  Custom schemas can still be provided thanks to ServletContext (as before)
  The schemas have been renamed, the ordering based on name has been replaced by a list in wiseman.properties file.
- JAXB Generation. Removal of the files from the repository.
  Generated file should be generated with the release of JAX-WS you selected.
  If we let the generated code in the CVS repository, we could ran into future compatibility problems.
  You have to call "generate-jaxb" manually.
- Build impact. New targets to build and deploy jax-ws compliant war (named wisman-jaxws.war)
- Tests. Removal of the automatic copy of JAXB/SAAJ jar in the tomcat /shared/lib.
  This is something that is nice but can easily break existing configuration.
  All existing tests and interop scenarii can be run with a Servlet based agent or with a JAX-WS one.
  Choose your target : "test" or "test-jaxws". The single difference between these 2 targets is deployment of the right war.
  J2SE deployment. WiseMan JAX-WS Endpoint can be deployed in JAX-WS http server (no more need of Servlet container),
  the build targets are currently commented due to Servlet dependency in Tests (If someone wants to rework a little bit handlers,
  we could have all tests passing indifferently on top of J2SE or J2EE!!!!). To play with such deployment, uncomment following
  ant build targets "deploy-j2se-jaxws" to start the agent side and "test-j2se-jaxws" to start the client side).
- misc: Commented the test.foo package from binding.properties.
- Trace. Removal of logging configuration file loading. Addition of a logging.properties file that is
  packaged in WEB-INF/classes in order to generate in <catalina-home>/logs a file that contains all wiseman traces.
  This is very useful when you are debugging tests. The generated file name is wiseman-<date of the day>.out]]></msg>
	</entry>
	<entry>
		<date>2007-01-02</date>
		<time>16:54</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/WSManAgent.java]]></name>
			<revision>1.1.2.2</revision>
			<prevrevision>1.1.2.1</prevrevision>
		</file>
		<msg><![CDATA[Added the ability to load custom schemas and JAXB custom  packages.
For Servlet, custom schemas are located as before in /xsd directory
Custom packages can be passed programaticaly to a WSManAgent]]></msg>
	</entry>
	<entry>
		<date>2007-01-29</date>
		<time>18:42</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/project.properties]]></name>
			<revision>1.11</revision>
			<prevrevision>1.10</prevrevision>
		</file>
		<msg><![CDATA[Add missing variable: test.gen.src.dir]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:56</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/lib/jaxws/README]]></name>
			<revision>1.1</revision>
			<prevrevision>1.1.2.1</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.1.2;
file README was initially added on branch jaxws_branch.]]></msg>
	</entry>
	<entry>
		<date>2007-01-11</date>
		<time>13:12</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/addressing/Addressing.java]]></name>
			<revision>1.13</revision>
			<prevrevision>1.12</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.13.2;
Wiseman on top of JAX-WS 2.0. Merge with jaxws_branch.
Main changes:
- Removal of JAXB binaries from CVS.
  You will have to copy jaxws jars (you can download them from https://jax-ws.dev.java.net/jax-ws-20-fcs/) in lib/jaxws directory.
 (Planing to see how we can integrate the Maven java.net repository to express dependency we have on JAX-WS project.)
- Source code impact. Quite a lot but mainly rework of WsManServlet, introduced new WSManAgent and WSManJAXWSEndpoint.
  Rework of initialization, removal of various initialization() methods.
  New Message construction based on a SOAPMessage.
- Schemas location.They are now located in com.sun.ws.management.resources.schemas.
  They can be found as Resource from current ClassLoader. It is no more linked to Servlet.
  Custom schemas can still be provided thanks to ServletContext (as before)
  The schemas have been renamed, the ordering based on name has been replaced by a list in wiseman.properties file.
- JAXB Generation. Removal of the files from the repository.
  Generated file should be generated with the release of JAX-WS you selected.
  If we let the generated code in the CVS repository, we could ran into future compatibility problems.
  You have to call "generate-jaxb" manually.
- Build impact. New targets to build and deploy jax-ws compliant war (named wisman-jaxws.war)
- Tests. Removal of the automatic copy of JAXB/SAAJ jar in the tomcat /shared/lib.
  This is something that is nice but can easily break existing configuration.
  All existing tests and interop scenarii can be run with a Servlet based agent or with a JAX-WS one.
  Choose your target : "test" or "test-jaxws". The single difference between these 2 targets is deployment of the right war.
  J2SE deployment. WiseMan JAX-WS Endpoint can be deployed in JAX-WS http server (no more need of Servlet container),
  the build targets are currently commented due to Servlet dependency in Tests (If someone wants to rework a little bit handlers,
  we could have all tests passing indifferently on top of J2SE or J2EE!!!!). To play with such deployment, uncomment following
  ant build targets "deploy-j2se-jaxws" to start the agent side and "test-j2se-jaxws" to start the client side).
- misc: Commented the test.foo package from binding.properties.
- Trace. Removal of logging configuration file loading. Addition of a logging.properties file that is
  packaged in WEB-INF/classes in order to generate in <catalina-home>/logs a file that contains all wiseman traces.
  This is very useful when you are debugging tests. The generated file name is wiseman-<date of the day>.out]]></msg>
	</entry>
	<entry>
		<date>2007-01-29</date>
		<time>06:05</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[tools/src/templates/TransferSupport.vm]]></name>
			<revision>1.3</revision>
			<prevrevision>1.3.2.1</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.3.2;
Issue number:  68
Obtained from:
Submitted by:
Reviewed by:

Code generation updated to create a single handle per XSD.]]></msg>
	</entry>
	<entry>
		<date>2007-01-29</date>
		<time>16:48</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[tools/samples/trafficlight_server/project.properties]]></name>
			<revision>1.6</revision>
			<prevrevision>1.5</prevrevision>
		</file>
		<file>
			<name><![CDATA[tools/samples/trafficlight_server/src/net/java/dev/wiseman/traffic/light/impl/LightHandlerImpl.java]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[tools/samples/trafficlight_server/src/net/java/dev/wiseman/traffic/light/impl/LightIteratorImpl.java]]></name>
			<revision>1.1</revision>
		</file>
		<msg><![CDATA[Issue number:  68
Obtained from:
Submitted by:  denis_rachal
Reviewed by:

Updated sample client to use a single handler and new generated source files.]]></msg>
	</entry>
	<entry>
		<date>2006-12-18</date>
		<time>20:36</time>
		<author><![CDATA[nbeers]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/enumeration/Enumeration.java]]></name>
			<revision>1.17</revision>
			<prevrevision>1.16</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/enumeration/EnumerationExtensions.java]]></name>
			<revision>1.8</revision>
			<prevrevision>1.7</prevrevision>
		</file>
		<msg><![CDATA[Updated for issue 14 (Fragment support for Enumerations) and issue 45 (Client support for optimized enumerations ).  Added client test cases in support of both of these issues.]]></msg>
	</entry>
	<entry>
		<date>2007-01-17</date>
		<time>08:47</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/WSManJAXWSEndpoint.java]]></name>
			<revision>1.3</revision>
			<prevrevision>1.2</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/WSManServlet.java]]></name>
			<revision>1.30</revision>
			<prevrevision>1.29</prevrevision>
		</file>
		<msg><![CDATA[Fix for bug 56: JAX-WS deployment doesn't support non anonymous replies]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:56</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/build.xml]]></name>
			<revision>1.42.2.1</revision>
			<prevrevision>1.48.2.2</prevrevision>
		</file>
		<msg><![CDATA[JAX-WS build/deploy support]]></msg>
	</entry>
	<entry>
		<date>2007-01-14</date>
		<time>17:52</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/transfer/TransferExtensions.java]]></name>
			<revision>1.7</revision>
			<prevrevision>1.6</prevrevision>
		</file>
		<msg><![CDATA[

Changes with this submission:

51: Enhance EnumerationIterator IF to indicate iterator is already filtered.
52: Enumeration Pull may return zero objects when filtered.
53: Concurrent access to Enum context not protected

In addition the following items have been added:

1. EnumerationSupport, EnumerationHandler and EnumerationIterator have been
   completely reworked and simplified. An IteratorFactory interface has
   been added. Users wanting EnumerationSupport to handle their enumeration
   requests will need to port their iterator to the new EnumerationIterator
   interface, create an IteratorFactory and register their factory with
   EnumerationSupport.

   EnumerationSupport & EnumerationHandler are now able to support concurrent
   requests to a single resource URI.

   EnumerationSupport will now correctly detect "projections" in the filter
   and wrap the projected items within an XmlFragment. Projections are selections
   of a portion of a resource as opposed to the whole resource.

   EnumerationSupport will not filter or wrap in XmlFragment items returned from
   an iterator that returns true from EnumerationIterator.isFilter().

   The test User handler EnuerationUserHandler has been completely rewritten
   to now use the EnumerationSupport & is now split into UserEnumerationHandler,
   UserIteratorFactory & UserStore. They are used for testing and can be used
   as an example.

2. A filter unit test has been added. Several bugs were fixed in this area
   due to errors produced by this test. In particular, a namespace map was
   needed to be added to the client interfaces accepting a filter. This map
   contains the namespaces used in the filter expression. The namespaces are
   needed on the server side in order to properly evaluate the filter.
   Previously the namespaces for the document produced on the server side were
   passed to the XPath object. This was incorrect.

   Additionally NamespaceMap(Node node) was used on the server side to obtain
   the set of namespaces. This scanned the document from the specified node
   to the last child. This was incorrect. It needed to scan the document from
   the specified node to the root (opposite direction).

   Several support functions were added to process filtering on the server side.
   See below in item 3.

3. Several client and server interfaces have been enhanced to allow for easier
   handling of XmlFragment and filtering in general.
   EnumerationSupport has already been mentioned.

   EnumerationSupport has the added method:
   public static Filter createFilter(final Enumeration request)
   for easy creation of a Filter object from an Enumeration Request.
   EventingSupport & TransferExtensions have similar methods.

   BaseSupport has added two methods, createXmlFragment(List<Node>) &
   createXmlFragment(Nodelist) to ease creation of XmlFragment objects.
   TransferExtensions has done the same for use on the client side.

   The Filter interface was changed to return the filtered object as
   a Nodelist object rather than just a boolean. The Nodelist may contain
   projected elements if the filter contains a projection. The Nodelist
   can be diretly passed to BaseSupport.createXmlFragment(Nodelist)
   described above.

   Transfer.getResource(QName name) was added to easily get the resource object
   passed in Create, Update, & Delete requests.

   TransferExtensions.getResource(QName) overrides Transfer.getResource() and
   will check for XmlFragment objects if the QName object is not found.

   TransferExtensions.setFragmentGetResponse(
			final SOAPHeaderElement fragmentTransferHeader,
			final Object resource)

   has been added. This method will, using any registerd Filter handler,
   process the Fragment Transfer get against the provided resource object
   and set the result in the response. The resulting resource will
   automatically be wrapped into an XmlFragment for the caller and placed
   into the body of the repsonse. NOTE: results from applying the
   Fragment Transfer filter are always warpped in an XmlFragment by
   this method, whether the filter specified projections or not, as the caller
   specifically requested Fragment Transfer. This is not done for
   enumerations where the fragment transfer is mixed in with the wsman:filter.
   In the case of Enumerations if the filter selects the entire resource
   it is not wrapped in an XmlFragment.

   If setFragmentGetResponse() is called with fragmentTransferHeader set
   to null the method will simply put the resource object into the body of
   the response for the caller.

   NOTE: More work is needed on the client side to make, so I have listed/closed
         issue #24: Client fragment support should be simplified

4. To run the tests the "se/src/binding.properties" file MUST be edited first.
   Uncomment the line:

   com.sun.ws.management.xml.custom.packagenames = foo.test,com.hp.examples.ws.wsman.user

   This is needed for some tests to correctly execute.

5. I could NOT correctly build the JAXB Object Factory sources using the build.xml.
   All sources were built and compiled OK, but some tests failed. The reason is that
   attempts to add the "mustUnderstand" attribute to a header did not work. The
   call did not produce an error, but the header did not have the attribute. I
   duplicated this problem on two different system. Eventually I used the source
   that was previously built with JAXB and the tests then passed.

6. testMaxEnvelopeSizeTooBig() fails for test-jaxws. I do not know why. It is the
   only test that failed for me, though. I commented it out for my tests.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:22</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/resources/schemas/eventing.xsd]]></name>
			<revision>1.1.2.1</revision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/resources/schemas/identity.xsd]]></name>
			<revision>1.1.2.1</revision>
		</file>
		<msg><![CDATA[Schema can be loaded as Resource in J2se or J2ee]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>14:56</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/binding.properties]]></name>
			<revision>1.2.2.2</revision>
			<prevrevision>1.2.2.1</prevrevision>
		</file>
		<msg><![CDATA[Merge with rachal fixes]]></msg>
	</entry>
	<entry>
		<date>2007-01-17</date>
		<time>19:12</time>
		<author><![CDATA[nbeers]]></author>
		<file>
			<name><![CDATA[se/test/src/framework/models/UserHandler.java]]></name>
			<revision>1.9</revision>
			<prevrevision>1.8</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.9.2;
Pull up common methods from UserHandler to shared TransferSupport.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:52</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/etc/xsd/1-xml.xsd]]></name>
			<revision>1.1.2.1</revision>
		</file>
		<file>
			<name><![CDATA[se/etc/xsd/2-soap.xsd]]></name>
			<revision>1.1.2.1</revision>
		</file>
		<file>
			<name><![CDATA[se/etc/xsd/3-addressing.xsd]]></name>
			<revision>1.1.2.1</revision>
		</file>
		<file>
			<name><![CDATA[se/etc/xsd/3-identity.xsd]]></name>
			<revision>1.1.2.1</revision>
		</file>
		<file>
			<name><![CDATA[se/etc/xsd/4-enumeration.xsd]]></name>
			<revision>1.1.2.1</revision>
		</file>
		<file>
			<name><![CDATA[se/etc/xsd/4-eventing.xsd]]></name>
			<revision>1.1.2.1</revision>
		</file>
		<file>
			<name><![CDATA[se/etc/xsd/4-transfer.xsd]]></name>
			<revision>1.1.2.1</revision>
		</file>
		<file>
			<name><![CDATA[se/etc/xsd/5-management.xsd]]></name>
			<revision>1.1.2.1</revision>
		</file>
		<msg><![CDATA[Tomcat logging]]></msg>
	</entry>
	<entry>
		<date>2007-01-29</date>
		<time>16:48</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[tools/samples/trafficlight_client/build.xml]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.2.2;
Issue number:  68
Obtained from:
Submitted by:  denis_rachal
Reviewed by:

Updated sample client to use a single handler and new generated source files.]]></msg>
	</entry>
	<entry>
		<date>2006-11-15</date>
		<time>15:06</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/transport/ContentType.java]]></name>
			<revision>1.2</revision>
		</file>
		<msg><![CDATA[When a request comes in with no Content-type an NPE was being returned instead of a COntent-Type not acceptable message. We now chech for this condition.]]></msg>
	</entry>
	<entry>
		<date>2007-01-29</date>
		<time>16:48</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[tools/samples/trafficlight_server/wsdl/light.wsdl]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[tools/samples/trafficlight_server/wsdl/tl.wsdl]]></name>
			<revision>1.2</revision>
		</file>
		<file>
			<name><![CDATA[tools/samples/trafficlight_server/wsdl/traffic_light.wsdl]]></name>
			<revision>1.2</revision>
		</file>
		<msg><![CDATA[Issue number:  68
Obtained from:
Submitted by:  denis_rachal
Reviewed by:

Updated sample client to use a single handler and new generated source files.]]></msg>
	</entry>
	<entry>
		<date>2007-01-16</date>
		<time>11:26</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/build.xml]]></name>
			<revision>1.45</revision>
			<prevrevision>1.44</prevrevision>
		</file>
		<msg><![CDATA[Issue number:  59
Obtained from:
Submitted by:  jfdenise
Reviewed by:

Test classes removed from wiseman.jar file. Build now correctly palces these classes only in the Wiseman test war file: wsman.war.]]></msg>
	</entry>
	<entry>
		<date>2007-01-11</date>
		<time>13:20</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/etc/xsd/2-soap.xsd]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1.2.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/etc/xsd/4-enumeration.xsd]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1.2.1</prevrevision>
		</file>
		<msg><![CDATA[Wiseman on top of JAX-WS 2.0. Merge with jaxws_branch
Main changes:
- Removal of JAXB binaries from CVS.
  You will have to copy jaxws jars (you can download them from https://jax-ws.dev.java.net/jax-ws-20-fcs/) in lib/jaxws directory.
 (Planing to see how we can integrate the Maven java.net repository to express dependency we have on JAX-WS project.)
- Source code impact. Quite a lot but mainly rework of WsManServlet, introduced new WSManAgent and WSManJAXWSEndpoint.
  Rework of initialization, removal of various initialization() methods.
  New Message construction based on a SOAPMessage.
- Schemas location.They are now located in com.sun.ws.management.resources.schemas.
  They can be found as Resource from current ClassLoader. It is no more linked to Servlet.
  Custom schemas can still be provided thanks to ServletContext (as before)
  The schemas have been renamed, the ordering based on name has been replaced by a list in wiseman.properties file.
- JAXB Generation. Removal of the files from the repository.
  Generated file should be generated with the release of JAX-WS you selected.
  If we let the generated code in the CVS repository, we could ran into future compatibility problems.
  You have to call "generate-jaxb" manually.
- Build impact. New targets to build and deploy jax-ws compliant war (named wisman-jaxws.war)
- Tests. Removal of the automatic copy of JAXB/SAAJ jar in the tomcat /shared/lib.
  This is something that is nice but can easily break existing configuration.
  All existing tests and interop scenarii can be run with a Servlet based agent or with a JAX-WS one.
  Choose your target : "test" or "test-jaxws". The single difference between these 2 targets is deployment of the right war.
  J2SE deployment. WiseMan JAX-WS Endpoint can be deployed in JAX-WS http server (no more need of Servlet container),
  the build targets are currently commented due to Servlet dependency in Tests (If someone wants to rework a little bit handlers,
  we could have all tests passing indifferently on top of J2SE or J2EE!!!!). To play with such deployment, uncomment following
  ant build targets "deploy-j2se-jaxws" to start the agent side and "test-j2se-jaxws" to start the client side).
- misc: Commented the test.foo package from binding.properties.
- Trace. Removal of logging configuration file loading. Addition of a logging.properties file that is
  packaged in WEB-INF/classes in order to generate in <catalina-home>/logs a file that contains all wiseman traces.
  This is very useful when you are debugging tests. The generated file name is wiseman-<date of the day>.out]]></msg>
	</entry>
	<entry>
		<date>2006-10-10</date>
		<time>19:50</time>
		<author><![CDATA[nbeers]]></author>
		<file>
			<name><![CDATA[se/test/src/management/EnumerationTest.java]]></name>
			<revision>1.20</revision>
			<prevrevision>1.23.2.1</prevrevision>
		</file>
		<msg><![CDATA[Fix for issue 36 (Concurrent JAXB access fails in SOAP class).  Make the XMLBinding member variable of the SOAP class non-static and fix all references to it throughout the code.]]></msg>
	</entry>
	<entry>
		<date>2007-01-14</date>
		<time>17:52</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/BaseSupport.java]]></name>
			<revision>1.12</revision>
			<prevrevision>1.11</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/EnumerationSupport.java]]></name>
			<revision>1.42</revision>
			<prevrevision>1.41</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/Filter.java]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/IteratorFactory.java]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/NamespaceMap.java]]></name>
			<revision>1.6</revision>
		</file>
		<msg><![CDATA[

Changes with this submission:

51: Enhance EnumerationIterator IF to indicate iterator is already filtered.
52: Enumeration Pull may return zero objects when filtered.
53: Concurrent access to Enum context not protected

In addition the following items have been added:

1. EnumerationSupport, EnumerationHandler and EnumerationIterator have been
   completely reworked and simplified. An IteratorFactory interface has
   been added. Users wanting EnumerationSupport to handle their enumeration
   requests will need to port their iterator to the new EnumerationIterator
   interface, create an IteratorFactory and register their factory with
   EnumerationSupport.

   EnumerationSupport & EnumerationHandler are now able to support concurrent
   requests to a single resource URI.

   EnumerationSupport will now correctly detect "projections" in the filter
   and wrap the projected items within an XmlFragment. Projections are selections
   of a portion of a resource as opposed to the whole resource.

   EnumerationSupport will not filter or wrap in XmlFragment items returned from
   an iterator that returns true from EnumerationIterator.isFilter().

   The test User handler EnuerationUserHandler has been completely rewritten
   to now use the EnumerationSupport & is now split into UserEnumerationHandler,
   UserIteratorFactory & UserStore. They are used for testing and can be used
   as an example.

2. A filter unit test has been added. Several bugs were fixed in this area
   due to errors produced by this test. In particular, a namespace map was
   needed to be added to the client interfaces accepting a filter. This map
   contains the namespaces used in the filter expression. The namespaces are
   needed on the server side in order to properly evaluate the filter.
   Previously the namespaces for the document produced on the server side were
   passed to the XPath object. This was incorrect.

   Additionally NamespaceMap(Node node) was used on the server side to obtain
   the set of namespaces. This scanned the document from the specified node
   to the last child. This was incorrect. It needed to scan the document from
   the specified node to the root (opposite direction).

   Several support functions were added to process filtering on the server side.
   See below in item 3.

3. Several client and server interfaces have been enhanced to allow for easier
   handling of XmlFragment and filtering in general.
   EnumerationSupport has already been mentioned.

   EnumerationSupport has the added method:
   public static Filter createFilter(final Enumeration request)
   for easy creation of a Filter object from an Enumeration Request.
   EventingSupport & TransferExtensions have similar methods.

   BaseSupport has added two methods, createXmlFragment(List<Node>) &
   createXmlFragment(Nodelist) to ease creation of XmlFragment objects.
   TransferExtensions has done the same for use on the client side.

   The Filter interface was changed to return the filtered object as
   a Nodelist object rather than just a boolean. The Nodelist may contain
   projected elements if the filter contains a projection. The Nodelist
   can be diretly passed to BaseSupport.createXmlFragment(Nodelist)
   described above.

   Transfer.getResource(QName name) was added to easily get the resource object
   passed in Create, Update, & Delete requests.

   TransferExtensions.getResource(QName) overrides Transfer.getResource() and
   will check for XmlFragment objects if the QName object is not found.

   TransferExtensions.setFragmentGetResponse(
			final SOAPHeaderElement fragmentTransferHeader,
			final Object resource)

   has been added. This method will, using any registerd Filter handler,
   process the Fragment Transfer get against the provided resource object
   and set the result in the response. The resulting resource will
   automatically be wrapped into an XmlFragment for the caller and placed
   into the body of the repsonse. NOTE: results from applying the
   Fragment Transfer filter are always warpped in an XmlFragment by
   this method, whether the filter specified projections or not, as the caller
   specifically requested Fragment Transfer. This is not done for
   enumerations where the fragment transfer is mixed in with the wsman:filter.
   In the case of Enumerations if the filter selects the entire resource
   it is not wrapped in an XmlFragment.

   If setFragmentGetResponse() is called with fragmentTransferHeader set
   to null the method will simply put the resource object into the body of
   the response for the caller.

   NOTE: More work is needed on the client side to make, so I have listed/closed
         issue #24: Client fragment support should be simplified

4. To run the tests the "se/src/binding.properties" file MUST be edited first.
   Uncomment the line:

   com.sun.ws.management.xml.custom.packagenames = foo.test,com.hp.examples.ws.wsman.user

   This is needed for some tests to correctly execute.

5. I could NOT correctly build the JAXB Object Factory sources using the build.xml.
   All sources were built and compiled OK, but some tests failed. The reason is that
   attempts to add the "mustUnderstand" attribute to a header did not work. The
   call did not produce an error, but the header did not have the attribute. I
   duplicated this problem on two different system. Eventually I used the source
   that was previously built with JAXB and the tests then passed.

6. testMaxEnvelopeSizeTooBig() fails for test-jaxws. I do not know why. It is the
   only test that failed for me, though. I commented it out for my tests.]]></msg>
	</entry>
	<entry>
		<date>2006-12-05</date>
		<time>10:35</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/handler/wsman/test/fragment_Handler.java]]></name>
			<revision>1.12</revision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/xml/XPath.java]]></name>
			<revision>1.9</revision>
		</file>
		<file>
			<name><![CDATA[se/test/src/management/EnumerationTest.java]]></name>
			<revision>1.22</revision>
			<prevrevision>1.21</prevrevision>
		</file>
		<msg><![CDATA[Fix for Supporting multiple Filter dialects : https://wiseman.dev.java.net/issues/show_bug.cgi?id=43]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:22</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/resources/schemas/eventing.xsd]]></name>
			<revision>1.1</revision>
			<prevrevision>1.1.2.1</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.1.2;
file eventing.xsd was initially added on branch jaxws_branch.]]></msg>
	</entry>
	<entry>
		<date>2007-01-14</date>
		<time>17:52</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/handler/wsman/test/enumeration/filter/custom_filter_Handler.java]]></name>
			<revision>1.3</revision>
			<prevrevision>1.2</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.3.2;


Changes with this submission:

51: Enhance EnumerationIterator IF to indicate iterator is already filtered.
52: Enumeration Pull may return zero objects when filtered.
53: Concurrent access to Enum context not protected

In addition the following items have been added:

1. EnumerationSupport, EnumerationHandler and EnumerationIterator have been
   completely reworked and simplified. An IteratorFactory interface has
   been added. Users wanting EnumerationSupport to handle their enumeration
   requests will need to port their iterator to the new EnumerationIterator
   interface, create an IteratorFactory and register their factory with
   EnumerationSupport.

   EnumerationSupport & EnumerationHandler are now able to support concurrent
   requests to a single resource URI.

   EnumerationSupport will now correctly detect "projections" in the filter
   and wrap the projected items within an XmlFragment. Projections are selections
   of a portion of a resource as opposed to the whole resource.

   EnumerationSupport will not filter or wrap in XmlFragment items returned from
   an iterator that returns true from EnumerationIterator.isFilter().

   The test User handler EnuerationUserHandler has been completely rewritten
   to now use the EnumerationSupport & is now split into UserEnumerationHandler,
   UserIteratorFactory & UserStore. They are used for testing and can be used
   as an example.

2. A filter unit test has been added. Several bugs were fixed in this area
   due to errors produced by this test. In particular, a namespace map was
   needed to be added to the client interfaces accepting a filter. This map
   contains the namespaces used in the filter expression. The namespaces are
   needed on the server side in order to properly evaluate the filter.
   Previously the namespaces for the document produced on the server side were
   passed to the XPath object. This was incorrect.

   Additionally NamespaceMap(Node node) was used on the server side to obtain
   the set of namespaces. This scanned the document from the specified node
   to the last child. This was incorrect. It needed to scan the document from
   the specified node to the root (opposite direction).

   Several support functions were added to process filtering on the server side.
   See below in item 3.

3. Several client and server interfaces have been enhanced to allow for easier
   handling of XmlFragment and filtering in general.
   EnumerationSupport has already been mentioned.

   EnumerationSupport has the added method:
   public static Filter createFilter(final Enumeration request)
   for easy creation of a Filter object from an Enumeration Request.
   EventingSupport & TransferExtensions have similar methods.

   BaseSupport has added two methods, createXmlFragment(List<Node>) &
   createXmlFragment(Nodelist) to ease creation of XmlFragment objects.
   TransferExtensions has done the same for use on the client side.

   The Filter interface was changed to return the filtered object as
   a Nodelist object rather than just a boolean. The Nodelist may contain
   projected elements if the filter contains a projection. The Nodelist
   can be diretly passed to BaseSupport.createXmlFragment(Nodelist)
   described above.

   Transfer.getResource(QName name) was added to easily get the resource object
   passed in Create, Update, & Delete requests.

   TransferExtensions.getResource(QName) overrides Transfer.getResource() and
   will check for XmlFragment objects if the QName object is not found.

   TransferExtensions.setFragmentGetResponse(
			final SOAPHeaderElement fragmentTransferHeader,
			final Object resource)

   has been added. This method will, using any registerd Filter handler,
   process the Fragment Transfer get against the provided resource object
   and set the result in the response. The resulting resource will
   automatically be wrapped into an XmlFragment for the caller and placed
   into the body of the repsonse. NOTE: results from applying the
   Fragment Transfer filter are always warpped in an XmlFragment by
   this method, whether the filter specified projections or not, as the caller
   specifically requested Fragment Transfer. This is not done for
   enumerations where the fragment transfer is mixed in with the wsman:filter.
   In the case of Enumerations if the filter selects the entire resource
   it is not wrapped in an XmlFragment.

   If setFragmentGetResponse() is called with fragmentTransferHeader set
   to null the method will simply put the resource object into the body of
   the response for the caller.

   NOTE: More work is needed on the client side to make, so I have listed/closed
         issue #24: Client fragment support should be simplified

4. To run the tests the "se/src/binding.properties" file MUST be edited first.
   Uncomment the line:

   com.sun.ws.management.xml.custom.packagenames = foo.test,com.hp.examples.ws.wsman.user

   This is needed for some tests to correctly execute.

5. I could NOT correctly build the JAXB Object Factory sources using the build.xml.
   All sources were built and compiled OK, but some tests failed. The reason is that
   attempts to add the "mustUnderstand" attribute to a header did not work. The
   call did not produce an error, but the header did not have the attribute. I
   duplicated this problem on two different system. Eventually I used the source
   that was previously built with JAXB and the tests then passed.

6. testMaxEnvelopeSizeTooBig() fails for test-jaxws. I do not know why. It is the
   only test that failed for me, though. I commented it out for my tests.]]></msg>
	</entry>
	<entry>
		<date>2007-01-17</date>
		<time>19:12</time>
		<author><![CDATA[nbeers]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/framework/transfer/TransferSupport.java]]></name>
			<revision>1.6</revision>
			<prevrevision>1.5</prevrevision>
		</file>
		<msg><![CDATA[Pull up common methods from UserHandler to shared TransferSupport.]]></msg>
	</entry>
	<entry>
		<date>2007-01-14</date>
		<time>17:53</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/test/src/management/EnumerationTest.java]]></name>
			<revision>1.25</revision>
			<prevrevision>1.24</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.25.2;


Changes with this submission:

51: Enhance EnumerationIterator IF to indicate iterator is already filtered.
52: Enumeration Pull may return zero objects when filtered.
53: Concurrent access to Enum context not protected

In addition the following items have been added:

1. EnumerationSupport, EnumerationHandler and EnumerationIterator have been
   completely reworked and simplified. An IteratorFactory interface has
   been added. Users wanting EnumerationSupport to handle their enumeration
   requests will need to port their iterator to the new EnumerationIterator
   interface, create an IteratorFactory and register their factory with
   EnumerationSupport.

   EnumerationSupport & EnumerationHandler are now able to support concurrent
   requests to a single resource URI.

   EnumerationSupport will now correctly detect "projections" in the filter
   and wrap the projected items within an XmlFragment. Projections are selections
   of a portion of a resource as opposed to the whole resource.

   EnumerationSupport will not filter or wrap in XmlFragment items returned from
   an iterator that returns true from EnumerationIterator.isFilter().

   The test User handler EnuerationUserHandler has been completely rewritten
   to now use the EnumerationSupport & is now split into UserEnumerationHandler,
   UserIteratorFactory & UserStore. They are used for testing and can be used
   as an example.

2. A filter unit test has been added. Several bugs were fixed in this area
   due to errors produced by this test. In particular, a namespace map was
   needed to be added to the client interfaces accepting a filter. This map
   contains the namespaces used in the filter expression. The namespaces are
   needed on the server side in order to properly evaluate the filter.
   Previously the namespaces for the document produced on the server side were
   passed to the XPath object. This was incorrect.

   Additionally NamespaceMap(Node node) was used on the server side to obtain
   the set of namespaces. This scanned the document from the specified node
   to the last child. This was incorrect. It needed to scan the document from
   the specified node to the root (opposite direction).

   Several support functions were added to process filtering on the server side.
   See below in item 3.

3. Several client and server interfaces have been enhanced to allow for easier
   handling of XmlFragment and filtering in general.
   EnumerationSupport has already been mentioned.

   EnumerationSupport has the added method:
   public static Filter createFilter(final Enumeration request)
   for easy creation of a Filter object from an Enumeration Request.
   EventingSupport & TransferExtensions have similar methods.

   BaseSupport has added two methods, createXmlFragment(List<Node>) &
   createXmlFragment(Nodelist) to ease creation of XmlFragment objects.
   TransferExtensions has done the same for use on the client side.

   The Filter interface was changed to return the filtered object as
   a Nodelist object rather than just a boolean. The Nodelist may contain
   projected elements if the filter contains a projection. The Nodelist
   can be diretly passed to BaseSupport.createXmlFragment(Nodelist)
   described above.

   Transfer.getResource(QName name) was added to easily get the resource object
   passed in Create, Update, & Delete requests.

   TransferExtensions.getResource(QName) overrides Transfer.getResource() and
   will check for XmlFragment objects if the QName object is not found.

   TransferExtensions.setFragmentGetResponse(
			final SOAPHeaderElement fragmentTransferHeader,
			final Object resource)

   has been added. This method will, using any registerd Filter handler,
   process the Fragment Transfer get against the provided resource object
   and set the result in the response. The resulting resource will
   automatically be wrapped into an XmlFragment for the caller and placed
   into the body of the repsonse. NOTE: results from applying the
   Fragment Transfer filter are always warpped in an XmlFragment by
   this method, whether the filter specified projections or not, as the caller
   specifically requested Fragment Transfer. This is not done for
   enumerations where the fragment transfer is mixed in with the wsman:filter.
   In the case of Enumerations if the filter selects the entire resource
   it is not wrapped in an XmlFragment.

   If setFragmentGetResponse() is called with fragmentTransferHeader set
   to null the method will simply put the resource object into the body of
   the response for the caller.

   NOTE: More work is needed on the client side to make, so I have listed/closed
         issue #24: Client fragment support should be simplified

4. To run the tests the "se/src/binding.properties" file MUST be edited first.
   Uncomment the line:

   com.sun.ws.management.xml.custom.packagenames = foo.test,com.hp.examples.ws.wsman.user

   This is needed for some tests to correctly execute.

5. I could NOT correctly build the JAXB Object Factory sources using the build.xml.
   All sources were built and compiled OK, but some tests failed. The reason is that
   attempts to add the "mustUnderstand" attribute to a header did not work. The
   call did not produce an error, but the header did not have the attribute. I
   duplicated this problem on two different system. Eventually I used the source
   that was previously built with JAXB and the tests then passed.

6. testMaxEnvelopeSizeTooBig() fails for test-jaxws. I do not know why. It is the
   only test that failed for me, though. I commented it out for my tests.]]></msg>
	</entry>
	<entry>
		<date>2007-01-30</date>
		<time>12:26</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/eventing/Eventing.java]]></name>
			<revision>1.11</revision>
			<prevrevision>1.10</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.11.2;
Changes required to work with JAXB 2.1.2.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:24</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/HandlerContext.java]]></name>
			<revision>1.1.2.1</revision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/ReflectiveRequestDispatcher.java]]></name>
			<revision>1.17.2.1</revision>
		</file>
		<msg><![CDATA[Core changes implied by JAX-WS 2.0 integration]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:50</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/etc/logging.properties]]></name>
			<revision>1.1</revision>
			<prevrevision>1.1.2.1</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.1.2;
file logging.properties was initially added on branch jaxws_branch.]]></msg>
	</entry>
	<entry>
		<date>2006-10-10</date>
		<time>19:50</time>
		<author><![CDATA[nbeers]]></author>
		<file>
			<name><![CDATA[se/test/src/demo/CmdLineDemo.java]]></name>
			<revision>1.13</revision>
			<prevrevision>1.13.2.1</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.13.2;
Fix for issue 36 (Concurrent JAXB access fails in SOAP class).  Make the XMLBinding member variable of the SOAP class non-static and fix all references to it throughout the code.]]></msg>
	</entry>
	<entry>
		<date>2006-09-29</date>
		<time>17:15</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[client/test/com/sun/ws/management/client/impl/ResourceImplTest.java]]></name>
			<revision>1.11</revision>
			<prevrevision>1.10</prevrevision>
		</file>
		<msg><![CDATA[This checkin completes implementation of Invoke support.]]></msg>
	</entry>
	<entry>
		<date>2006-12-19</date>
		<time>15:25</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/enumeration/EnumerationExtensions.java]]></name>
			<revision>1.9</revision>
			<prevrevision>1.8</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/test/src/interop/_06/InteropTest.java]]></name>
			<revision>1.19</revision>
			<prevrevision>1.18</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/test/src/management/EnumerationExtensionsTest.java]]></name>
			<revision>1.8</revision>
			<prevrevision>1.7</prevrevision>
		</file>
		<msg><![CDATA[Issue number:  47
Obtained from:
Submitted by:  jfdenise
Reviewed by:

unbindItem() now supports custom packages.]]></msg>
	</entry>
	<entry>
		<date>2006-12-13</date>
		<time>09:11</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/test/src/management/EnumerationExtensionsTest.java]]></name>
			<revision>1.7</revision>
			<prevrevision>1.6</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.7.2;
Issue number:  18
Obtained from:
Submitted by:  akhilarora
Reviewed by:

Cleaned up code in Enumeration & EnumerationExtensions. All WS Management extensions are now located in EnumerationExtensions. Enumeration is for WS Enumeration without the WS Management extensions.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>10:13</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/wsman.properties]]></name>
			<revision>1.5.2.1</revision>
			<prevrevision>1.8.2.1</prevrevision>
		</file>
		<msg><![CDATA[Schema list]]></msg>
	</entry>
	<entry>
		<date>2006-12-11</date>
		<time>16:20</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[client/src/com/sun/ws/management/client/impl/EnumerationResourceImpl.java]]></name>
			<revision>1.15</revision>
			<prevrevision>1.14</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/test/src/management/EnumerationExtensionsTest.java]]></name>
			<revision>1.6</revision>
			<prevrevision>1.7.2.1</prevrevision>
		</file>
		<msg><![CDATA[Issue number:  18
Obtained from: Wiseman
Submitted by:  akhilarora
Reviewed by:
CVS: ----------------------------------------------------------------------
CVS: Issue number:18
CVS:   If this change addresses one or more issues,
CVS:   then enter the issue number(s) here.
CVS: Obtained from:
CVS:   If this change has been taken from another system,
CVS:   then name the system in this line, otherwise delete it.
CVS: Submitted by:
CVS:   If this code has been contributed to the project by someone else; i.e.,
CVS:   they sent us a patch or a set of diffs, then include their name/email
CVS:   address here. If this is your work then delete this line.
CVS: Reviewed by:
CVS:   If we are doing pre-commit code reviews and someone else has
CVS:   reviewed your changes, include their name(s) here.
CVS:   If you have not had it reviewed then delete this line.

Enumeration now supports wsman:item wrapper.]]></msg>
	</entry>
	<entry>
		<date>2007-01-11</date>
		<time>13:12</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/binding.properties]]></name>
			<revision>1.4</revision>
			<prevrevision>1.3</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/EnumerationSupport.java]]></name>
			<revision>1.41</revision>
			<prevrevision>1.40</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/handler/wsman/test/enumeration/filter/custom_filter_Handler.java]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/handler/wsman/test/java/system/properties_Handler.java]]></name>
			<revision>1.17</revision>
			<prevrevision>1.16.2.1</prevrevision>
		</file>
		<msg><![CDATA[Wiseman on top of JAX-WS 2.0. Merge with jaxws_branch.
Main changes:
- Removal of JAXB binaries from CVS.
  You will have to copy jaxws jars (you can download them from https://jax-ws.dev.java.net/jax-ws-20-fcs/) in lib/jaxws directory.
 (Planing to see how we can integrate the Maven java.net repository to express dependency we have on JAX-WS project.)
- Source code impact. Quite a lot but mainly rework of WsManServlet, introduced new WSManAgent and WSManJAXWSEndpoint.
  Rework of initialization, removal of various initialization() methods.
  New Message construction based on a SOAPMessage.
- Schemas location.They are now located in com.sun.ws.management.resources.schemas.
  They can be found as Resource from current ClassLoader. It is no more linked to Servlet.
  Custom schemas can still be provided thanks to ServletContext (as before)
  The schemas have been renamed, the ordering based on name has been replaced by a list in wiseman.properties file.
- JAXB Generation. Removal of the files from the repository.
  Generated file should be generated with the release of JAX-WS you selected.
  If we let the generated code in the CVS repository, we could ran into future compatibility problems.
  You have to call "generate-jaxb" manually.
- Build impact. New targets to build and deploy jax-ws compliant war (named wisman-jaxws.war)
- Tests. Removal of the automatic copy of JAXB/SAAJ jar in the tomcat /shared/lib.
  This is something that is nice but can easily break existing configuration.
  All existing tests and interop scenarii can be run with a Servlet based agent or with a JAX-WS one.
  Choose your target : "test" or "test-jaxws". The single difference between these 2 targets is deployment of the right war.
  J2SE deployment. WiseMan JAX-WS Endpoint can be deployed in JAX-WS http server (no more need of Servlet container),
  the build targets are currently commented due to Servlet dependency in Tests (If someone wants to rework a little bit handlers,
  we could have all tests passing indifferently on top of J2SE or J2EE!!!!). To play with such deployment, uncomment following
  ant build targets "deploy-j2se-jaxws" to start the agent side and "test-j2se-jaxws" to start the client side).
- misc: Commented the test.foo package from binding.properties.
- Trace. Removal of logging configuration file loading. Addition of a logging.properties file that is
  packaged in WEB-INF/classes in order to generate in <catalina-home>/logs a file that contains all wiseman traces.
  This is very useful when you are debugging tests. The generated file name is wiseman-<date of the day>.out]]></msg>
	</entry>
	<entry>
		<date>2007-01-11</date>
		<time>13:19</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/resources/schemas/enumeration.xsd]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/resources/schemas/soap.xsd]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1</prevrevision>
		</file>
		<msg><![CDATA[Wiseman on top of JAX-WS 2.0. Merge with jaxws_branch
Main changes:
- Removal of JAXB binaries from CVS.
  You will have to copy jaxws jars (you can download them from https://jax-ws.dev.java.net/jax-ws-20-fcs/) in lib/jaxws directory.
 (Planing to see how we can integrate the Maven java.net repository to express dependency we have on JAX-WS project.)
- Source code impact. Quite a lot but mainly rework of WsManServlet, introduced new WSManAgent and WSManJAXWSEndpoint.
  Rework of initialization, removal of various initialization() methods.
  New Message construction based on a SOAPMessage.
- Schemas location.They are now located in com.sun.ws.management.resources.schemas.
  They can be found as Resource from current ClassLoader. It is no more linked to Servlet.
  Custom schemas can still be provided thanks to ServletContext (as before)
  The schemas have been renamed, the ordering based on name has been replaced by a list in wiseman.properties file.
- JAXB Generation. Removal of the files from the repository.
  Generated file should be generated with the release of JAX-WS you selected.
  If we let the generated code in the CVS repository, we could ran into future compatibility problems.
  You have to call "generate-jaxb" manually.
- Build impact. New targets to build and deploy jax-ws compliant war (named wisman-jaxws.war)
- Tests. Removal of the automatic copy of JAXB/SAAJ jar in the tomcat /shared/lib.
  This is something that is nice but can easily break existing configuration.
  All existing tests and interop scenarii can be run with a Servlet based agent or with a JAX-WS one.
  Choose your target : "test" or "test-jaxws". The single difference between these 2 targets is deployment of the right war.
  J2SE deployment. WiseMan JAX-WS Endpoint can be deployed in JAX-WS http server (no more need of Servlet container),
  the build targets are currently commented due to Servlet dependency in Tests (If someone wants to rework a little bit handlers,
  we could have all tests passing indifferently on top of J2SE or J2EE!!!!). To play with such deployment, uncomment following
  ant build targets "deploy-j2se-jaxws" to start the agent side and "test-j2se-jaxws" to start the client side).
- misc: Commented the test.foo package from binding.properties.
- Trace. Removal of logging configuration file loading. Addition of a logging.properties file that is
  packaged in WEB-INF/classes in order to generate in <catalina-home>/logs a file that contains all wiseman traces.
  This is very useful when you are debugging tests. The generated file name is wiseman-<date of the day>.out]]></msg>
	</entry>
	<entry>
		<date>2007-01-14</date>
		<time>17:53</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/test/src/management/EventingExtensionsTest.java]]></name>
			<revision>1.9</revision>
			<prevrevision>1.9.2.1</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.9.2;


Changes with this submission:

51: Enhance EnumerationIterator IF to indicate iterator is already filtered.
52: Enumeration Pull may return zero objects when filtered.
53: Concurrent access to Enum context not protected

In addition the following items have been added:

1. EnumerationSupport, EnumerationHandler and EnumerationIterator have been
   completely reworked and simplified. An IteratorFactory interface has
   been added. Users wanting EnumerationSupport to handle their enumeration
   requests will need to port their iterator to the new EnumerationIterator
   interface, create an IteratorFactory and register their factory with
   EnumerationSupport.

   EnumerationSupport & EnumerationHandler are now able to support concurrent
   requests to a single resource URI.

   EnumerationSupport will now correctly detect "projections" in the filter
   and wrap the projected items within an XmlFragment. Projections are selections
   of a portion of a resource as opposed to the whole resource.

   EnumerationSupport will not filter or wrap in XmlFragment items returned from
   an iterator that returns true from EnumerationIterator.isFilter().

   The test User handler EnuerationUserHandler has been completely rewritten
   to now use the EnumerationSupport & is now split into UserEnumerationHandler,
   UserIteratorFactory & UserStore. They are used for testing and can be used
   as an example.

2. A filter unit test has been added. Several bugs were fixed in this area
   due to errors produced by this test. In particular, a namespace map was
   needed to be added to the client interfaces accepting a filter. This map
   contains the namespaces used in the filter expression. The namespaces are
   needed on the server side in order to properly evaluate the filter.
   Previously the namespaces for the document produced on the server side were
   passed to the XPath object. This was incorrect.

   Additionally NamespaceMap(Node node) was used on the server side to obtain
   the set of namespaces. This scanned the document from the specified node
   to the last child. This was incorrect. It needed to scan the document from
   the specified node to the root (opposite direction).

   Several support functions were added to process filtering on the server side.
   See below in item 3.

3. Several client and server interfaces have been enhanced to allow for easier
   handling of XmlFragment and filtering in general.
   EnumerationSupport has already been mentioned.

   EnumerationSupport has the added method:
   public static Filter createFilter(final Enumeration request)
   for easy creation of a Filter object from an Enumeration Request.
   EventingSupport & TransferExtensions have similar methods.

   BaseSupport has added two methods, createXmlFragment(List<Node>) &
   createXmlFragment(Nodelist) to ease creation of XmlFragment objects.
   TransferExtensions has done the same for use on the client side.

   The Filter interface was changed to return the filtered object as
   a Nodelist object rather than just a boolean. The Nodelist may contain
   projected elements if the filter contains a projection. The Nodelist
   can be diretly passed to BaseSupport.createXmlFragment(Nodelist)
   described above.

   Transfer.getResource(QName name) was added to easily get the resource object
   passed in Create, Update, & Delete requests.

   TransferExtensions.getResource(QName) overrides Transfer.getResource() and
   will check for XmlFragment objects if the QName object is not found.

   TransferExtensions.setFragmentGetResponse(
			final SOAPHeaderElement fragmentTransferHeader,
			final Object resource)

   has been added. This method will, using any registerd Filter handler,
   process the Fragment Transfer get against the provided resource object
   and set the result in the response. The resulting resource will
   automatically be wrapped into an XmlFragment for the caller and placed
   into the body of the repsonse. NOTE: results from applying the
   Fragment Transfer filter are always warpped in an XmlFragment by
   this method, whether the filter specified projections or not, as the caller
   specifically requested Fragment Transfer. This is not done for
   enumerations where the fragment transfer is mixed in with the wsman:filter.
   In the case of Enumerations if the filter selects the entire resource
   it is not wrapped in an XmlFragment.

   If setFragmentGetResponse() is called with fragmentTransferHeader set
   to null the method will simply put the resource object into the body of
   the response for the caller.

   NOTE: More work is needed on the client side to make, so I have listed/closed
         issue #24: Client fragment support should be simplified

4. To run the tests the "se/src/binding.properties" file MUST be edited first.
   Uncomment the line:

   com.sun.ws.management.xml.custom.packagenames = foo.test,com.hp.examples.ws.wsman.user

   This is needed for some tests to correctly execute.

5. I could NOT correctly build the JAXB Object Factory sources using the build.xml.
   All sources were built and compiled OK, but some tests failed. The reason is that
   attempts to add the "mustUnderstand" attribute to a header did not work. The
   call did not produce an error, but the header did not have the attribute. I
   duplicated this problem on two different system. Eventually I used the source
   that was previously built with JAXB and the tests then passed.

6. testMaxEnvelopeSizeTooBig() fails for test-jaxws. I do not know why. It is the
   only test that failed for me, though. I commented it out for my tests.]]></msg>
	</entry>
	<entry>
		<date>2006-09-27</date>
		<time>15:12</time>
		<author><![CDATA[nbeers]]></author>
		<file>
			<name><![CDATA[client/src/com/sun/ws/management/client/ResourceFactory.java]]></name>
			<revision>1.6</revision>
			<prevrevision>1.5</prevrevision>
		</file>
		<file>
			<name><![CDATA[client/src/com/sun/ws/management/client/TransferableResource.java]]></name>
			<revision>1.5</revision>
		</file>
		<file>
			<name><![CDATA[client/src/com/sun/ws/management/client/impl/EnumerationResourceImpl.java]]></name>
			<revision>1.9</revision>
		</file>
		<file>
			<name><![CDATA[client/src/com/sun/ws/management/client/impl/TransferableResourceImpl.java]]></name>
			<revision>1.6</revision>
		</file>
		<msg><![CDATA[Fix for issue 35.  Add the ability for the client to specify Option Sets.]]></msg>
	</entry>
	<entry>
		<date>2007-01-26</date>
		<time>15:11</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[tools/samples/trafficlight_client/project.properties]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[tools/samples/trafficlight_server/build.xml]]></name>
			<revision>1.3</revision>
			<prevrevision>1.4.2.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[tools/samples/trafficlight_server/project.properties]]></name>
			<revision>1.4</revision>
		</file>
		<msg><![CDATA[Issue number:  61
Obtained from:
Submitted by:  denis_rachal
Reviewed by:

Templates for code generation have been updated to run with new Enumeration interfaces.

Samples programs updated to run with newer Enumeration interfaces.

Sample documentation updated.

Build project files updated for sample ant builds.

Eclipse project files added for sample builds.]]></msg>
	</entry>
	<entry>
		<date>2007-01-18</date>
		<time>08:43</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/test/src/management/EnumerationFilterTest.java]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1</prevrevision>
		</file>
		<msg><![CDATA[Issue number:  63
Obtained from:
Submitted by:  denis_rachal
Reviewed by:

Code changed in BaseSupport as described in defect. Filter test updated to add test for text() function.]]></msg>
	</entry>
	<entry>
		<date>2007-01-14</date>
		<time>17:53</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/test/src/framework/EnumerationTestCase.java]]></name>
			<revision>1.3</revision>
			<prevrevision>1.2</prevrevision>
		</file>
		<msg><![CDATA[

Changes with this submission:

51: Enhance EnumerationIterator IF to indicate iterator is already filtered.
52: Enumeration Pull may return zero objects when filtered.
53: Concurrent access to Enum context not protected

In addition the following items have been added:

1. EnumerationSupport, EnumerationHandler and EnumerationIterator have been
   completely reworked and simplified. An IteratorFactory interface has
   been added. Users wanting EnumerationSupport to handle their enumeration
   requests will need to port their iterator to the new EnumerationIterator
   interface, create an IteratorFactory and register their factory with
   EnumerationSupport.

   EnumerationSupport & EnumerationHandler are now able to support concurrent
   requests to a single resource URI.

   EnumerationSupport will now correctly detect "projections" in the filter
   and wrap the projected items within an XmlFragment. Projections are selections
   of a portion of a resource as opposed to the whole resource.

   EnumerationSupport will not filter or wrap in XmlFragment items returned from
   an iterator that returns true from EnumerationIterator.isFilter().

   The test User handler EnuerationUserHandler has been completely rewritten
   to now use the EnumerationSupport & is now split into UserEnumerationHandler,
   UserIteratorFactory & UserStore. They are used for testing and can be used
   as an example.

2. A filter unit test has been added. Several bugs were fixed in this area
   due to errors produced by this test. In particular, a namespace map was
   needed to be added to the client interfaces accepting a filter. This map
   contains the namespaces used in the filter expression. The namespaces are
   needed on the server side in order to properly evaluate the filter.
   Previously the namespaces for the document produced on the server side were
   passed to the XPath object. This was incorrect.

   Additionally NamespaceMap(Node node) was used on the server side to obtain
   the set of namespaces. This scanned the document from the specified node
   to the last child. This was incorrect. It needed to scan the document from
   the specified node to the root (opposite direction).

   Several support functions were added to process filtering on the server side.
   See below in item 3.

3. Several client and server interfaces have been enhanced to allow for easier
   handling of XmlFragment and filtering in general.
   EnumerationSupport has already been mentioned.

   EnumerationSupport has the added method:
   public static Filter createFilter(final Enumeration request)
   for easy creation of a Filter object from an Enumeration Request.
   EventingSupport & TransferExtensions have similar methods.

   BaseSupport has added two methods, createXmlFragment(List<Node>) &
   createXmlFragment(Nodelist) to ease creation of XmlFragment objects.
   TransferExtensions has done the same for use on the client side.

   The Filter interface was changed to return the filtered object as
   a Nodelist object rather than just a boolean. The Nodelist may contain
   projected elements if the filter contains a projection. The Nodelist
   can be diretly passed to BaseSupport.createXmlFragment(Nodelist)
   described above.

   Transfer.getResource(QName name) was added to easily get the resource object
   passed in Create, Update, & Delete requests.

   TransferExtensions.getResource(QName) overrides Transfer.getResource() and
   will check for XmlFragment objects if the QName object is not found.

   TransferExtensions.setFragmentGetResponse(
			final SOAPHeaderElement fragmentTransferHeader,
			final Object resource)

   has been added. This method will, using any registerd Filter handler,
   process the Fragment Transfer get against the provided resource object
   and set the result in the response. The resulting resource will
   automatically be wrapped into an XmlFragment for the caller and placed
   into the body of the repsonse. NOTE: results from applying the
   Fragment Transfer filter are always warpped in an XmlFragment by
   this method, whether the filter specified projections or not, as the caller
   specifically requested Fragment Transfer. This is not done for
   enumerations where the fragment transfer is mixed in with the wsman:filter.
   In the case of Enumerations if the filter selects the entire resource
   it is not wrapped in an XmlFragment.

   If setFragmentGetResponse() is called with fragmentTransferHeader set
   to null the method will simply put the resource object into the body of
   the response for the caller.

   NOTE: More work is needed on the client side to make, so I have listed/closed
         issue #24: Client fragment support should be simplified

4. To run the tests the "se/src/binding.properties" file MUST be edited first.
   Uncomment the line:

   com.sun.ws.management.xml.custom.packagenames = foo.test,com.hp.examples.ws.wsman.user

   This is needed for some tests to correctly execute.

5. I could NOT correctly build the JAXB Object Factory sources using the build.xml.
   All sources were built and compiled OK, but some tests failed. The reason is that
   attempts to add the "mustUnderstand" attribute to a header did not work. The
   call did not produce an error, but the header did not have the attribute. I
   duplicated this problem on two different system. Eventually I used the source
   that was previously built with JAXB and the tests then passed.

6. testMaxEnvelopeSizeTooBig() fails for test-jaxws. I do not know why. It is the
   only test that failed for me, though. I commented it out for my tests.]]></msg>
	</entry>
	<entry>
		<date>2007-01-23</date>
		<time>06:28</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/test/src/framework/models/UserIteratorFactory.java]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1</prevrevision>
		</file>
		<msg><![CDATA[Test fixed. Test Iterator did not work correctly when option was set to have Iterator do the filtering and EPRs were requested. Test now works as it should.]]></msg>
	</entry>
	<entry>
		<date>2007-01-22</date>
		<time>15:59</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/EnumerationSupport.java]]></name>
			<revision>1.43</revision>
			<prevrevision>1.42</prevrevision>
		</file>
		<msg><![CDATA[Issue number:  65
Obtained from:
Submitted by:  denis_rachal
Reviewed by:

Code corrected to no longer delete context and through timed out fault only when there is no data.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>14:56</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/test/src/interop/_06/InteropTest.java]]></name>
			<revision>1.18.2.1</revision>
		</file>
		<file>
			<name><![CDATA[se/test/src/management/EnumerationExtensionsTest.java]]></name>
			<revision>1.7.2.1</revision>
			<prevrevision>1.10.2.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/test/src/management/EnumerationTest.java]]></name>
			<revision>1.23.2.1</revision>
			<prevrevision>1.25.2.1</prevrevision>
		</file>
		<msg><![CDATA[Merge with rachal fixes]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:28</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/test/src/server/JAXWSAgent.java]]></name>
			<revision>1.1</revision>
			<prevrevision>1.1.2.1</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.1.2;
file JAXWSAgent.java was initially added on branch jaxws_branch.]]></msg>
	</entry>
	<entry>
		<date>2006-12-13</date>
		<time>09:11</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/test/src/management/EnumerationTest.java]]></name>
			<revision>1.23</revision>
			<prevrevision>1.22</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.23.2;
Issue number:  18
Obtained from:
Submitted by:  akhilarora
Reviewed by:

Cleaned up code in Enumeration & EnumerationExtensions. All WS Management extensions are now located in EnumerationExtensions. Enumeration is for WS Enumeration without the WS Management extensions.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:25</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/handler/org/dmtf/schemas/wbem/wscim/_1/cim_schema/_2/cim_computersystem_Handler.java]]></name>
			<revision>1.2.2.1</revision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/handler/org/dmtf/schemas/wbem/wscim/_1/cim_schema/_2/cim_numericsensor_Handler.java]]></name>
			<revision>1.5.2.1</revision>
			<prevrevision>1.8.2.1</prevrevision>
		</file>
		<msg><![CDATA[HandlerContext changes side effect]]></msg>
	</entry>
	<entry>
		<date>2007-01-26</date>
		<time>16:42</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[tools/samples/ant_install.bat]]></name>
			<revision>1.3</revision>
		</file>
		<file>
			<name><![CDATA[tools/samples/ant_install.sh]]></name>
			<revision>1.2</revision>
		</file>
		<msg><![CDATA[Issue number:  61
Obtained from:
Submitted by:  denis_rachal
Reviewed by:

Remove scripts that are no longer needed.]]></msg>
	</entry>
	<entry>
		<date>2006-10-16</date>
		<time>14:50</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[se/test/src/framework/models/EnumerationUserHandler.java]]></name>
			<revision>1.6</revision>
			<prevrevision>1.4</prevrevision>
		</file>
		<msg><![CDATA[Issue number:  42
Refactored Handler Context all the way down the stack into all generated or framework based code and examples.----------------------------
revision 1.5
date: 2006/10/10 19:50:46;  author: nbeers;  state: Exp;  lines: +7 -6
Fix for issue 36 (Concurrent JAXB access fails in SOAP class).  Make the XMLBinding member variable of the SOAP class non-static and fix all references to it throughout the code.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>10:18</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/wsman.properties]]></name>
			<revision>1.5.2.2</revision>
			<prevrevision>1.5.2.1</prevrevision>
		</file>
		<msg><![CDATA[Added comments for schema list.]]></msg>
	</entry>
	<entry>
		<date>2006-09-29</date>
		<time>15:18</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[client/src/com/sun/ws/management/client/impl/EnumerationResourceImpl.java]]></name>
			<revision>1.10</revision>
			<prevrevision>1.9</prevrevision>
		</file>
		<file>
			<name><![CDATA[client/src/com/sun/ws/management/client/impl/TransferableResourceImpl.java]]></name>
			<revision>1.7</revision>
			<prevrevision>1.6</prevrevision>
		</file>
		<msg><![CDATA[My previous change introduced some refactoring I was doing to implement invoke for ResourceImpl. These changes are required to keep the client buildable. Invoke is not completely tested yet.]]></msg>
	</entry>
	<entry>
		<date>2007-01-14</date>
		<time>17:52</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/UnsupportedFeatureFault.java]]></name>
			<revision>1.3</revision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/eventing/Eventing.java]]></name>
			<revision>1.10</revision>
			<prevrevision>1.11.2.1</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/eventing/EventingExtensions.java]]></name>
			<revision>1.5</revision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/EnumerationIterator.java]]></name>
			<revision>1.10</revision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/xml/XPathFilterFactory.java]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1</prevrevision>
		</file>
		<msg><![CDATA[

Changes with this submission:

51: Enhance EnumerationIterator IF to indicate iterator is already filtered.
52: Enumeration Pull may return zero objects when filtered.
53: Concurrent access to Enum context not protected

In addition the following items have been added:

1. EnumerationSupport, EnumerationHandler and EnumerationIterator have been
   completely reworked and simplified. An IteratorFactory interface has
   been added. Users wanting EnumerationSupport to handle their enumeration
   requests will need to port their iterator to the new EnumerationIterator
   interface, create an IteratorFactory and register their factory with
   EnumerationSupport.

   EnumerationSupport & EnumerationHandler are now able to support concurrent
   requests to a single resource URI.

   EnumerationSupport will now correctly detect "projections" in the filter
   and wrap the projected items within an XmlFragment. Projections are selections
   of a portion of a resource as opposed to the whole resource.

   EnumerationSupport will not filter or wrap in XmlFragment items returned from
   an iterator that returns true from EnumerationIterator.isFilter().

   The test User handler EnuerationUserHandler has been completely rewritten
   to now use the EnumerationSupport & is now split into UserEnumerationHandler,
   UserIteratorFactory & UserStore. They are used for testing and can be used
   as an example.

2. A filter unit test has been added. Several bugs were fixed in this area
   due to errors produced by this test. In particular, a namespace map was
   needed to be added to the client interfaces accepting a filter. This map
   contains the namespaces used in the filter expression. The namespaces are
   needed on the server side in order to properly evaluate the filter.
   Previously the namespaces for the document produced on the server side were
   passed to the XPath object. This was incorrect.

   Additionally NamespaceMap(Node node) was used on the server side to obtain
   the set of namespaces. This scanned the document from the specified node
   to the last child. This was incorrect. It needed to scan the document from
   the specified node to the root (opposite direction).

   Several support functions were added to process filtering on the server side.
   See below in item 3.

3. Several client and server interfaces have been enhanced to allow for easier
   handling of XmlFragment and filtering in general.
   EnumerationSupport has already been mentioned.

   EnumerationSupport has the added method:
   public static Filter createFilter(final Enumeration request)
   for easy creation of a Filter object from an Enumeration Request.
   EventingSupport & TransferExtensions have similar methods.

   BaseSupport has added two methods, createXmlFragment(List<Node>) &
   createXmlFragment(Nodelist) to ease creation of XmlFragment objects.
   TransferExtensions has done the same for use on the client side.

   The Filter interface was changed to return the filtered object as
   a Nodelist object rather than just a boolean. The Nodelist may contain
   projected elements if the filter contains a projection. The Nodelist
   can be diretly passed to BaseSupport.createXmlFragment(Nodelist)
   described above.

   Transfer.getResource(QName name) was added to easily get the resource object
   passed in Create, Update, & Delete requests.

   TransferExtensions.getResource(QName) overrides Transfer.getResource() and
   will check for XmlFragment objects if the QName object is not found.

   TransferExtensions.setFragmentGetResponse(
			final SOAPHeaderElement fragmentTransferHeader,
			final Object resource)

   has been added. This method will, using any registerd Filter handler,
   process the Fragment Transfer get against the provided resource object
   and set the result in the response. The resulting resource will
   automatically be wrapped into an XmlFragment for the caller and placed
   into the body of the repsonse. NOTE: results from applying the
   Fragment Transfer filter are always warpped in an XmlFragment by
   this method, whether the filter specified projections or not, as the caller
   specifically requested Fragment Transfer. This is not done for
   enumerations where the fragment transfer is mixed in with the wsman:filter.
   In the case of Enumerations if the filter selects the entire resource
   it is not wrapped in an XmlFragment.

   If setFragmentGetResponse() is called with fragmentTransferHeader set
   to null the method will simply put the resource object into the body of
   the response for the caller.

   NOTE: More work is needed on the client side to make, so I have listed/closed
         issue #24: Client fragment support should be simplified

4. To run the tests the "se/src/binding.properties" file MUST be edited first.
   Uncomment the line:

   com.sun.ws.management.xml.custom.packagenames = foo.test,com.hp.examples.ws.wsman.user

   This is needed for some tests to correctly execute.

5. I could NOT correctly build the JAXB Object Factory sources using the build.xml.
   All sources were built and compiled OK, but some tests failed. The reason is that
   attempts to add the "mustUnderstand" attribute to a header did not work. The
   call did not produce an error, but the header did not have the attribute. I
   duplicated this problem on two different system. Eventually I used the source
   that was previously built with JAXB and the tests then passed.

6. testMaxEnvelopeSizeTooBig() fails for test-jaxws. I do not know why. It is the
   only test that failed for me, though. I commented it out for my tests.]]></msg>
	</entry>
	<entry>
		<date>2007-01-22</date>
		<time>12:55</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/src/binding.properties]]></name>
			<revision>1.5</revision>
			<prevrevision>1.4</prevrevision>
		</file>
		<msg><![CDATA[Issue number:  64
Obtained from:
Submitted by:
Reviewed by:

Moved to se/test/etc.]]></msg>
	</entry>
	<entry>
		<date>2006-11-02</date>
		<time>20:43</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[se/src/net/java/dev/wiseman/server/handler/config/_1/ObjectFactory.java]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[se/src/net/java/dev/wiseman/server/handler/config/_1/package-info.java]]></name>
			<revision>1.1</revision>
		</file>
		<msg><![CDATA[Added JAXB classes for a new handler config file.]]></msg>
	</entry>
	<entry>
		<date>2007-01-29</date>
		<time>16:48</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[tools/samples/trafficlight_server/src/net/java/dev/wiseman/resources/traffic/_1/light/LightHandler.java]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[tools/samples/trafficlight_server/xsd/light.xsd]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[tools/samples/trafficlight_server/xsd/traffic.xsd]]></name>
			<revision>1.2</revision>
		</file>
		<msg><![CDATA[Issue number:  68
Obtained from:
Submitted by:  denis_rachal
Reviewed by:

Updated sample client to use a single handler and new generated source files.]]></msg>
	</entry>
	<entry>
		<date>2007-01-14</date>
		<time>17:52</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/handler/wsman/test/pull_source_Handler.java]]></name>
			<revision>1.14</revision>
			<prevrevision>1.13</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.14.2;


Changes with this submission:

51: Enhance EnumerationIterator IF to indicate iterator is already filtered.
52: Enumeration Pull may return zero objects when filtered.
53: Concurrent access to Enum context not protected

In addition the following items have been added:

1. EnumerationSupport, EnumerationHandler and EnumerationIterator have been
   completely reworked and simplified. An IteratorFactory interface has
   been added. Users wanting EnumerationSupport to handle their enumeration
   requests will need to port their iterator to the new EnumerationIterator
   interface, create an IteratorFactory and register their factory with
   EnumerationSupport.

   EnumerationSupport & EnumerationHandler are now able to support concurrent
   requests to a single resource URI.

   EnumerationSupport will now correctly detect "projections" in the filter
   and wrap the projected items within an XmlFragment. Projections are selections
   of a portion of a resource as opposed to the whole resource.

   EnumerationSupport will not filter or wrap in XmlFragment items returned from
   an iterator that returns true from EnumerationIterator.isFilter().

   The test User handler EnuerationUserHandler has been completely rewritten
   to now use the EnumerationSupport & is now split into UserEnumerationHandler,
   UserIteratorFactory & UserStore. They are used for testing and can be used
   as an example.

2. A filter unit test has been added. Several bugs were fixed in this area
   due to errors produced by this test. In particular, a namespace map was
   needed to be added to the client interfaces accepting a filter. This map
   contains the namespaces used in the filter expression. The namespaces are
   needed on the server side in order to properly evaluate the filter.
   Previously the namespaces for the document produced on the server side were
   passed to the XPath object. This was incorrect.

   Additionally NamespaceMap(Node node) was used on the server side to obtain
   the set of namespaces. This scanned the document from the specified node
   to the last child. This was incorrect. It needed to scan the document from
   the specified node to the root (opposite direction).

   Several support functions were added to process filtering on the server side.
   See below in item 3.

3. Several client and server interfaces have been enhanced to allow for easier
   handling of XmlFragment and filtering in general.
   EnumerationSupport has already been mentioned.

   EnumerationSupport has the added method:
   public static Filter createFilter(final Enumeration request)
   for easy creation of a Filter object from an Enumeration Request.
   EventingSupport & TransferExtensions have similar methods.

   BaseSupport has added two methods, createXmlFragment(List<Node>) &
   createXmlFragment(Nodelist) to ease creation of XmlFragment objects.
   TransferExtensions has done the same for use on the client side.

   The Filter interface was changed to return the filtered object as
   a Nodelist object rather than just a boolean. The Nodelist may contain
   projected elements if the filter contains a projection. The Nodelist
   can be diretly passed to BaseSupport.createXmlFragment(Nodelist)
   described above.

   Transfer.getResource(QName name) was added to easily get the resource object
   passed in Create, Update, & Delete requests.

   TransferExtensions.getResource(QName) overrides Transfer.getResource() and
   will check for XmlFragment objects if the QName object is not found.

   TransferExtensions.setFragmentGetResponse(
			final SOAPHeaderElement fragmentTransferHeader,
			final Object resource)

   has been added. This method will, using any registerd Filter handler,
   process the Fragment Transfer get against the provided resource object
   and set the result in the response. The resulting resource will
   automatically be wrapped into an XmlFragment for the caller and placed
   into the body of the repsonse. NOTE: results from applying the
   Fragment Transfer filter are always warpped in an XmlFragment by
   this method, whether the filter specified projections or not, as the caller
   specifically requested Fragment Transfer. This is not done for
   enumerations where the fragment transfer is mixed in with the wsman:filter.
   In the case of Enumerations if the filter selects the entire resource
   it is not wrapped in an XmlFragment.

   If setFragmentGetResponse() is called with fragmentTransferHeader set
   to null the method will simply put the resource object into the body of
   the response for the caller.

   NOTE: More work is needed on the client side to make, so I have listed/closed
         issue #24: Client fragment support should be simplified

4. To run the tests the "se/src/binding.properties" file MUST be edited first.
   Uncomment the line:

   com.sun.ws.management.xml.custom.packagenames = foo.test,com.hp.examples.ws.wsman.user

   This is needed for some tests to correctly execute.

5. I could NOT correctly build the JAXB Object Factory sources using the build.xml.
   All sources were built and compiled OK, but some tests failed. The reason is that
   attempts to add the "mustUnderstand" attribute to a header did not work. The
   call did not produce an error, but the header did not have the attribute. I
   duplicated this problem on two different system. Eventually I used the source
   that was previously built with JAXB and the tests then passed.

6. testMaxEnvelopeSizeTooBig() fails for test-jaxws. I do not know why. It is the
   only test that failed for me, though. I commented it out for my tests.]]></msg>
	</entry>
	<entry>
		<date>2007-01-11</date>
		<time>13:17</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/gen-src/README]]></name>
			<revision>1.2</revision>
			<prevrevision>1.1</prevrevision>
		</file>
		<msg><![CDATA[Wiseman on top of JAX-WS 2.0
Main changes:
- Removal of JAXB binaries from CVS.
  You will have to copy jaxws jars (you can download them from https://jax-ws.dev.java.net/jax-ws-20-fcs/) in lib/jaxws directory.
 (Planing to see how we can integrate the Maven java.net repository to express dependency we have on JAX-WS project.)
- Source code impact. Quite a lot but mainly rework of WsManServlet, introduced new WSManAgent and WSManJAXWSEndpoint.
  Rework of initialization, removal of various initialization() methods.
  New Message construction based on a SOAPMessage.
- Schemas location.They are now located in com.sun.ws.management.resources.schemas.
  They can be found as Resource from current ClassLoader. It is no more linked to Servlet.
  Custom schemas can still be provided thanks to ServletContext (as before)
  The schemas have been renamed, the ordering based on name has been replaced by a list in wiseman.properties file.
- JAXB Generation. Removal of the files from the repository.
  Generated file should be generated with the release of JAX-WS you selected.
  If we let the generated code in the CVS repository, we could ran into future compatibility problems.
  You have to call "generate-jaxb" manually.
- Build impact. New targets to build and deploy jax-ws compliant war (named wisman-jaxws.war)
- Tests. Removal of the automatic copy of JAXB/SAAJ jar in the tomcat /shared/lib.
  This is something that is nice but can easily break existing configuration.
  All existing tests and interop scenarii can be run with a Servlet based agent or with a JAX-WS one.
  Choose your target : "test" or "test-jaxws". The single difference between these 2 targets is deployment of the right war.
  J2SE deployment. WiseMan JAX-WS Endpoint can be deployed in JAX-WS http server (no more need of Servlet container),
  the build targets are currently commented due to Servlet dependency in Tests (If someone wants to rework a little bit handlers,
  we could have all tests passing indifferently on top of J2SE or J2EE!!!!). To play with such deployment, uncomment following
  ant build targets "deploy-j2se-jaxws" to start the agent side and "test-j2se-jaxws" to start the client side).
- misc: Commented the test.foo package from binding.properties.
- Trace. Removal of logging configuration file loading. Addition of a logging.properties file that is
  packaged in WEB-INF/classes in order to generate in <catalina-home>/logs a file that contains all wiseman traces.
  This is very useful when you are debugging tests. The generated file name is wiseman-<date of the day>.out]]></msg>
	</entry>
	<entry>
		<date>2006-12-05</date>
		<time>10:55</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/BaseSupport.java]]></name>
			<revision>1.9</revision>
			<prevrevision>1.8</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.9.2;
Fix for Supporting multiple Filter dialects : https://wiseman.dev.java.net/issues/show_bug.cgi?id=43]]></msg>
	</entry>
	<entry>
		<date>2007-01-26</date>
		<time>15:11</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[tools/samples/build.xml]]></name>
			<revision>1.1</revision>
			<prevrevision>1.1.2.1</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.1.2;
Issue number:  61
Obtained from:
Submitted by:  denis_rachal
Reviewed by:

Templates for code generation have been updated to run with new Enumeration interfaces.

Samples programs updated to run with newer Enumeration interfaces.

Sample documentation updated.

Build project files updated for sample ant builds.

Eclipse project files added for sample builds.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:25</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/handler/wsman/test/exec_Handler.java]]></name>
			<revision>1.10.2.1</revision>
			<prevrevision>1.12.2.1</prevrevision>
		</file>
		<msg><![CDATA[HandlerContext changes side effect]]></msg>
	</entry>
	<entry>
		<date>2007-01-14</date>
		<time>17:52</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/handler/wsman/test/pull_source_IteratorFactory.java]]></name>
			<revision>1.1</revision>
			<prevrevision>1.1.2.1</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.1.2;


Changes with this submission:

51: Enhance EnumerationIterator IF to indicate iterator is already filtered.
52: Enumeration Pull may return zero objects when filtered.
53: Concurrent access to Enum context not protected

In addition the following items have been added:

1. EnumerationSupport, EnumerationHandler and EnumerationIterator have been
   completely reworked and simplified. An IteratorFactory interface has
   been added. Users wanting EnumerationSupport to handle their enumeration
   requests will need to port their iterator to the new EnumerationIterator
   interface, create an IteratorFactory and register their factory with
   EnumerationSupport.

   EnumerationSupport & EnumerationHandler are now able to support concurrent
   requests to a single resource URI.

   EnumerationSupport will now correctly detect "projections" in the filter
   and wrap the projected items within an XmlFragment. Projections are selections
   of a portion of a resource as opposed to the whole resource.

   EnumerationSupport will not filter or wrap in XmlFragment items returned from
   an iterator that returns true from EnumerationIterator.isFilter().

   The test User handler EnuerationUserHandler has been completely rewritten
   to now use the EnumerationSupport & is now split into UserEnumerationHandler,
   UserIteratorFactory & UserStore. They are used for testing and can be used
   as an example.

2. A filter unit test has been added. Several bugs were fixed in this area
   due to errors produced by this test. In particular, a namespace map was
   needed to be added to the client interfaces accepting a filter. This map
   contains the namespaces used in the filter expression. The namespaces are
   needed on the server side in order to properly evaluate the filter.
   Previously the namespaces for the document produced on the server side were
   passed to the XPath object. This was incorrect.

   Additionally NamespaceMap(Node node) was used on the server side to obtain
   the set of namespaces. This scanned the document from the specified node
   to the last child. This was incorrect. It needed to scan the document from
   the specified node to the root (opposite direction).

   Several support functions were added to process filtering on the server side.
   See below in item 3.

3. Several client and server interfaces have been enhanced to allow for easier
   handling of XmlFragment and filtering in general.
   EnumerationSupport has already been mentioned.

   EnumerationSupport has the added method:
   public static Filter createFilter(final Enumeration request)
   for easy creation of a Filter object from an Enumeration Request.
   EventingSupport & TransferExtensions have similar methods.

   BaseSupport has added two methods, createXmlFragment(List<Node>) &
   createXmlFragment(Nodelist) to ease creation of XmlFragment objects.
   TransferExtensions has done the same for use on the client side.

   The Filter interface was changed to return the filtered object as
   a Nodelist object rather than just a boolean. The Nodelist may contain
   projected elements if the filter contains a projection. The Nodelist
   can be diretly passed to BaseSupport.createXmlFragment(Nodelist)
   described above.

   Transfer.getResource(QName name) was added to easily get the resource object
   passed in Create, Update, & Delete requests.

   TransferExtensions.getResource(QName) overrides Transfer.getResource() and
   will check for XmlFragment objects if the QName object is not found.

   TransferExtensions.setFragmentGetResponse(
			final SOAPHeaderElement fragmentTransferHeader,
			final Object resource)

   has been added. This method will, using any registerd Filter handler,
   process the Fragment Transfer get against the provided resource object
   and set the result in the response. The resulting resource will
   automatically be wrapped into an XmlFragment for the caller and placed
   into the body of the repsonse. NOTE: results from applying the
   Fragment Transfer filter are always warpped in an XmlFragment by
   this method, whether the filter specified projections or not, as the caller
   specifically requested Fragment Transfer. This is not done for
   enumerations where the fragment transfer is mixed in with the wsman:filter.
   In the case of Enumerations if the filter selects the entire resource
   it is not wrapped in an XmlFragment.

   If setFragmentGetResponse() is called with fragmentTransferHeader set
   to null the method will simply put the resource object into the body of
   the response for the caller.

   NOTE: More work is needed on the client side to make, so I have listed/closed
         issue #24: Client fragment support should be simplified

4. To run the tests the "se/src/binding.properties" file MUST be edited first.
   Uncomment the line:

   com.sun.ws.management.xml.custom.packagenames = foo.test,com.hp.examples.ws.wsman.user

   This is needed for some tests to correctly execute.

5. I could NOT correctly build the JAXB Object Factory sources using the build.xml.
   All sources were built and compiled OK, but some tests failed. The reason is that
   attempts to add the "mustUnderstand" attribute to a header did not work. The
   call did not produce an error, but the header did not have the attribute. I
   duplicated this problem on two different system. Eventually I used the source
   that was previously built with JAXB and the tests then passed.

6. testMaxEnvelopeSizeTooBig() fails for test-jaxws. I do not know why. It is the
   only test that failed for me, though. I commented it out for my tests.]]></msg>
	</entry>
	<entry>
		<date>2006-11-02</date>
		<time>20:45</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/RequestDispatcherConfig.java]]></name>
			<revision>1.1</revision>
			<prevrevision>1.1.2.1</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.1.2;
Reflective Request Dispatcher now supports a configuration file to map specifc resource to handler classes.]]></msg>
	</entry>
	<entry>
		<date>2007-01-14</date>
		<time>17:52</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/enumeration/EnumerationExtensions.java]]></name>
			<revision>1.11</revision>
			<prevrevision>1.10</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/handler/org/dmtf/schemas/wbem/wscim/_1/cim_schema/_2/cim_numericsensor_IteratorFactory.java]]></name>
			<revision>1.1</revision>
		</file>
		<msg><![CDATA[

Changes with this submission:

51: Enhance EnumerationIterator IF to indicate iterator is already filtered.
52: Enumeration Pull may return zero objects when filtered.
53: Concurrent access to Enum context not protected

In addition the following items have been added:

1. EnumerationSupport, EnumerationHandler and EnumerationIterator have been
   completely reworked and simplified. An IteratorFactory interface has
   been added. Users wanting EnumerationSupport to handle their enumeration
   requests will need to port their iterator to the new EnumerationIterator
   interface, create an IteratorFactory and register their factory with
   EnumerationSupport.

   EnumerationSupport & EnumerationHandler are now able to support concurrent
   requests to a single resource URI.

   EnumerationSupport will now correctly detect "projections" in the filter
   and wrap the projected items within an XmlFragment. Projections are selections
   of a portion of a resource as opposed to the whole resource.

   EnumerationSupport will not filter or wrap in XmlFragment items returned from
   an iterator that returns true from EnumerationIterator.isFilter().

   The test User handler EnuerationUserHandler has been completely rewritten
   to now use the EnumerationSupport & is now split into UserEnumerationHandler,
   UserIteratorFactory & UserStore. They are used for testing and can be used
   as an example.

2. A filter unit test has been added. Several bugs were fixed in this area
   due to errors produced by this test. In particular, a namespace map was
   needed to be added to the client interfaces accepting a filter. This map
   contains the namespaces used in the filter expression. The namespaces are
   needed on the server side in order to properly evaluate the filter.
   Previously the namespaces for the document produced on the server side were
   passed to the XPath object. This was incorrect.

   Additionally NamespaceMap(Node node) was used on the server side to obtain
   the set of namespaces. This scanned the document from the specified node
   to the last child. This was incorrect. It needed to scan the document from
   the specified node to the root (opposite direction).

   Several support functions were added to process filtering on the server side.
   See below in item 3.

3. Several client and server interfaces have been enhanced to allow for easier
   handling of XmlFragment and filtering in general.
   EnumerationSupport has already been mentioned.

   EnumerationSupport has the added method:
   public static Filter createFilter(final Enumeration request)
   for easy creation of a Filter object from an Enumeration Request.
   EventingSupport & TransferExtensions have similar methods.

   BaseSupport has added two methods, createXmlFragment(List<Node>) &
   createXmlFragment(Nodelist) to ease creation of XmlFragment objects.
   TransferExtensions has done the same for use on the client side.

   The Filter interface was changed to return the filtered object as
   a Nodelist object rather than just a boolean. The Nodelist may contain
   projected elements if the filter contains a projection. The Nodelist
   can be diretly passed to BaseSupport.createXmlFragment(Nodelist)
   described above.

   Transfer.getResource(QName name) was added to easily get the resource object
   passed in Create, Update, & Delete requests.

   TransferExtensions.getResource(QName) overrides Transfer.getResource() and
   will check for XmlFragment objects if the QName object is not found.

   TransferExtensions.setFragmentGetResponse(
			final SOAPHeaderElement fragmentTransferHeader,
			final Object resource)

   has been added. This method will, using any registerd Filter handler,
   process the Fragment Transfer get against the provided resource object
   and set the result in the response. The resulting resource will
   automatically be wrapped into an XmlFragment for the caller and placed
   into the body of the repsonse. NOTE: results from applying the
   Fragment Transfer filter are always warpped in an XmlFragment by
   this method, whether the filter specified projections or not, as the caller
   specifically requested Fragment Transfer. This is not done for
   enumerations where the fragment transfer is mixed in with the wsman:filter.
   In the case of Enumerations if the filter selects the entire resource
   it is not wrapped in an XmlFragment.

   If setFragmentGetResponse() is called with fragmentTransferHeader set
   to null the method will simply put the resource object into the body of
   the response for the caller.

   NOTE: More work is needed on the client side to make, so I have listed/closed
         issue #24: Client fragment support should be simplified

4. To run the tests the "se/src/binding.properties" file MUST be edited first.
   Uncomment the line:

   com.sun.ws.management.xml.custom.packagenames = foo.test,com.hp.examples.ws.wsman.user

   This is needed for some tests to correctly execute.

5. I could NOT correctly build the JAXB Object Factory sources using the build.xml.
   All sources were built and compiled OK, but some tests failed. The reason is that
   attempts to add the "mustUnderstand" attribute to a header did not work. The
   call did not produce an error, but the header did not have the attribute. I
   duplicated this problem on two different system. Eventually I used the source
   that was previously built with JAXB and the tests then passed.

6. testMaxEnvelopeSizeTooBig() fails for test-jaxws. I do not know why. It is the
   only test that failed for me, though. I commented it out for my tests.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:26</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/soap/SOAP.java]]></name>
			<revision>1.14.2.1</revision>
		</file>
		<msg><![CDATA[SOAPMessqge constructor]]></msg>
	</entry>
	<entry>
		<date>2006-10-16</date>
		<time>14:50</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[tools/src/templates/TransferSupport.vm]]></name>
			<revision>1.3</revision>
			<prevrevision>1.4</prevrevision>
		</file>
		<msg><![CDATA[Issue number:  42
Refactored Handler Context all the way down the stack into all generated or framework based code and examples.=============================================================================

RCS file: /cvs/wiseman/tools/src/templates/WsdlFromXsd.vm,v
Working file: tools/src/templates/WsdlFromXsd.vm
head: 1.4
branch:
locks: strict
access list:
symbolic names:
	wiseman_0_6_release: 1.3.0.4
	Root_wiseman_0_6_release: 1.3
	wiseman_0_6_rc3: 1.3
	post_0_6_enh: 1.3.0.2
	Root_post_0_6_enh: 1.3
	pre_jaxws_10jan2007: 1.2
	Release_05: 1.2
	interop06: 1.2
keyword substitution: kv
total revisions: 5;	selected revisions: 3
description:]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>13:03</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/enumeration/Enumeration.java]]></name>
			<revision>1.18</revision>
			<prevrevision>1.17</prevrevision>
		</file>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/enumeration/EnumerationExtensions.java]]></name>
			<revision>1.10</revision>
			<prevrevision>1.9</prevrevision>
		</file>
		<msg><![CDATA[Issue number:  50
Obtained from:
Submitted by:  jfdenise
Reviewed by:

Added changes to support wsman:Filter, as opposed to just wsen:Filter.]]></msg>
	</entry>
	<entry>
		<date>2006-10-09</date>
		<time>19:08</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[client/src/com/sun/ws/management/client/impl/EnumerationResourceImpl.java]]></name>
			<revision>1.12</revision>
			<prevrevision>1.10</prevrevision>
		</file>
		<msg><![CDATA[Issue number: 41 Custom Dialects in Client filter requests are ignored.
Dialect as hard coded to NSURI.EPath. This has been changed.----------------------------
revision 1.11
date: 2006/10/09 18:29:55;  author: obiwan314;  state: Exp;  lines: +19 -39
Issue number: 40
Client was failing to provide resourceuri and selectors consistenly in all requests during enumeration process. EnumerationResourceImpl now uses utilities in base class to provide this data.]]></msg>
	</entry>
	<entry>
		<date>2007-01-26</date>
		<time>15:11</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[tools/src/templates/EnumerationSupport.vm]]></name>
			<revision>1.4</revision>
			<prevrevision>1.3</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.4.2;
Issue number:  61
Obtained from:
Submitted by:  denis_rachal
Reviewed by:

Templates for code generation have been updated to run with new Enumeration interfaces.

Samples programs updated to run with newer Enumeration interfaces.

Sample documentation updated.

Build project files updated for sample ant builds.

Eclipse project files added for sample builds.]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>20:24</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[client/src/com/sun/ws/management/client/impl/EnumerationResourceImpl.java]]></name>
			<revision>1.18</revision>
			<prevrevision>1.17</prevrevision>
		</file>
		<msg><![CDATA[Removed hard coded "EndTo" paramterfrom enumerate() method.]]></msg>
	</entry>
	<entry>
		<date>2006-10-16</date>
		<time>14:50</time>
		<author><![CDATA[obiwan314]]></author>
		<file>
			<name><![CDATA[tools/src/templates/EnumerationSupport.vm]]></name>
			<revision>1.3</revision>
		</file>
		<msg><![CDATA[Issue number:  42
Refactored Handler Context all the way down the stack into all generated or framework based code and examples.----------------------------
revision 1.4.2.1
date: 2007/02/20 12:15:06;  author: denis_rachal;  state: Exp;  lines: +4 -0


Various enhancements and fixes are included in this branch:

1. XmlFragment processing on Get cannot handle Text nodes.

2. Addressing.addHeaders() cannot handle JAXB objects.

3. Enhancement: Add ability to to be notified on creation & deletion of enumerations and subscriptions.

4. Enhancement: Add code generation for Eventing operations

5. Enhancement: Add ability for Eventing & Enumeration pull mode applications to asynchronously notify waiters on the iterator that data is now available.

6. Enhancement: Add a default EventingIterator for use by Eventing pull sources.

7. Enhancement: Enhance EventingSupport.subscribe() to accept both pull and push mode subscriptions.

8. Enhancement: Add EventingSupport.sendEvent() method that can handle both push and pull mode events.

9. Enhancement: Add possibility to disable default wsman:OperationTimeout behavior built in to WSManAgent

10. Enhancement: Performance improvements to make better reuse of JAXBContext objects

11. Enhancement: Add Object getResource() helper method to Transfer class. Returns first object in SOAP body (payload).

12. Enhancement: Enhance Xsd2Wsdl task to allow specifying resource type, name, and target namespace from an ant task.]]></msg>
	</entry>
	<entry>
		<date>2006-12-05</date>
		<time>10:35</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/EventingContext.java]]></name>
			<revision>1.4</revision>
			<prevrevision>1.4.4.1</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.4.4;
Fix for Supporting multiple Filter dialects : https://wiseman.dev.java.net/issues/show_bug.cgi?id=43]]></msg>
	</entry>
	<entry>
		<date>2006-12-21</date>
		<time>08:22</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/resources/schemas/addressing.xsd]]></name>
			<revision>1.1</revision>
			<prevrevision>1.1.2.1</prevrevision>
		</file>
		<msg><![CDATA[branches:  1.1.2;
file addressing.xsd was initially added on branch jaxws_branch.]]></msg>
	</entry>
	<entry>
		<date>2007-01-26</date>
		<time>15:11</time>
		<author><![CDATA[denis_rachal]]></author>
		<file>
			<name><![CDATA[se/test/gen-src/com/hp/examples/ws/wsman/user/ObjectFactory.java]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[se/test/gen-src/com/hp/examples/ws/wsman/user/UserType.java]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[se/test/gen-src/com/hp/examples/ws/wsman/user/UsersType.java]]></name>
			<revision>1.1</revision>
		</file>
		<file>
			<name><![CDATA[se/test/gen-src/com/hp/examples/ws/wsman/user/package-info.java]]></name>
			<revision>1.1</revision>
		</file>
		<msg><![CDATA[Issue number:  61
Obtained from:
Submitted by:  denis_rachal
Reviewed by:

Templates for code generation have been updated to run with new Enumeration interfaces.

Samples programs updated to run with newer Enumeration interfaces.

Sample documentation updated.

Build project files updated for sample ant builds.

Eclipse project files added for sample builds.]]></msg>
	</entry>
	<entry>
		<date>2007-01-15</date>
		<time>15:49</time>
		<author><![CDATA[jfdenise]]></author>
		<file>
			<name><![CDATA[se/src/com/sun/ws/management/server/WSManServlet.java]]></name>
			<revision>1.29</revision>
			<prevrevision>1.28</prevrevision>
		</file>
		<msg><![CDATA[Fix for bug 57 :Max envelop size handling is still coupled to Servlet]]></msg>
	</entry>
</changelog>
