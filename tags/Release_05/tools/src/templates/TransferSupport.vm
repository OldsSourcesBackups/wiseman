#*
  This is the template to produce the required CUSTOM delegate.

  This delegate utilizes TransferSupport.

  Required Velocity Variables: 
    ${package}              - packagename for the class
    ${delegateName}         - simple name of delegate class
    ${hasCustomOpNames}     - boolean. Determines if a mapping is needed for
                              SPEC Action URIs to custom op names
    ${hasCustomOps}         - boolean. Determines if there are custom operations.
    ${overriddenMethodMap}  - Map containing key:String ActionURI to value:WsManOp
                              this is used for overridden SPEC operation names
    ${customOperationMap}   - Map containing key:String ActionURI to value:WsManOp
                              this is used for custom operations
*#
package ${package};

import com.sun.ws.management.framework.transfer.TransferSupport;
import com.sun.ws.management.Management;
import com.sun.ws.management.xml.XmlBinding;
import com.sun.ws.management.InternalErrorFault;

import java.util.logging.Logger;
import java.util.Map;

import javax.xml.bind.JAXBException;

/**
 * ${delegateName} deligate is responsible for processing WS-Transfer actions.
 * @GENERATED
 */
public class ${delegateName} extends TransferSupport
{
    //Log for logging messages
    private Logger log = Logger.getLogger(${delegateName}.class.getName());

	private static XmlBinding binding;
	private static final String RESOURCE_JAXB_PACKAGE = "${firstJaxBPackage}";
	{
		try {
			binding = new XmlBinding(null,RESOURCE_JAXB_PACKAGE);
		} catch (JAXBException e) {
			throw new InternalErrorFault(e.getMessage());
		}
	}
	private static final ${firstJaxBPackage}.ObjectFactory resourceFactory = new ${firstJaxBPackage}.ObjectFactory();
    public static final org.xmlsoap.schemas.ws._2004._08.addressing.ObjectFactory addressingFactory = new org.xmlsoap.schemas.ws._2004._08.addressing.ObjectFactory();
    public static final org.dmtf.schemas.wbem.wsman._1.wsman.ObjectFactory managementFactory = new org.dmtf.schemas.wbem.wsman._1.wsman.ObjectFactory();


#if(!${hasCustomOpNames})
    public void create(Management request, Management response)
    {
        super.create(request, response);
    }

    public void delete(Management request, Management response)
    {
        super.delete(request, response);
    }

    public void get(Management request, Management response)
    {
        super.get(request, response);
    }

    public void put(Management request)
    {
        super.put(request);
    }
#end

#if(${hasCustomOpNames})
#foreach( $key in ${overriddenMethodMap.keySet()} )
     public void ${overriddenMethodMap.get($key).OverriddenOpName}( String resource, Management request, Management response )
     {
         //TODO IMPLEMENT
         ${overriddenMethodMap.get($key).OperationName}( request, response);
     }

#end

#end

#if(${hasCustomOps})
#foreach( $key in ${customOperationMap.keySet()} )
     public void ${customOperationMap.get($key).OperationName}( String resource, Management request, Management response )
     {
         //TODO IMPLEMENT CUSTOM OPERATION
     }

#end

#end

}
