<?xml version="1.0"?>
<!-- ====================================================================== 
     Mar 22, 2006 9:55:07 AM                                                        

     Wiseman-Man Client    
     ====================================================================== 
-->
<project name="Wiseman Client" default="dist">
    <description>
            This is a build file for the Wiseman client implementation.
    </description>
	
	<!-- Load the properties -->
	<property file="project.properties"/>
	<property file="${user.home}/.ant.properties"/>

	<!-- Compilation classpath -->
	  <path id="compile.classpath">
	    <fileset dir="${lib.dir}">
	      <include name="**/*.jar"/>
	    </fileset>
	    <fileset dir="${wiseman.root}/${lib.dir}">
	      <include name="**/*.jar"/>
	    </fileset>
	    <fileset dir="${wiseman.root}/${dist.dir}">
	      <include name="**/*.jar"/>
	    </fileset>
	  </path>	

	<!-- Test that a valid ant version is being used -->
	<condition property="valid.ant.version">
		<or>
		  <contains substring="1.6.5" string="${ant.version}" />	
		  <contains substring="1.7." string="${ant.version}" />	
		</or>
	</condition>
	<fail message="You should be using ant 1.6.5 or better."
	      unless="valid.ant.version"/>
	
	<target name="clean">
		<delete dir="${dist.dir}"/>
	    <delete dir="${build.dir}" />
	    <delete dir="${build.classes.dir}" />
		<delete dir="${test.build.classes.dir}" />
		<delete dir="${test.run.dir}" />
	    <delete dir="${gen.src.dir}" />
	    <delete dir="${apidocs.dir}" />	
	</target>
	
	<!-- Recreate all necessary directories. -->
	<target name="init" depends="clean">
	    <tstamp />
	    <mkdir dir="${dist.dir}" />
	    <mkdir dir="${build.dir}" />
	    <mkdir dir="${build.classes.dir}" />
	    <mkdir dir="${test.build.classes.dir}" />
		<mkdir dir="${test.run.dir}" />
	    <mkdir dir="${gen.src.dir}" />
	    <mkdir dir="${lib.dir}" />
	    <mkdir dir="${doc.dir}" />
	    <mkdir dir="${apidocs.dir}" />	
    </target>
	
	
	<!-- Compile -->
	<target name="compile" depends="init">
	  	<javac destdir="${build.classes.dir}"
	           debug="${debug}">
	      <classpath refid="compile.classpath" />
		  <src path="${src.dir}" />
	    </javac>
		
	  	<javac destdir="${test.build.classes.dir}"
	  		   debug="${debug}">
	      <classpath> 
	      		<path refid="compile.classpath" />
          		<path path="${build.classes.dir}" />
	      	    <fileset dir="${wiseman.root}/${test.lib.dir}">
	      	        <include name="junit.jar"/>
	      	    </fileset>
	      	</classpath>
	      	<src path="${test.src.dir}" />
	    </javac>
	</target>

	<target name="jar" depends="compile">
	    <jar destfile="${client.jar.file}">
	      	<fileset dir="${build.classes.dir}">
	      		<include name="com/**"/>
	      	</fileset>
	    </jar>
	    <jar destfile="${dist.dir}/wiseman-client-src.jar">
	      	<fileset dir="${src.dir}">
	      		<include name="com/**"/>
	      	</fileset>
	    </jar>
    </target>
	  
    <target name="javadoc" depends="compile" description="Generate the javadocs">
       <javadoc destdir="${apidocs.dir}"
                access="public"
                use="true"
                windowtitle="Wiseman Client API"
                source="1.5">
           <classpath>
               <path refid="compile.classpath" />
               <pathelement location="${build.classes.dir}" />
           </classpath>
           <fileset dir="${src.dir}" defaultexcludes="yes">
               <include name="com/sun/ws/management/client/**" />
        	   <exclude name="com/sun/ws/management/client/impl/**"/>
    	       <exclude name="**/*Impl.java"/>
        	   <exclude name="**/*.txt"/>
        	   <exclude name="**/*.xsd"/>
           </fileset>
       </javadoc>
      	<zip destfile="${dist.dir}/wiseman-client-apidocs.zip" basedir="${apidocs.dir}"/>
    </target>

	
	
	<target name="dist" depends="javadoc,jar">
	    <!-- jar destfile="${client.jar.file}">
	      	<fileset dir="${build.classes.dir}">
	      		<include name="com/**"/>
	      	</fileset>
	    </jar>
		
       <copy everything to staging area
        <copy todir="${staging.dir}" file="${client.jar.file}" />
        <copy todir="${staging.dir}" file="build.xml" />
            <copy todir="${staging.dir}" file="project.properties" />
		<copy todir="${staging.dir}/lib">
              <fileset dir="${lib.dir}" />      
		</copy> 
		<copy todir="${staging.dir}/src">
        <fileset dir="${src.dir}" />      
	        </copy> 
		<copy todir="${staging.dir}/test">
        <fileset dir="${test.dir}" />      
	        </copy> 
		<copy todir="${staging.dir}/etc">
        <fileset dir="${etc.dir}" />      
	        </copy> 
        
             -->
            <!-- ZIP and TAR/GZ the dist -->
            <!-- tar tarfile="${dist.dir}/${dist.name}.tar" basedir="${zip.base.dir}" excludes="dist"/>
            <gzip zipfile="${dist.dir}/${dist.name}.tar.gz" src="${dist.dir}/${dist.name}.tar"/ -->
            <!-- zip destfile="${dist.dir}/${dist.name}.zip"
               basedir="${zip.base.dir}"
               excludes="dist/**"
               update="true"/ -->              

	
	</target>
	
    <target name="test" depends="jar" >
    	<echo message="********************************************"/>
    	<echo message="* check client/test/run for logging output *"/>
    	<echo message="********************************************"/>
        <junit dir="${test.run.dir}"
        	   showoutput="true"
               fork="true" haltonfailure="true">
          <assertions>
            <enable/>
          </assertions>
            <batchtest todir="${test.run.dir}">
                <fileset dir="${test.src.dir}">
                  <include name="**/*Test*.java"/>
                  <exclude name="**/*Interop*.java"/>
                </fileset>
             </batchtest>
            <classpath>
            	<path refid="compile.classpath" />
        	    <path path="${build.classes.dir}" />
        	    <path path="${test.build.classes.dir}" />
            </classpath>
          <formatter usefile="false" type="brief"/>
          <formatter type="xml"/>
          <jvmarg value="-Dwsman.dest=http://localhost:8080/wsman/" />
          <jvmarg value="-Dwsman.user=wsman" />
          <jvmarg value="-Dwsman.password=secret" />
          <jvmarg value="-Dwsman.basicauthentication=true" />
          <jvmarg value="-Dcom.sun.ws.management.xml.custom.packagenames=foo.test,com.hp.examples.ws.wsman.user" />
          <jvmarg value="-Dcom.sun.ws.management.xml.validate=true" />
          <jvmarg value="-Djava.util.logging.config.file=../logging.properties" />
        </junit>
    </target>
	
    <target name="test-interop" depends="jar" >
    	<echo message="********************************************"/>
    	<echo message="* check client/test/run for logging output *"/>
    	<echo message="********************************************"/>
        <junit dir="${test.run.dir}"
        	   showoutput="true"
               fork="true" haltonfailure="true">
          <assertions>
            <enable/>
          </assertions>
            <batchtest todir="${test.run.dir}">
                <fileset dir="${test.src.dir}">
                    <include name="**/*Interop*.java"/>
                </fileset>
             </batchtest>
            <classpath>
            	<path refid="compile.classpath" />
        	    <path path="${build.classes.dir}" />
        	    <path path="${test.build.classes.dir}" />
            </classpath>
          <formatter usefile="false" type="brief"/>
          <formatter type="xml"/>
          <jvmarg value="-Dwsman.dest=http://localhost:8080/wsman/" />
          <jvmarg value="-Dwsman.user=wsman" />
          <jvmarg value="-Dwsman.password=secret" />
          <jvmarg value="-Dwsman.basicauthentication=true" />
          <jvmarg value="-Dcom.sun.ws.management.xml.custom.packagenames=foo.test,com.hp.examples.ws.wsman.user" />
          <jvmarg value="-Dcom.sun.ws.management.xml.validate=true" />
          <jvmarg value="-Djava.util.logging.config.file=../logging.properties" />
        </junit>
    </target>
    	
    <target name="test-all" depends="jar" >
    	<echo message="********************************************"/>
    	<echo message="* check client/test/run for logging output *"/>
    	<echo message="********************************************"/>
        <junit dir="${test.run.dir}"
        	   showoutput="true"
               fork="true" haltonfailure="true">
          <assertions>
            <enable/>
          </assertions>
            <batchtest todir="${test.run.dir}">
                <fileset dir="${test.src.dir}">
                  <include name="**/*Test*.java"/>
                </fileset>
             </batchtest>
            <classpath>
            	<path refid="compile.classpath" />
        	    <path path="${build.classes.dir}" />
        	    <path path="${test.build.classes.dir}" />
            </classpath>
          <formatter usefile="false" type="brief"/>
          <formatter type="xml"/>
          <jvmarg value="-Dwsman.dest=http://localhost:8080/wsman/" />
          <jvmarg value="-Dwsman.user=wsman" />
          <jvmarg value="-Dwsman.password=secret" />
          <jvmarg value="-Dwsman.basicauthentication=true" />
          <jvmarg value="-Dcom.sun.ws.management.xml.custom.packagenames=foo.test,com.hp.examples.ws.wsman.user" />
          <jvmarg value="-Dcom.sun.ws.management.xml.validate=true" />
          <jvmarg value="-Djava.util.logging.config.file=../logging.properties" />
        </junit>
    </target>
	
	<target name="autobuild" depends="javadoc,jar,test" />

</project>